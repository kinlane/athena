
[{
	"name": "Electronic mail software with modular integrated authoring/reading software components including methods and apparatus for controlling the interactivity between mail authors and recipients",
	"summary": "",
	"abstract": "Electronic mail software includes a main email component and a number of installable components which communicate bidirectionally with the email component through an application programming interface (API). The installable components include authoring/reading components and a mailbox browser/editor component. The main email component provides an underlying graphical user interface (GUI) for functions directly associated with the storage and transfer of electronic mail messages and also handles all data bundling and unbundling that may be required to transform a message created by an authoring component into a fully MIME compliant message. In addition, the main email component includes u201chooksu201d (an application programming interface or API) for the attachment of the installable components. The authoring/reading components each provide functionality particular to the type of document the component is designed to create/display. Some modular components, or messages created by them, have assigned u201crolesu201d whereby senders and recipients of certain email documents are provided different kinds of access to the documents.",
	"url": null,
	"owner": "",
	"publication_number": "07444374",
	"publication_date": "2008-10-28",
	"application_number": "09604428",
	"application_date": "2000-06-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Integrated online job recruitment system",
	"summary": "",
	"abstract": "The present invention provides an easy to use system and method for assisting job seekers in locating job opportunities and applying for the same using an online connectivity protocol which is simple to use and highly efficient in terms of time consumption. The system identifies and extracts keywords from the job postings in an accessible job database to create a keyword targeted list that excludes common words and phrases. The keyword targeted list is then processed to form a keyword targeted prefix list which in turn is inserted into a search engine. Upon appropriate query by a potential job seeker, the search engine returns its results while giving prominent placement to one or more job postings sponsored by a recruiter. An interested job seeker clicks on the sponsored job posting is directed to the job details through a website mediated application programming interface.",
	"url": null,
	"owner": "",
	"publication_number": "07653567",
	"publication_date": "2010-01-26",
	"application_number": "11525343",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "integrated-online-job-recruitment-system",
	"match_type": "abstract"
},
{
	"name": "Method and system for creating reusable software components through a uniform interface",
	"summary": "",
	"abstract": "A method for designing software components for integration into any system without additional coding is provided. The method includes adopting a uniform application programming interface that breaks down external objects to include the characteristics of object, attribute, and method. Ideally, the characteristics include create object, delete object, read attributes, write attributes, and invoke behavior. A software tool is provided for communication between an API and a data source, the tool including a join engine adapted to provide communication between at least one view and at least one base source associated with the data source, the join engine further adapted to update the at least one base source in response to updates to the view. Ideally, the tool is further configured to support on the at least one base source operations of create object and delete object on the at least one view. The software tool is also configured to map events in the at least one base source to the at least one view, and can be configured to create virtual attributes based on the view through operations or expressions performed on the view, including, but not limited to algebraic expressions, names, strings, and functions.",
	"url": null,
	"owner": "",
	"publication_number": "08185867",
	"publication_date": "2012-05-22",
	"application_number": "11932947",
	"application_date": "2007-10-31",
	"tags": null,
	"slug": "method-and-system-for-creating-reusable-software-components-through-a-uniform-interface",
	"match_type": "abstract"
},
{
	"name": "Method and system for creating reusable software components through a uniform interface",
	"summary": "",
	"abstract": "A method for designing software components for integration into any system without additional coding is provided. The method includes adopting a uniform application programming interface that breaks down external objects to include the characteristics of object, attribute, and method. Ideally, the characteristics include create object, delete object, read attributes, write attributes, and invoke behavior. A software tool is provided for communication between an API and a data source, the tool including a join engine adapted to provide communication between at least one view and at least one base source associated with the data source, the join engine further adapted to update the at least one base source in response to updates to the view. Ideally, the tool is further configured to support on the at least one base source operations of create object and delete object on the at least one view. The software tool is also configured to map events in the at least one base source to the at least one view, and can be configured to create virtual attributes based on the view through operations or expressions performed on the view, including, but not limited to algebraic expressions, names, strings, and functions.",
	"url": null,
	"owner": "",
	"publication_number": "07516439",
	"publication_date": "2009-04-07",
	"application_number": "11398847",
	"application_date": "2006-04-05",
	"tags": null,
	"slug": "method-and-system-for-creating-reusable-software-components-through-a-uniform-interface",
	"match_type": "abstract"
},
{
	"name": "Method and system for presenting and analyzing software source code through intermediate representation",
	"summary": "",
	"abstract": "The present invention provides a method and system for producing intermediate representation of source code listings with possibly mixed syntaxes to assist software development applications in presenting and analyzing the source code listings through reading the intermediate representation. A source code processor calls Application Programming Interfaces (APIs) to preserve source code information, which includes intermediate representation data sets and is preferably stored in a file-based repository. The source code processor is of a compiler, a preprocessor, a parser, or a comment document processor. The data sets capture lexical, syntax and semantic information of source code construct elements, and comprise of location, processor identification, construct category, and attribute data. A software development environment through a source code search engine is able to present source code construct elements, outlines, and symbol references from software packages over a plurality of distributed servers in a network such as the Internet.",
	"url": null,
	"owner": "",
	"publication_number": "08181167",
	"publication_date": "2012-05-15",
	"application_number": "11971904",
	"application_date": "2008-01-09",
	"tags": null,
	"slug": "method-and-system-for-presenting-and-analyzing-software-source-code-through-intermediate-representation",
	"match_type": "abstract"
},
{
	"name": "Methods, systems, and computer program products for establishing VoIP service in a network",
	"summary": "",
	"abstract": "Voice over Internet Protocol (VoIP) service is established in a network that that includes a Regional/Access Network (RAN) that facilitates differentiated end-to-end data transport between an Application Service Provider (ASP) and a Customer Premises Network (CPN) that includes Customer Premises Equipment (CPE). Application Programming interface (API) calls are used at the ASP to communicate with the RAN to establish VoIP service for the user having a user selected bandwidth and/or QoS associated therewith.",
	"url": null,
	"owner": "",
	"publication_number": "08204042",
	"publication_date": "2012-06-19",
	"application_number": "10933940",
	"application_date": "2004-09-03",
	"tags": null,
	"slug": "methods-systems-and-computer-program-products-for-establishing-voip-service-in-a-network",
	"match_type": "abstract"
},
{
	"name": "Voice over internet call center integration",
	"summary": "",
	"abstract": "An internet telephony system (ITS) comprising a browser display having a hyperlink, communicating with a server, retrieving a user's preferences, and initiating a voice communication with the user, through a communications channel defined by the user preferences. An ITS comprising a client system having an Internet browser, and a server hosting a Web site, wherein a message is transmitted from the server to the client system based on the user's status with respect to Web site, the user seeking to establish a voice communication session. A telephony server, comprising an application program communicating directly with telephony hardware, and an application programming interface, wherein the application program includes a call function to an external program. An ITS, comprising a browser display having a hyperlink, the hyperlink communicating with a server, retrieving a user-related data, and initiating a voice communication with the user, wherein the user is charged for the communication.",
	"url": null,
	"owner": "",
	"publication_number": "08179882",
	"publication_date": "2012-05-15",
	"application_number": "11853801",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "voice-over-internet-call-center-integration",
	"match_type": "abstract"
},
{
	"name": "Interaction management",
	"summary": "",
	"abstract": "In a system, at least one web server provides an interface to a web-enabled application to a first computing device, with the web-enabled application and the at least one web server belonging to a first domain. An interaction routing module routes a contact event to the first computing device. At least one application server receives and responds to an Hypertext Transfer Protocol (HTTP) request for requested information related to the contact event. The HTTP request is generated by the web-enabled application. An integration module receives the HTTP request from the at least one application server and translates the HTTP request to an application programming interface call to interface with a second computing device storing the requested information in a second domain. A messaging module provides the requested data to the web-enabled application.",
	"url": null,
	"owner": "8x8, Inc.",
	"publication_number": "08468545",
	"publication_date": "2013-06-18",
	"application_number": "12858814",
	"application_date": "2010-08-18",
	"tags": null,
	"slug": "interaction-management",
	"match_type": "abstract"
},
{
	"name": "Messaging interface system for customer care",
	"summary": "",
	"abstract": "A system is disclosed for serving a message to a target system. A database message is converted to a common data model to conform to at least two systems and an architecture of the target system. The common data model is transformed into a specified data type of the architecture of the target system. Calls are managed using specified functions available through an application programming interface offered by the architecture of the target system. Functions of the application programming interface are invoked to implement a target message in the architecture of the target system. The message is written to the target system.",
	"url": null,
	"owner": "Accenture Global Services Limited",
	"publication_number": "08060888",
	"publication_date": "2011-11-15",
	"application_number": "11900542",
	"application_date": "2007-09-12",
	"tags": null,
	"slug": "messaging-interface-system-for-customer-care",
	"match_type": "abstract"
},
{
	"name": "Method for integrating user notifications and user alerts on an electronic device",
	"summary": "",
	"abstract": "An interface for integrating and presenting user notifications and alerts consistently on an electronic device such as a mobile device is disclosed. First, an application programming interface provides the segregation to multiple preselected levels of priority notifications and alerts from all applications on the mobile device. Second, the application programming interface provides for the ability to display the notifications and alerts in a consistent manner for the user to handle.",
	"url": null,
	"owner": "Access Co., Ltd.",
	"publication_number": "07982598",
	"publication_date": "2011-07-19",
	"application_number": "12026546",
	"application_date": "2008-02-05",
	"tags": null,
	"slug": "method-for-integrating-user-notifications-and-user-alerts-on-an-electronic-device",
	"match_type": "abstract"
},
{
	"name": "System and method for real time account and account number generation using origination APIS",
	"summary": "",
	"abstract": "A system and method generate an account in real time in accordance with an application programming interface (API). The API contains parameter descriptions listing universal resource locator (URL) parameters associated with items. A format for implementing an http request to transmit data to in compliance with the defined format is disclosed. A transparent mode for transmitting a response to an http request transmitting data provides for the transmission of an extensible markup language (XML) formatted file communicating an outcome to the request.",
	"url": null,
	"owner": "Accountnow, Inc.",
	"publication_number": "07849010",
	"publication_date": "2010-12-07",
	"application_number": "12187284",
	"application_date": "2008-08-06",
	"tags": null,
	"slug": "system-and-method-for-real-time-account-and-account-number-generation-using-origination-apis",
	"match_type": "abstract"
},
{
	"name": "Methods and apparatus for implementing a custom driver for accessing a data source",
	"summary": "",
	"abstract": "Methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources are disclosed. A design-time driver for the additional data source is obtained, where the design-time driver supports the definition of data including one or more fields of the additional data source to retrieve from the additional data source. In addition, a run-time driver for the additional data source is obtained, where the run-time driver supports retrieval of data corresponding to the one or more fields from the additional data source and where the run-time driver has a second application programming interface. The design-time driver is executed via a first application programming interface, where the first application programming interface enables definition of the data including the one or more fields to be retrieved from the additional data source. The data is then retrieved from the additional data source via the run-time driver using the second application programming interface.",
	"url": null,
	"owner": "Actuate Corporation",
	"publication_number": "07831633",
	"publication_date": "2010-11-09",
	"application_number": "11021081",
	"application_date": "2004-12-22",
	"tags": null,
	"slug": "methods-and-apparatus-for-implementing-a-custom-driver-for-accessing-a-data-source",
	"match_type": "abstract"
},
{
	"name": "Method and system for data retrieval from heterogeneous data sources",
	"summary": "",
	"abstract": "A system and a method for specifying and configuring, together with categorising and classifying, heterogeneous types of multiple data sources is disclosed. The system and method also retrieve search results in accordance with search requests and conditions from at least one of the multiple data sources, for example a relational database management system (RDBMS), a light-weight directory access protocol (LDAP), an extensible mark-up language database (XMLDB), extensible mark-up language (XML) files, hypertext mark-up language (HTML) files, or TEXT files, through an application programming interface (API), or a web service interface such as a simple object access protocol (SOAP).",
	"url": null,
	"owner": "Agency for Science, Technology and Research",
	"publication_number": "07707168",
	"publication_date": "2010-04-27",
	"application_number": "10915732",
	"application_date": "2004-08-10",
	"tags": null,
	"slug": "method-and-system-for-data-retrieval-from-heterogeneous-data-sources",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for circuit design",
	"summary": "",
	"abstract": "A word processing or spreadsheet application is augmented by a plug-in and templates for computer aided design of electronic hardware entities. The plug-in utilizes the application programming interface to provide a menu system and executable code which inserts templates, reads and validates data entered into the template, computes addresses, annotates addresses and error messages back to a word processing document for display in the editor of the word processing document, and upon selection and request, generates output files for target simulators or synthesis tools.",
	"url": null,
	"owner": "Agnisys, Inc.",
	"publication_number": "08443335",
	"publication_date": "2013-05-14",
	"application_number": "13481814",
	"application_date": "2012-05-26",
	"tags": null,
	"slug": "apparatus-and-method-for-circuit-design",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for measuring stream availability, quality and performance",
	"summary": "",
	"abstract": "A streaming measurement agent designed to experience, measure, and report on a media stream as an actual end user would experience the stream. Preferably, agent resides transparently within a streaming media player itself so that it can monitor stream packet flows within the player as the measured streams are being played. In an illustrative embodiment, the agent comprises a performance monitoring module (PMM), which is software that resides in an interface between an existing core module and a renderer of a media player. The agent PMM intercepts each useful packet as it goes from the core to the renderer and, as a result, it is able to compute quality metrics about the playback. The agent functions u201ctransparentlyu201d to the media player by presenting the core with an application programming interface (API) that emulates the API that the renderer normally presents to the core. Thus, when the core believes it is calling the renderer, it is actually calling the agent PMM, which can then receive all the packets from the core and process them. After computing relevant performance metrics using the packets it receives, the agent PMM calls the renderer. A set of performance agents can be managed by a service provider to enable a content provider to determine how a stream is perceived by end users.",
	"url": null,
	"owner": "Akamai Technologies, Inc.",
	"publication_number": "07010598",
	"publication_date": "2006-03-07",
	"application_number": "10364753",
	"application_date": "2003-02-11",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for measuring stream availability, quality and performance",
	"summary": "",
	"abstract": "A streaming measurement agent designed to experience, measure, and report on a media stream as an actual end user would experience the stream. Preferably, agent resides transparently within a streaming media player itself so that it can monitor stream packet flows within the player as the measured streams are being played. In an illustrative embodiment, the agent comprises a performance monitoring module (PMM), which is software that resides in an interface between an existing core module and a renderer of a media player. The agent PMM intercepts each useful packet as it goes from the core to the renderer and, as a result, it is able to compute quality metrics about the playback. The agent functions u201ctransparentlyu201d to the media player by presenting the core with an application programming interface (API) that emulates the API that the renderer normally presents to the core. Thus, when the core believes it is calling the renderer, it is actually calling the agent PMM, which can then receive all the packets from the core and process them. After computing relevant performance metrics using the packets it receives, the agent PMM calls the renderer. A set of performance agents can be managed by a service provider to enable a content provider to determine how a stream is perceived by end users.",
	"url": null,
	"owner": "Akamai Technologies, Inc.",
	"publication_number": "07725576",
	"publication_date": "2010-05-25",
	"application_number": "11368835",
	"application_date": "2006-03-06",
	"tags": null,
	"slug": "method-and-apparatus-for-measuring-stream-availability-quality-and-performance",
	"match_type": "abstract"
},
{
	"name": "Data management framework for policy management",
	"summary": "",
	"abstract": "A data management framework for a data communications network. The framework includes a dynamically constructed model of elements of the data communications network. The elements are represented as object instances that are self-descriptive. The model provides a uniform application programming interface that allows a client to dynamically access the elements and dynamically add new elements in performing network management functions. The data management framework may be used for policy management.",
	"url": null,
	"owner": "Alcatel",
	"publication_number": "07028307",
	"publication_date": "2006-04-11",
	"application_number": "10003904",
	"application_date": "2001-11-01",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Interface means between a network switch and a CTI server means and apparatus for providing a service to a customer including such an interface means",
	"summary": "",
	"abstract": "An interface means between a network switch and a CTI server means is adapted to communicate between a service switching function device having a service switching functionality within said network switch and said CTI server means. Such an interface means is as well part of an apparatus for providing a service to at least one customer. This apparatus includes a network switch, of which a service switching function device is coupled via an interface means of the present invention to a CTI server means, which is further coupled via an application programming interface to executable means for executing the service.",
	"url": null,
	"owner": "Alcatel",
	"publication_number": "07110521",
	"publication_date": "2006-09-19",
	"application_number": "10895316",
	"application_date": "2004-07-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for providing internet services",
	"summary": "",
	"abstract": "A service integration platform system for providing Internet services includes: an interface configured to receive a service request message that is initiated by a user of an application provided by an Independent Software Vendor (ISV), the service request message being implemented according to an Application Programming Interface (API) type and including a plurality of platform-level parameters that conform to the API type. The system further includes one or more processors coupled to the interface, configured to: locate a set of authentication checks that are appropriate for the API type, based at least in part on the plurality of platform-level parameters included in the service request message and a mapping of predefined combinations of platform-level parameters and corresponding sets of authentication checks; perform authentication of the service request according to the set of authentication checks; and route the service request to a service address of the Internet Service Provider (ISP) in the event that the service request is authenticated.",
	"url": null,
	"owner": "Alibaba Group Holding Limited",
	"publication_number": "08453209",
	"publication_date": "2013-05-28",
	"application_number": "12459005",
	"application_date": "2009-06-25",
	"tags": null,
	"slug": "method-and-system-for-providing-internet-services",
	"match_type": "abstract"
},
{
	"name": "Self-service control environment",
	"summary": "",
	"abstract": "Aspects of a target environment, such as the creation, deletion, and management of various resources, are managed using a set of self-service Web services of a separate control environment. A user can submit a Web services call into an externally-facing application programming interface (API) or other such externally-facing interface of the control environment. The API receiving the call, as well as information extracted from the call, can be used to determine appropriate actions to be performed in the target environment. A workflow can be instantiated that includes tasks used to perform the action in the target environment. Such an approach allows aspects of an environment to be managed through Web service calls to the control environment. Native access to resources in the target environment is provided using at least one externally-facing interface of the target environment, without accessing the control plane.",
	"url": null,
	"owner": "Amazon Technologies, Inc.",
	"publication_number": "08307003",
	"publication_date": "2012-11-06",
	"application_number": "12418475",
	"application_date": "2009-04-03",
	"tags": null,
	"slug": "selfservice-control-environment",
	"match_type": "abstract"
},
{
	"name": "Energy distribution and marketing backoffice system and method",
	"summary": "",
	"abstract": "A retail energy provider system comprising a market transaction manager, business rules and requirements processor, usage rater, customer analysis and quality control auditor, customer billing processor and collection manager, customer payment processor, third party sales and marketing application programming interface, customer acquisition and residual income interface, having a wholesale forecaster, interactive voice response system, intranet web services, internet web services and network based external customer service and executive management systems and financial services functions, all said functions and systems interacting with a robust SQL database engine for which the novel database schema is taught herein.",
	"url": null,
	"owner": "Ambit Holdings, L.L.C.",
	"publication_number": "08442917",
	"publication_date": "2013-05-14",
	"application_number": "11899197",
	"application_date": "2007-09-04",
	"tags": null,
	"slug": "energy-distribution-and-marketing-backoffice-system-and-method",
	"match_type": "abstract"
},
{
	"name": "System, method and computer program product for processing payments",
	"summary": "",
	"abstract": "A payment processor for providing a payment service includes a transaction processor to process a transaction request. An application programming interface links a merchant to the transaction processor based on an identifier. A merchant center, located between a gateway and a point of sale device of the merchant, queries a database for information associated with a buyer and the merchant based on information received from the point of sale device, to generate the transaction request based from merchant transaction data received from the point of sale device and the information associated with the buyer and the merchant received from the database, and to communicate the transaction request to the transaction processor. The transaction processor also communicates information associated with the transaction request with the merchant based on the identifier.",
	"url": null,
	"owner": "American Express Travel Related Services Company, Inc.",
	"publication_number": "08204825",
	"publication_date": "2012-06-19",
	"application_number": "11865789",
	"application_date": "2007-10-02",
	"tags": null,
	"slug": "system-method-and-computer-program-product-for-processing-payments",
	"match_type": "abstract"
},
{
	"name": "Graphical display of management data obtained from an extensible management server",
	"summary": "",
	"abstract": "An extensible management server (XMS) is disclosed that includes a management interface, a scripting engine, and a data store having management scripts and a management class library stored therein. The management interface provides functionality for receiving and responding to commands received from a management application. The management scripts include functionality for retrieving and setting management data on managed computers. The management scripts are configured to utilize classes contained in the management class library to perform the actual interaction with the managed server computers for retrieving or setting management data. The management scripts may also be configured to utilize a graphical display application programming interface for generating graphical display instructions for use by the management application in graphically displaying the management data.",
	"url": null,
	"owner": "American Megatrends, Inc.",
	"publication_number": "08356309",
	"publication_date": "2013-01-15",
	"application_number": "12559750",
	"application_date": "2009-09-15",
	"tags": null,
	"slug": "graphical-display-of-management-data-obtained-from-an-extensible-management-server",
	"match_type": "abstract"
},
{
	"name": "Native objects accessible by platform neutral API",
	"summary": "",
	"abstract": "An object is developed using an operating system neutral application programming interface (API). The object is complied for a designated operating system that includes native objects and supports an API for accessing native objects of the operating system. The compiled object includes logic code, a native object interop for accessing the logic code using the API for accessing native objects of the operating system, and a platform-neutral interop for accessing the logic code using the operating system neutral API.",
	"url": null,
	"owner": "AOL Inc.",
	"publication_number": "08060856",
	"publication_date": "2011-11-15",
	"application_number": "11281936",
	"application_date": "2005-11-18",
	"tags": null,
	"slug": "native-objects-accessible-by-platform-neutral-api",
	"match_type": "abstract"
},
{
	"name": "Extensible, replaceable network component system",
	"summary": "",
	"abstract": "An extensible and replaceable network-oriented component system provides a platform for developing networking navigation components that operate on a variety of hardware and software computer systems. These navigation components include key integrating components along with components configured to deliver conventional services directed to computer networks, such as Gopher-specific and Web-specific components. Communication among these components is achieved through novel application programming interfaces (APIs) to facilitate integration with an underlying software component architecture. Such a high-modular cooperating layered-arrangement between the network component system and the component architecture allows any existing component to be replaced, and allows new components to be added, without affecting operation of the network component system.",
	"url": null,
	"owner": "Apple Computer, Inc.",
	"publication_number": "RE039486",
	"publication_date": "2007-02-06",
	"application_number": "10408789",
	"application_date": "2003-04-03",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Creating an object in an object-oriented programming platform",
	"summary": "",
	"abstract": "An application programming interface is provided in an object-oriented programming platform for developing applications. A method comprises, in response to a first message received at a first object that contains one or more properties, creating a second object that responds to a second message sent thereto responsive to sending of the first message to the first object and returning the second object. By returning, for example, key-value collection proxies by specific key-value coding methods a read-only or a read-write access may be allowed to a collection of a container object's related objects. A specific implementation of one object's class may change over time without requiring changes in another object's implementation.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08006250",
	"publication_date": "2011-08-23",
	"application_number": "10873667",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "creating-an-object-in-an-objectoriented-programming-platform",
	"match_type": "abstract"
},
{
	"name": "Extended database search",
	"summary": "",
	"abstract": "Methods, program products, and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing structured data (e.g., data of a relational database) and unstructured data (e.g., data stored in a text or binary file), including creating, managing, modifying, and searching the structured data and unstructured data. The integrated environment can include an integrated user interface, a set of commands and application programming interface (API), and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08442982",
	"publication_date": "2013-05-14",
	"application_number": "12941026",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "extended-database-search",
	"match_type": "abstract"
},
{
	"name": "Integrated repository of structured and unstructured data",
	"summary": "",
	"abstract": "Methods, program products, and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing, structured data (e.g., data of a relational database) and unstructured data (e.g., data stored in a text or binary file), including creating, managing, modifying, and searching the structured data and unstructured data. The integrated environment can include an integrated user interface, a set of commands and application programming interface (API), and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08396894",
	"publication_date": "2013-03-12",
	"application_number": "12940986",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "integrated-repository-of-structured-and-unstructured-data",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for intercommunications amongst device drivers",
	"summary": "",
	"abstract": "Techniques for intercommunication amongst device drivers are described herein. In one embodiment, an application programming interface (API) is provided by a kernel of an operating system (OS) running within a data processing system. The API is accessible by device drivers associated with multiple devices installed in the system. In response to a request from a first instance of a driver via the API, information indicating whether another instance of the same driver is currently started is returned via the API. Other methods and apparatuses are also described.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07979868",
	"publication_date": "2011-07-12",
	"application_number": "11620691",
	"application_date": "2007-01-07",
	"tags": null,
	"slug": "method-and-apparatus-for-intercommunications-amongst-device-drivers",
	"match_type": "abstract"
},
{
	"name": "Observing properties associated with an object in an object-oriented programming platform",
	"summary": "",
	"abstract": "An application programming interface is provided in an object-oriented programming platform for developing applications. A method comprises registering a first object with a second object to observe one or more properties associated with the second object, the second object having a set of methods associated therewith and replacing a first implementation of a method in the set of methods associated with the second object with a second implementation of the method that automatically sends a notification to the first object. The observable objects need not explicitly invoke the observer notifications, avoiding writing of a large amount of code. These observer notifications need only be sent for objects that are actually being observed but are related objects, substantially reducing the performance overhead of needless invocations of the observer notifications without limiting binding between objects.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07954110",
	"publication_date": "2011-05-31",
	"application_number": "10873697",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "observing-properties-associated-with-an-object-in-an-objectoriented-programming-platform",
	"match_type": "abstract"
},
{
	"name": "Serializing command streams for graphics processors",
	"summary": "",
	"abstract": "A method and an apparatus for determining a dependency relationship between graphics commands based on availability of graphics hardware resources to perform graphics processing operations according to the dependency relationship are described. The graphics commands may be received from graphics APIs (application programming interfaces) for rendering a graphics object. A graphics driver may transmit a portion or all of the received graphics commands to a graphics processing unit (GPU) or a media processor based on the determined dependency relationship between the graphics commands.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08115773",
	"publication_date": "2012-02-14",
	"application_number": "11811416",
	"application_date": "2007-06-07",
	"tags": null,
	"slug": "serializing-command-streams-for-graphics-processors",
	"match_type": "abstract"
},
{
	"name": "Window server event taps",
	"summary": "",
	"abstract": "Methods, devices and an associated application programming interface are described that permits a user to register event tap routines (u201cETRsu201d) with an application such as, for example, a window server application. Event tap routines permit events such as human interface device events to be processed at multiple points and in a manner not provided during normal window server operations. Event tap routines may effect passive or active event responses. Passive ETRs may merely record the occurrence of an event or the time between successive events without modifying or altering the event's processing sequence within a window server. Active ETRs, on the other hand, effect some programmatic response to an event. For example, active ETRs may modify the state of an event, delete the event, create one or more additional events or cause the event to be processed u201cout of sequenceu201d by the window server application.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07818755",
	"publication_date": "2010-10-19",
	"application_number": "11020875",
	"application_date": "2004-12-22",
	"tags": null,
	"slug": "window-server-event-taps",
	"match_type": "abstract"
},
{
	"name": "Window server event taps",
	"summary": "",
	"abstract": "Methods, devices and an associated application programming interface are described that permits a user to register event tap routines (u201cETRsu201d) with an application such as, for example, a window server application. Event tap routines permit events such as human interface device events to be processed at multiple points and in a manner not provided during normal window server operations. Event tap routines may effect passive or active event responses. Passive ETRs may merely record the occurrence of an event or the time between successive events without modifying or altering the event's processing sequence within a window server. Active ETRs, on the other hand, effect some programmatic response to an event. For example, active ETRs may modify the state of an event, delete the event, create one or more additional events or cause the event to be processed u201cout of sequenceu201d by the window server application.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08438580",
	"publication_date": "2013-05-07",
	"application_number": "12889083",
	"application_date": "2010-09-23",
	"tags": null,
	"slug": "window-server-event-taps",
	"match_type": "abstract"
},
{
	"name": "Electronic equipment setting information creating method and apparatus, and security policy creating method and associated apparatus",
	"summary": "",
	"abstract": "A method and an associated apparatus for automatically creating security policies written in specific languages of specific devices based on a security policy written in natural language. A product level policy creating apparatus comprises language conversion means and a plurality of specific device script creating means. The language conversion means converts a product level policy of a first level into an interface language. The specific device script creating means creates product level policies of a second level for the corresponding specific devices. Defining this interface language is synonymous with defining an API (Application Programming Interface). Since the API is defined thus, plug-in modules for functioning as the specific device script creating means can be easily created based on the API.",
	"url": null,
	"owner": "Asgent, Inc.",
	"publication_number": "07337105",
	"publication_date": "2008-02-26",
	"application_number": "10251843",
	"application_date": "2002-09-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Systems and methods for playing, browsing and interacting with MPEG-4 coded audio-visual objects",
	"summary": "",
	"abstract": "A number of novel configurations for MPEG-4 playback, browsing and user interaction are disclosed. MPEG-4 playback systems are not simple extensions of MPEG-2 playback systems, but, due to object based nature of MPEG-4, present new opportunities and challenges in synchronized management of independent coded objects as well as scene composition and presentation. Therefore, these configurations allow significantly new and enhanced multimedia services and systems. In addition, MPEG-4 aims for an advanced functionality, called Adaptive Audio Visual Session (AAVS) or MPEG-J. Adaptive Audio Visual Session (AAVS) (i.e., MPEG-AAVS, MPEG-Java or MPEG-J) requires, in addition to the definition of configurations, a definition of an application programming interface (API) and its organization into Java packages. Also disclosed are concepts leading to definition of such a framework.",
	"url": null,
	"owner": "AT&T Corp.",
	"publication_number": "07281200",
	"publication_date": "2007-10-09",
	"application_number": "10662831",
	"application_date": "2003-09-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems for converged service creation and execution environment applications",
	"summary": "",
	"abstract": "Embodiments of the present invention relate to systems and methods for a converged service creation and execution application. In an embodiment, an application is coupled to an application server. One or more open application programming interfaces are coupled to the application server, and service session management logic is also coupled to the application server.",
	"url": null,
	"owner": "AT&T Delaware Intellectual Property, Inc.",
	"publication_number": "07458084",
	"publication_date": "2008-11-25",
	"application_number": "11202988",
	"application_date": "2005-08-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods, systems, and computer program products for modifying bandwidth and/or quality of service in a core network",
	"summary": "",
	"abstract": "Bandwidth and/or Quality of Service (QoS) may be modified in a Regional/Access Network (RAN) that includes a core network, the RAN facilitating differentiated end-to-end data transport between an enterprise, a Network Service Provider (NSP), and/or an Application Service Provider (ASP) and a customer Premises Network (CPN). Application Programming Interface (API) calls are used at the enterprise, NSP, and/or the ASP to communicate with the RAN to query a resource allocation in the core network that is assigned to the enterprise, NSP, and/or the ASP. API calls are also used at the enterprise, NSP, and/or the ASP to communicate with the RAN to modify the bandwidth and/or the QoS of the resource allocation in the core network that is assigned to the enterprise, NSP, and/or the ASP.",
	"url": null,
	"owner": "AT&T Intellectual Property I, L.P.",
	"publication_number": "07545788",
	"publication_date": "2009-06-09",
	"application_number": "10922605",
	"application_date": "2004-08-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for measuring the end-to-end performance and capacity of complex network service",
	"summary": "",
	"abstract": "The present invention includes a method of measuring performance and capacity of a network includes monitoring network activity using an application programming interfaces monitoring system with a web services definition language file and at least one probe. The web services definition language file provides instructions to a probe control system in the application programming interfaces monitoring system and the probe control system providing regular expressions to the at least one probe. Then, performance data is collected using the at least one probe. The performance data includes a date stamp and a collection of performance information. Next, using the at least one probe, performance data measurements are transmitted between the network and the application programming interfaces monitoring system. The application programming interfaces monitoring system stores the performance data measurements in a database of performance data monitored and analyzes the performance data measurements to determine performance and capacity of the network. After that, the application programming interfaces monitoring system reports information on performance and capacity of the network to a network operations center dashboard.",
	"url": null,
	"owner": "AT&T Intellectual Property I, LP",
	"publication_number": "08438269",
	"publication_date": "2013-05-07",
	"application_number": "12209267",
	"application_date": "2008-09-12",
	"tags": null,
	"slug": "method-and-apparatus-for-measuring-the-endtoend-performance-and-capacity-of-complex-network-service",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for playing, browsing and interacting with MPEG-4 coded audio-visual objects",
	"summary": "",
	"abstract": "A number of novel configurations for MPEG-4 playback, browsing and user interaction are disclosed. MPEG-4 playback systems are not simple extensions of MPEG-2 playback systems, but, due to object based nature of MPEG-4, present new opportunities and challenges in synchronized management of independent coded objects as well as scene composition and presentation. Therefore, these configurations allow significantly new and enhanced multimedia services and systems. In addition, MPEG-4 aims for an advanced functionality, called Adaptive Audio Visual Session (AAVS) or MPEG-J. Adaptive Audio Visual Session (AAVS) (i.e., MPEG-AAVS, MPEG-Java or MPEG-J) requires, in addition to the definition of configurations, a definition of an application programming interface (API) and its organization into Java packages. Also disclosed are concepts leading to definition of such a framework.",
	"url": null,
	"owner": "AT&T Intellectual Property II, L.P.",
	"publication_number": "08276056",
	"publication_date": "2012-09-25",
	"application_number": "11849399",
	"application_date": "2007-09-04",
	"tags": null,
	"slug": "systems-and-methods-for-playing-browsing-and-interacting-with-mpeg4-coded-audiovisual-objects",
	"match_type": "abstract"
},
{
	"name": "System and method for efficient digital video composition",
	"summary": "",
	"abstract": "An efficient method of compositing planes onto a target surface using a computing device with graphics processing capability is disclosed. The method includes partitioning the target surface, on which planes are composited, into partitions. Each one of the partitions contains connected pixels to be formed by compositing an identical subset of the planes to be composited. Each partition is associated with a corresponding subset of the planes. Each partition and its corresponding set of associated planes are then provided to a graphics processor for composition, using exemplary software components including an application programming interface, a library and device driver software. An image is formed on the target surface by compositing each partition. Using the disclosed method, a single pass through stages of the graphics pipeline for the graphics processor is sufficient to composite multiple planes to form an image on the target surface.",
	"url": null,
	"owner": "ATI Technologies ULC",
	"publication_number": "08159505",
	"publication_date": "2012-04-17",
	"application_number": "12243596",
	"application_date": "2008-10-01",
	"tags": null,
	"slug": "system-and-method-for-efficient-digital-video-composition",
	"match_type": "abstract"
},
{
	"name": "Engine agnostic interface for communication between game engines and simulations systems",
	"summary": "",
	"abstract": "A software architecture is provided that has an agnostic interface mechanism coupled between a simulator and a game engine. The agnostic interface mechanism has an extension interface to translate simulator specific data objects to/from interface objects, a reflector interface to translate interface data objects to/from game specific objects, a launcher interface to translate interface control objects for controlling the game engine into game specific control objects, and a core control coupled between the extension interface and the reflector and launcher interfaces for controlling the communication of objects between the simulator and the game engine. The core control through the reflector and launcher interfaces provides game specific objects to the game engine through direct application programming interface (API) calls.",
	"url": null,
	"owner": "Atlantis Cyberspace, Inc.",
	"publication_number": "08122459",
	"publication_date": "2012-02-21",
	"application_number": "12239623",
	"application_date": "2008-09-26",
	"tags": null,
	"slug": "engine-agnostic-interface-for-communication-between-game-engines-and-simulations-systems",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for providing drawing collaboration on a network",
	"summary": "",
	"abstract": "A method, apparatus, and article of manufacture for an application programming interface (API) on a client computer that enables access to architectural project information stored across the internet on a server site. The server site maintains an organization for the architectural information in the form of containers for storing, managing, and sharing files for one or more architectural projects, wherein the files comprise drawings, documents, communications, and tasks related to the architectural projects. The API of the invention permits third parties to create custom clients or permit direct access to a site hosted on a server. Such an API operates with both thick (.exe) and thin (.html) clients. The API establishes/obtains a connection between the client and the server to enable such access. For example, if the user desires to store a file on the server site, the user selects the appropriate server site/folder from within an application program executing the API. The API may then require the user to logon and confirms that the user has appropriate access permissions to work with the server site/folder. Once confirmed, the connection session is established. During the session, the user may access and download files as desired while maintaining the storage structure of architectural information stored on the server site.",
	"url": null,
	"owner": "Autodesk, Inc.",
	"publication_number": "07149959",
	"publication_date": "2006-12-12",
	"application_number": "09690326",
	"application_date": "2000-10-16",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Mobile device locator adapter system for location based services",
	"summary": "",
	"abstract": "One or more embodiments of the invention provide a method, apparatus, and article of manufacture for locating a mobile device. An application programming interface (API), executed by a computer, provides a plurality of simplified procedures that allow an application program executed by the computer to locate the mobile device. The application program invokes the simplified procedures of the API. The invoked procedures obtain a location of the mobile device given an identification of the mobile device and a description of a spatial reference system associated with the location. Additionally, the invoked procedures interact with specifics for a mobile positioning server of a carrier of the mobile device and with different methods of identifying the device as required by the carrier.",
	"url": null,
	"owner": "Autodesk, Inc.",
	"publication_number": "06963748",
	"publication_date": "2005-11-08",
	"application_number": "10037805",
	"application_date": "2001-12-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for preventing eavesdropping",
	"summary": "",
	"abstract": "A method and apparatus prevent eavesdropping via a computer by detecting and alerting if more than one authorized driver is controlling a interface circuit that is providing audio or video input information. Further, prevention is performed by detecting and alerting if more than one authorized application programming interface is receiving audio or video input information from an authorized driver. Also, prevention is performed by detecting and alerting if more than one authorized software application is receiving audio or video input information from an authorized driver. In addition, prevention is performed by detecting and alerting upon first receipt of audio or visual information by an authorized software application via an authorized application programming interface and authorized driver.",
	"url": null,
	"owner": "Avaya Inc.",
	"publication_number": "08286233",
	"publication_date": "2012-10-09",
	"application_number": "11084583",
	"application_date": "2005-03-19",
	"tags": null,
	"slug": "apparatus-and-method-for-preventing-eavesdropping",
	"match_type": "abstract"
},
{
	"name": "Computerized method and system for creating a new brokerage account",
	"summary": "",
	"abstract": "A computerized system for creating a new brokerage account is disclosed. A new account wizard software component guides a user through a series of data collection procedures using a rules based engine to facilitate data collection processing according to a plurality of data collection rules that are stored in a database. A workflow management software component manages data transfers and delegates task assignments during creation of the new brokerage account. There is also an application programming interface layer software component for interfacing data transfers between the workflow management software component and external software components.",
	"url": null,
	"owner": "Bank of America Corporation",
	"publication_number": "07933819",
	"publication_date": "2011-04-26",
	"application_number": "10905099",
	"application_date": "2004-12-15",
	"tags": null,
	"slug": "computerized-method-and-system-for-creating-a-new-brokerage-account",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for converged service creation and execution environment applications",
	"summary": "",
	"abstract": "Embodiments of the present invention relate to systems and methods for a converged service creation and execution application. In an embodiment, an application is coupled to an application server. One or more open application programming interfaces are coupled to the application server, and service session management logic is also coupled to the application server.",
	"url": null,
	"owner": "BellSouth Intellectual Property Corp.",
	"publication_number": "06981263",
	"publication_date": "2005-12-27",
	"application_number": "09893437",
	"application_date": "2001-06-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Relational database drill-down convention and reporting tool",
	"summary": "",
	"abstract": "A system generates linked sets of drill-down-enabled reports of increasing levels of detail from one or more databases. Linking relationships between reports are defined using the query language of the databases. Result sets are obtained that includes (1) the sought-after data, and (2) metadata that identifies drill-down reports to be generated if related report elements are selected. When the query is executed, the system passes the sought-after data to a reporting application programming interface, which generates a report (e.g., a pie chart, 3-D bar chart, cross-tabbed table). If an end-user selects one of the report elements (e.g., a bar on the chart), the system maps the reported event to the associated data of the result set. If the associated data has corresponding meta-data containing a drill-down directive, the system then generates the report identified by the drill-down directive.",
	"url": null,
	"owner": "BIF Technologies Corp.",
	"publication_number": "06993533",
	"publication_date": "2006-01-31",
	"application_number": "10063145",
	"application_date": "2002-03-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems for open source collaboration in an application service provider environment",
	"summary": "",
	"abstract": "A system and method for integrating a plurality of web-based applications with a web-based file management system. The web-based application may provide a service to the users of the web-based file management system, such that the web-based application can interact with the files of said users. The integration of the service of the web-based application with the web-based file management system is achieved through a simple web interface to configure the service, without the developer of the web-based application having to change the application programming interface (API) of the application. The user of the web-based file management system may add services of a plurality of available web-based applications and use these services with one or more files that are stored on the web-based file management system.",
	"url": null,
	"owner": "Box, Inc.",
	"publication_number": "08140513",
	"publication_date": "2012-03-20",
	"application_number": "13030090",
	"application_date": "2011-02-17",
	"tags": null,
	"slug": "methods-and-systems-for-open-source-collaboration-in-an-application-service-provider-environment",
	"match_type": "abstract"
},
{
	"name": "Communications network",
	"summary": "",
	"abstract": "A registration server in a network implementing an API (application programming interface) authenticates services and provides discovery of network resources, prior to registering services with selected network resources. Multiple instances of services and/or multiple service nodes are registered in a single service agreement.",
	"url": null,
	"owner": "British Telecommunications public limited company",
	"publication_number": "07660903",
	"publication_date": "2010-02-09",
	"application_number": "10168616",
	"application_date": "2001-01-12",
	"tags": null,
	"slug": "communications-network",
	"match_type": "abstract"
},
{
	"name": "Voice over internet call center integration",
	"summary": "",
	"abstract": "A telephony server, comprising an application program executing under an operating system, communicating directly with telephony hardware to implement telephony system control, having an application programming interface including a call to an external program also executing under the operating system, the application program supporting a plurality of instances of the external programs simultaneously, each external program implementing call handling logic for at least one voice communications channel. The application program may communicate with a Web server, wherein said server proactively communicates with the user in dependence on an automated analysis of a status of a user's shopping cart, representing items of interest having an unconcluded transaction status, requesting establishment of an interactive voice communication session.",
	"url": null,
	"owner": "Buffalo International, Inc.",
	"publication_number": "07269160",
	"publication_date": "2007-09-11",
	"application_number": "09579370",
	"application_date": "2000-05-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Voice over internet call center integration",
	"summary": "",
	"abstract": "An internet telephony system (ITS) comprising a browser display having a hyperlink, communicating with a server, retrieving a user's preferences, and initiating a voice communication with the user, through a communications channel defined by the user preferences. An ITS comprising a client system having an Internet browser, and a server hosting a Web site, wherein a message is transmitted from the server to the client system based on the user's status with respect to Web site, the user seeking to establish a voice communication session. A telephony server, comprising an application program communicating directly with telephony hardware, and an application programming interface, wherein the application program includes a call function to an external program. An ITS, comprising a browser display having a hyperlink, the hyperlink communicating with a server, retrieving a user-related data, and initiating a voice communication with the user, wherein the user is charged for the communication.",
	"url": null,
	"owner": "Buffalo International, Inc.",
	"publication_number": "08045490",
	"publication_date": "2011-10-25",
	"application_number": "11853800",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "voice-over-internet-call-center-integration",
	"match_type": "abstract"
},
{
	"name": "Image forming apparatus, method of controlling image forming apparatus, and memory medium for storing computer program for executing method, with function program providing API",
	"summary": "",
	"abstract": "An image forming apparatus in which a control program can be loaded, the control program providing a service for image forming processing, said apparatus comprising: a memory unit configured to store (i) an operating system, (ii) an interpreter which provides an execution environment to execute the control program, runs on the operating system, and interprets the control program, (iii) a driver program for controlling image forming processing, and (iv) a function program, wherein the driver program operates a hardware resource unit which includes at least one of a printing unit and an image pickup unit, and wherein the function program (a) serves as an API (Application Programming Interface), (b) is defined between the control program and the driver program, and (c) is used by the control program.",
	"url": null,
	"owner": "Canon Kabushiki Kaisha",
	"publication_number": "07973963",
	"publication_date": "2011-07-05",
	"application_number": "12856752",
	"application_date": "2010-08-16",
	"tags": null,
	"slug": "image-forming-apparatus-method-of-controlling-image-forming-apparatus-and-memory-medium-for-storing-computer-program-for-executing-method-with-function-program-providing-api",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for processing messages",
	"summary": "",
	"abstract": "A memory stores a file attached to a message generated by using a structure language. Data containing an element contained in the message to which information for obtaining type information and a file referred by the element are obtained from the memory is added is constructed. This data has a construction corresponding to an application programming interface for the structured language.",
	"url": null,
	"owner": "Canon Kabushiki Kaisha",
	"publication_number": "08024375",
	"publication_date": "2011-09-20",
	"application_number": "11744361",
	"application_date": "2007-05-04",
	"tags": null,
	"slug": "method-and-apparatus-for-processing-messages",
	"match_type": "abstract"
},
{
	"name": "Directory-enabled network elements",
	"summary": "",
	"abstract": "A directory enabled network element, which in one embodiment, is a network device that has an element that enables querying, accessing, and updating directory information that is managed by a directory service of a network. An application programming interface (API) is configured to receive directory services requests from application programs (APs) and provide the directory services requests to the directory enabling element. A locator service is accessible using the API and configured to locate servers that provide the directory services. A bind service in the directory enabling element is coupled to a security protocol. An event service is configured to receive registration of an event and an associated action from an AP, notify the AP when the event occurs, and execute the associated responsive action. The network device can thereby automatically authenticate itself to a directory service.",
	"url": null,
	"owner": "Cisco Technology, Inc.",
	"publication_number": "07376827",
	"publication_date": "2008-05-20",
	"application_number": "09435015",
	"application_date": "1999-11-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus of a location server for hierarchical WLAN systems",
	"summary": "",
	"abstract": "Methods, apparatuses, and systems directed to processing location and network data in a wireless network. According to one implementation of the present invention, a location server functions both as a middleware data collection engine and a calculation engine in a hierarchical WLAN system. In one implementation, the location server collects network data associated with mobile nodes. As described in further detail below, mobile nodes may include one or more of wireless mobile stations (e.g., wireless laptops, dual-mode phones, personal digital assistants, etc.), radio frequency identification (RFID) tags, rogue wireless access points and rogue wireless clients. In one implementation, the location server may process at least some of the network data to determine information associated with the mobile nodes. For example, the location server may compute the location of a given mobile node, which is accessible to other applications using one or more defined application programming interfaces (APIs). In one implementation, the location server may track the node history of a given mobile node. In one implementation, the location server may correlate processed network information to one or more locations or regions in the wireless network environment. For example, in one implementation, the location server may compute the load (i.e., amount of traffic) in a given region. The load may be used to further compute traffic patterns in the region. Such computations may be based on types of mobile nodes (e.g., wireless clients) and/or based on time periods (e.g., 12 pm-5 pm). As described in more detail below, such information may facilitate management of a wireless network. For example, the processed information may indicate locations that may require deployment of more resources (e.g., additional wireless access points).",
	"url": null,
	"owner": "Cisco Technology, Inc.",
	"publication_number": "07590418",
	"publication_date": "2009-09-15",
	"application_number": "11336050",
	"application_date": "2006-01-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus providing multi-service connections within a data communications device",
	"summary": "",
	"abstract": "A method and apparatus provide a data communication device that can process a number of streams of data according to a plurality of services. A host device such as a network access server which may include a router and a number of carrier cards hosts a number of modules. The host and modules are equipped with a messaging application programming interface (API). The API allows the host to discover what services are offered by the modules, and allows the host and modules to form an optimal interface configuration that most effectively handles data connections of different service types, such as voice, data, facsimile, video and so forth. In operation, each module is presented with a stream of data containing multiplexed calls. Each call contains data that is best operated on by one of the particular services. The messaging API allows the host to setup and control the module and sessions of the services offered by the modules depending upon the data types of the connections. Since the modules each offer a variety of services, a stream containing data one or more connections such as voice data, video data, modem data, facsimile data and so forth can be processed by a single module under control of the host.",
	"url": null,
	"owner": "Cisco Technology, Inc.",
	"publication_number": "07310338",
	"publication_date": "2007-12-18",
	"application_number": "10713388",
	"application_date": "2003-11-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Network tunneling method and apparatus",
	"summary": "",
	"abstract": "Method and apparatus for tunneling any existing data-, control-, or routing-related protocol through a generic Internet protocol (IP) transport are described. The method includes providing a generic messaging structure that includes at least a transport protocol, a message buffer, a source-address field and one or more data fields for transparent routing of a user protocol over the IP transport and also providing an application program interface to the generic messaging structure, the interface including a mechanism for a user to choose a desired transport and associated protocol for transparently routing the user protocol over the transport in accordance with the chosen transport protocol within the one or more data fields. Alternatively or additionally, the method includes creating a base class library including plural defined source and header files and further providing a mechanism for deriving a transaction-based protocol-specific class that is compatible with the base class library. The apparatus is an application programming interface (API), preferably coded in C/C++, for transparently routing data between sockets in such an IP transport. The API includes a message buffer data structure defining a protocol-generic parent class, message, source-address and data fields; a message creation mechanism for creating a message and adding it to the message buffer data structure; and a protocol creation mechanism for deriving a protocol-specific child class that renders new protocol-specific sub-fields of the protocol field of the message buffer data structure.",
	"url": null,
	"owner": "Cisco Technology, Inc.",
	"publication_number": "07395343",
	"publication_date": "2008-07-01",
	"application_number": "10083891",
	"application_date": "2002-02-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System for scheduling and monitoring computer processes",
	"summary": "",
	"abstract": "A job scheduling device providing a consistent set of application programming interfaces (APIs) compiled and linked into an individual or suite of programs to provide scheduling services on a single computer or across multiple computing platforms, includes a GUI API for retrieving and validated job parameters, a job scheduling API for allocating jobs based on the job parameters, and an enterprise scheduling agent hosted on one or more nodes of the computer platforms. An enterprise communication agent sends messages containing jobs from a computer executing a program utilizing the job scheduling device to the enterprise scheduling agent on a selected node where the job is to execute. Then, the enterprise scheduling agent retrieves job parameters and launches the job on the selected node. The enterprise scheduling agent maintains a local job repository containing job information for each job run on its corresponding node and sends messages to a job data management API to maintain a central job repository containing information on jobs executed on all nodes.",
	"url": null,
	"owner": "Computer Associates Think, Inc.",
	"publication_number": "07386586",
	"publication_date": "2008-06-10",
	"application_number": "09219071",
	"application_date": "1998-12-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for synchronizing copies of data in a computer system",
	"summary": "",
	"abstract": "An improved synchronization system and method for copies of data in a computer system. The computer system comprises a cluster, wherein each computer in the cluster may store a local copy of a data set along with a validity flag for the local copy. The computer system further comprises a coupling system which is connected to each of the computers in the cluster through a coupling system interface program, wherein the coupling system is configured to coordinate the data sharing and workload of the cluster. The computer system also comprises an external data storage shared by the computers in the cluster. One of the computers may read a first copy of the data set from a primary data set on the external data storage. The computer may then store the first copy locally and set a first validity flag to indicate that the first copy is valid. Another computer, server, or application program may make a second copy of the primary data set and set a second validity flag to valid. If the first copy is modified, then the second validity flag is set to invalid. The second copy may then be replaced with the modified copy, and the second validity flag may be set to valid again. A coupling system interface program may comprise an application programming interface for data synchronization, wherein the application programming interface is accessible by a plurality of application programs.",
	"url": null,
	"owner": "Computer Sciences Corporation",
	"publication_number": "06952741",
	"publication_date": "2005-10-04",
	"application_number": "09345698",
	"application_date": "1999-06-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for synchronizing copies of data in a computer system",
	"summary": "",
	"abstract": "An improved synchronization system and method for copies of data in a computer system. The computer system comprises a cluster, wherein each computer in the cluster may store a local copy of a data set along with a validity flag for the local copy. The computer system further comprises a coupling system which is connected to each of the computers in the cluster through a coupling system interface program, wherein the coupling system is configured to coordinate the data sharing and workload of the cluster. The computer system also comprises an external data storage shared by the computers in the cluster. One of the computers may read a first copy of the data set from a primary data set on the external data storage. The computer may then store the first copy locally and set a first validity flag to indicate that the first copy is valid. Another computer, server, or application program may make a second copy of the primary data set and set a second validity flag to valid. If the first copy is modified, then the second validity flag is set to invalid. The second copy may then be replaced with the modified copy, and the second validity flag may be set to valid again. A coupling system interface program may comprise an application programming interface for data synchronization, wherein the application programming interface is accessible by a plurality of application programs.",
	"url": null,
	"owner": "Computer Sciences Corporation",
	"publication_number": "07130924",
	"publication_date": "2006-10-31",
	"application_number": "11243461",
	"application_date": "2005-10-04",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Architecture for balancing workload",
	"summary": "",
	"abstract": "A framework to transition and re-partition information for event processing and downstream processing can be used in a real time system comprising components such as a consumer server, a file control database, an event manager, an event store, and a configurable output stream. The event manager may be a process which can be enhanced through the use of tags which are inserted to provide information for various downstream systems. The configurable output stream can be defined through an application programming interface which is configured to receive a filter to be applied to the output.",
	"url": null,
	"owner": "Convergys Information Management Group, Inc.",
	"publication_number": "07668093",
	"publication_date": "2010-02-23",
	"application_number": "11197597",
	"application_date": "2005-08-04",
	"tags": null,
	"slug": "architecture-for-balancing-workload",
	"match_type": "abstract"
},
{
	"name": "System and method for tracking an object in a video and linking information thereto",
	"summary": "",
	"abstract": "An image processing system for use in development and playback of interactive video. In a development mode of operation, pixel or video objects are selected in a frame by way of a development graphical user interface. The system automatically tracks the selected pixel objects in the preceding and succeeding video frames by determining range limits for various color variables of the selected pixel object to compensate for the effects in lighting changes and decompression effects. The system automatically locates pixel objects within the calculated range limits in the preceding and succeeding video frames and generates a pixel object file which identifies the coordinates of the selected pixel object in each frame. The pixel object file is linked to a data object file which links the selected pixel objects to data objects. The pixel object file and data object file, collectively u201clinked video files,u201d are created during a development mode of operation. During a playback mode of operation, the linked video files are imported to a video hosting platform which includes a video playback application and a common media player application programming interface (API) for playback of the video content. The video playback application supports processing of the linked video files to enable pixel objects to be selected by a pointing device and linked to data objects by way of a client side graphical user interface.",
	"url": null,
	"owner": "Creatier Interactive, LLC",
	"publication_number": "07804506",
	"publication_date": "2010-09-28",
	"application_number": "10786777",
	"application_date": "2004-02-25",
	"tags": null,
	"slug": "system-and-method-for-tracking-an-object-in-a-video-and-linking-information-thereto",
	"match_type": "abstract"
},
{
	"name": "Method for facilitating microcontroller programming",
	"summary": "",
	"abstract": "A method to facilitate circuit design. First, a schematic and data sheet for a selected module may be displayed. Next, in response to a request for a position for the module among available resources (e.g., programmable system blocks), a potential position for the module is computed. The position is displayed on a graphical user interface by mapping the module to one or more programmable system blocks. Additional user modules may then be selected and placed. After allowing the user to configure the circuit by selecting circuit parameters and pin-outs, various items are automatically generated to facilitate programming the target device. For example, application programming interfaces (APIs) for programming an operation of the modules, source code for realizing the modules in the resources, an interrupt vector table, and a data sheet for the circuit may be automatically generated.",
	"url": null,
	"owner": "Cypress Semiconductor Corp.",
	"publication_number": "06966039",
	"publication_date": "2005-11-15",
	"application_number": "09989570",
	"application_date": "2001-11-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Automatic generation of application program interfaces, source code, interrupts, and datasheets for microcontroller programming",
	"summary": "",
	"abstract": "A method to facilitate programming a microcontroller is disclosed. In one embodiment, after a user configures the circuit by selecting circuit parameters and pin-outs, various items are automatically generated to facilitate programming the microcontroller. The generated items may include: application programming interfaces (APIs) for programming the operation of one or more user modules; source code for realizing the user modules in hardware; interrupt vectors to call interrupt service routines for one or more modules; and a data sheet for the circuit.",
	"url": null,
	"owner": "Cypress Semiconductor Corporation",
	"publication_number": "07086014",
	"publication_date": "2006-08-01",
	"application_number": "09989808",
	"application_date": "2001-11-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for generating microcontroller configuration information",
	"summary": "",
	"abstract": "A method and apparatus for configuring a microcontroller. An XML description of the microcontroller's hardware resources may be accessed. A user may select from available hardware resources and pre-defined user modules to select a configuration. Configuration information, which may include register bit patterns and microprocessor instructions, may be automatically generated. Additionally, application programming interface calls and structure, as well as interrupt vector tables may be automatically generated. Embodiments of the present invention provide improved ease of use and the ability to manage greater complexity in the configuration of configurable microcontrollers.",
	"url": null,
	"owner": "Cypress Semiconductor Corporation",
	"publication_number": "07406674",
	"publication_date": "2008-07-29",
	"application_number": "10002726",
	"application_date": "2001-10-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Techniques for generating microcontroller configuration information",
	"summary": "",
	"abstract": "A method and apparatus for configuring a microcontroller. An XML description of the microcontroller's hardware resources may be accessed. A user may select from available hardware resources and pre-defined user modules to select a configuration. Configuration information, which may include register bit patterns and microprocessor instructions, may be automatically generated. Additionally, application programming interface calls and structure, as well as interrupt vector tables may be automatically generated. Embodiments of the present invention provide improved ease of use and the ability to manage greater complexity in the configuration of configurable microcontrollers.",
	"url": null,
	"owner": "Cypress Semiconductor Corporation",
	"publication_number": "08069428",
	"publication_date": "2011-11-29",
	"application_number": "11818005",
	"application_date": "2007-06-12",
	"tags": null,
	"slug": "techniques-for-generating-microcontroller-configuration-information",
	"match_type": "abstract"
},
{
	"name": "System and method for selecting a presentation mode",
	"summary": "",
	"abstract": "A presentation module associated with the BIOS of an information handling system, such as a portable computer, allows an intermediate level driver, such as a dynamic link library, to set the presentation display type. In one embodiment, a graphical user interface on a portable computer LCD calls a presentation dynamic link library to coordinate selection and unselection of a projector for displaying information from the portable computer. Upon selection of the projector, the presentation module detects the resolution of the projector and a resolution application programming interface sets the projector resolution of the portable computer to the highest supported resolution.",
	"url": null,
	"owner": "Dell Products L.P.",
	"publication_number": "06909406",
	"publication_date": "2005-06-21",
	"application_number": "10099245",
	"application_date": "2002-03-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and media for a protocol abstraction layer for information handling systems",
	"summary": "",
	"abstract": "A method for communicating with remote devices wherein the method includes sending a request through an application programming interface (API), formatting the request and routing the request to a first connection associated with a first protocol. The method further includes mapping the request into a first command, wherein the first command conforms to the first protocol and sending the first command to a remote device.",
	"url": null,
	"owner": "Dell Products, L.P.",
	"publication_number": "07805533",
	"publication_date": "2010-09-28",
	"application_number": "12128594",
	"application_date": "2008-05-28",
	"tags": null,
	"slug": "methods-and-media-for-a-protocol-abstraction-layer-for-information-handling-systems",
	"match_type": "abstract"
},
{
	"name": "Conferencing architecture employing media servers and enhanced session initiation protocol",
	"summary": "",
	"abstract": "A conferencing system that can access advanced conferencing features while following essentially the same call flow as conventional conferencing systems. The conferencing system includes a computer network, and at least one conferencing application server, at least one media server, and at least one user agent connected to the network. The conferencing application server establishes and manages multimedia conferences by engaging in Session Initiation Protocol (SIP) signaling with the user agents and the media server. Once the conference is established, the media server generates multimedia data such as audio data and conveys the data to the conference participants. In order to access advanced conferencing features, the conferencing system employs an enhanced SIP signaling technique including a conferencing Application Programming Interface (API) implemented by incorporating Extensible Mark-up Language (XML) messages in the bodies of respective SIP request/response messages. The XML messages are incorporated in the SIP request/response message bodies to convey conference specific commands and/or parameters that cannot be easily described via the Session Description Protocol (SDP).",
	"url": null,
	"owner": "Dialogic Corporation",
	"publication_number": "07590692",
	"publication_date": "2009-09-15",
	"application_number": "10191788",
	"application_date": "2002-07-09",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for managing web services within a computer network system",
	"summary": "",
	"abstract": "The present invention is directed to a method and apparatus that manages Web Services within an enterprise having an intranet. In an embodiment of the present invention, a Management Server (MS) is connected with a Management Server Client (MSC) via a network. The MS and MSC work in concert to manage Web Services by providing performance monitoring, security, contract and Service Level Agreement (SLA) management, and other performance enhancements in a unique, pluggable, expandable architecture. In another embodiment of the present invention, the MS is connected to an MSC via a network using a Web Services Application Programming Interface (API). The MSC is connected with a server for providing Web Services to a client. The Web Services are provided to the client through the MSC. The MS provides configuration data to the MSC for management of the Web Services provided through the MSC. In yet another embodiment, the MS is connected to a plurality of MSC's. Each MSC is connected with a plurality of servers. Each of the servers can provide Web Services to a plurality of clients. The Web Services are provided to each client through at least one MSC. In a further embodiment, the Web Services are provided to a client through an MSC that is connected to the server.",
	"url": null,
	"owner": "Digital Evolution",
	"publication_number": "07370075",
	"publication_date": "2008-05-06",
	"application_number": "10423534",
	"application_date": "2003-04-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Secure access method and system",
	"summary": "",
	"abstract": "A secure electronic content system and method is provided. The system includes a controller including an interface component, a host system coupled to the controller, the host system configured to present content under predetermined conditions, the host system operable with a navigation protocol, the host system further including a system manager operable with an associations component configured to be at least partially run by the host system, a translator configured to provide meanings and generate commands within the host system at least a first digital rights management (DRM) component configured to provide encoding and access rules for the content; and a file system component including a file system application programming interface (API) configured to provide a logical interface between a plurality of components.",
	"url": null,
	"owner": "DPHI Acquisitions, Inc.",
	"publication_number": "07110982",
	"publication_date": "2006-09-19",
	"application_number": "09940083",
	"application_date": "2001-08-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Architecture for rendering graphics on output devices",
	"summary": "",
	"abstract": "A method for accessing graphical information including receiving one or more graphics commands written in an application programming interface (API). The graphics commands are converted into a graphical language that facilitates the execution of the commands for a plurality of output devices of one or more types.",
	"url": null,
	"owner": "Ellis Amalgamated LLC",
	"publication_number": "08042094",
	"publication_date": "2011-10-18",
	"application_number": "11176057",
	"application_date": "2005-07-07",
	"tags": null,
	"slug": "architecture-for-rendering-graphics-on-output-devices",
	"match_type": "abstract"
},
{
	"name": "Common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between code modules. A first code module is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the first code module and a target code module and provides support for performing the at least one call from a first execution mode associated with the first code module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the first code module and said second execution mode of the target code module are determined. A communication path is established between the code modules in accordance with the first and second execution modes.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07950025",
	"publication_date": "2011-05-24",
	"application_number": "11824542",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "common-software-environment",
	"match_type": "abstract"
},
{
	"name": "Data storage system having common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between code modules. A first code module is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the first code module and a target code module and provides support for performing the at least one call from a first execution mode associated with the first code module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the first code module and said second execution mode of the target code module are determined. A communication path is established between the code modules in accordance with the first and second execution modes.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "08205218",
	"publication_date": "2012-06-19",
	"application_number": "11824433",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "data-storage-system-having-common-software-environment",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for initializing logical objects in a data storage system",
	"summary": "",
	"abstract": "A method and apparatus for manipulating data in a storage device that is coupled to a host computer. Manipulations that can be performed by the storage device include moving non-contiguous blocks of data between the host computer and the storage device in a single operation. Other manipulations can be performed directly by the storage device without passing data to or from the host computer and include copying data from one logical object that is defined on the host computer to another, initializing, backing-up, transforming, or securely deleting a logical object that is defined by the host computer with a single command. In one embodiment, an application programming interface is provided that allows a relationship between logical objects on a host computer and storage locations on a storage device to be communicated between the host computer and the storage device. By providing the storage device with knowledge of the relationship between a logical object and the storage locations corresponding to that logical object, data corresponding to the logical object can be manipulated directly by the storage device, rather than by the host computer. In another embodiment, a graphical visualization routine is provided that displays the global mapping of a logical object to a set of physical blocks on the storage device for each layer of mapping below the logical object.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07127556",
	"publication_date": "2006-10-24",
	"application_number": "10953936",
	"application_date": "2004-09-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for initializing logical objects in a data storage system",
	"summary": "",
	"abstract": "A method and apparatus for manipulating data in a storage device that is coupled to a host computer. Manipulations that can be performed by the storage device include moving non-contiguous blocks of data between the host computer and the storage device in a single operation. Other manipulations can be performed directly by the storage device without passing data to or from the host computer and include copying data from one logical object that is defined on the host computer to another, initializing, backing-up, transforming, or securely deleting a logical object that is defined by the host computer with a single command. In one embodiment, an application programming interface is provided that allows a relationship between logical objects on a host computer and storage locations on a storage device to be communicated between the host computer and the storage device. By providing the storage device with knowledge of the relationship between a logical object and the storage locations corresponding to that logical object, data corresponding to the logical object can be manipulated directly by the storage device, rather than by the host computer. In another embodiment, a graphical visualization routine is provided that displays the global mapping of a logical object to a set of physical blocks on the storage device for each layer of mapping below the logical object.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "06883063",
	"publication_date": "2005-04-19",
	"application_number": "09107684",
	"application_date": "1998-06-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method for suspending a discovery process, saving the state of the discovery process, and resuming the discovery process during a distributed copy operation",
	"summary": "",
	"abstract": "Described is a distributed copying technique that may be used in migrating large amounts of data from one or more source devices to one or more destination devices. The data source is divided into partitions. As Fibre Channel adapters (FAs) become available, each of the FAs may copy a partition of the data. In connection with specifying paths used for the distributed copying technique, a preferred path selection (source port-target port mapping) may be made by executing code in a controlling data storage system to perform discovery processing. The preferred path selection is used for the duration of the distributed copying unless the preferred path is unable to transmit data. A target port of the preferred path may be randomly selected from all accessible target ports, and/or in accordance with a specified portion of the target ports. Preferred paths may also be specified using an API (application programming interface).",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07634595",
	"publication_date": "2009-12-15",
	"application_number": "11014597",
	"application_date": "2004-12-16",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and apparatus for managing devices within storage area networks",
	"summary": "",
	"abstract": "Mechanisms and techniques provide a management application providing an enterprise storage area network application programming interface for managing elements in a storage area network. The management application initializes a plurality of access wrappers that each defines operations for management of a respective class of elements operating within the storage area network. The management application provides, to a management client, connection data associated with a specific element associated with one of the plurality of access wrappers. The connection data identifies connection data parameters for performing management of the specific element in the storage area network. The management application receives at least one generic management command for the specific element. The generic management command includes at least a portion of the associated connection data for the specific element. The management application operates at least one access wrapper to translate the at least one generic management command into an operation of at least one vendor-specific command to manage the vendor specific element in the storage area network.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07003527",
	"publication_date": "2006-02-21",
	"application_number": "10186250",
	"application_date": "2002-06-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Path determination using preferred paths or randomly selecting source and target ports",
	"summary": "",
	"abstract": "Described is a distributed copying technique that may be used in migrating large amounts of data from one or more source devices to one or more destination devices. The data source is divided into partitions. As Fibre Channel adapters (FAs) become available, each of the FAs may copy a partition of the data. In connection with specifying paths used for the distributed copying technique, a preferred path selection (source port-target port mapping) may be made by executing code in a controlling data storage system to perform discovery processing. The preferred path selection is used for the duration of the distributed copying unless the preferred path is unable to transmit data. A target port of the preferred path may be randomly selected from all accessible target ports, and/or in accordance with a specified portion of the target ports. Preferred paths may also be specified using an API (application programming interface).",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07707331",
	"publication_date": "2010-04-27",
	"application_number": "11014338",
	"application_date": "2004-12-16",
	"tags": null,
	"slug": "path-determination-using-preferred-paths-or-randomly-selecting-source-and-target-ports",
	"match_type": "abstract"
},
{
	"name": "Software configuration methods and common presentation layer",
	"summary": "",
	"abstract": "Methods and systems for backing up data of a client connected to a server. The methods and systems include operating a graphical user interface for displaying to a user information about the data of a client. At an administrator module and client module, initiating one or more wizard program modules including dynamic link libraries configured to carry a user through the steps to complete a backup function, each wizard program module having one or more application programming interfaces which allow the wizard program modules to communicate with the operating system on which the administrator module or client module is operating. A common presentation layer can also be included to provide one or more common user interface screens which are insertable into each wizard program module.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07716684",
	"publication_date": "2010-05-11",
	"application_number": "10997580",
	"application_date": "2004-11-24",
	"tags": null,
	"slug": "software-configuration-methods-and-common-presentation-layer",
	"match_type": "abstract"
},
{
	"name": "System for determining the mapping of logical objects in a data storage system",
	"summary": "",
	"abstract": "A method and apparatus for manipulating data in a storage device that is coupled to a host computer. Manipulations that can be performed by the storage device include moving non-contiguous blocks of data between the host computer and the storage device in a single operation. Other manipulations can be performed directly by the storage device without passing data to or from the host computer and include copying data from one logical object that is defined on the host computer to another, initializing, backing-up, transforming, or securely deleting a logical object that is defined by the host computer with a single command. In one embodiment, an application programming interface is provided that allows a relationship between logical objects on a host computer and storage locations on a storage device to be communicated between the host computer and the storage device. By providing the storage device with knowledge of the relationship between a logical object and the storage locations corresponding to that logical object, data corresponding to the logical object can be manipulated directly by the storage device, rather than by the host computer. In another embodiment, a is graphical visualization routine is provided that displays the global mapping of a logical object to a set of physical blocks on the storage device for each layer of mapping below the logical object.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07383294",
	"publication_date": "2008-06-03",
	"application_number": "11192146",
	"application_date": "2005-07-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System for determining the mapping of logical objects in a data storage system",
	"summary": "",
	"abstract": "A method and apparatus for manipulating data in a storage device that is coupled to a host computer. Manipulations that can be performed by the storage device include moving non-contiguous blocks of data between the host computer and the storage device in a single operation. Other manipulations can be performed directly by the storage device without passing data to or from the host computer and include copying data from one logical object that is defined on the host computer to another, initializing, backing-up, transforming, or securely deleting a logical object that is defined by the host computer with a single command. In one embodiment, an application programming interface is provided that allows a relationship between logical objects on a host computer and storage locations on a storage device to be communicated between the host computer and the storage device. By providing the storage device with knowledge of the relationship between a logical object and the storage locations corresponding to that logical object, data corresponding to the logical object can be manipulated directly by the storage device, rather than by the host computer. In another embodiment, a graphical visualization routine is provided that displays the global mapping of a logical object to a set of physical blocks on the storage device for each layer of mapping below the logical object.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "06938059",
	"publication_date": "2005-08-30",
	"application_number": "10368720",
	"application_date": "2003-02-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Techniques for use with device drivers in a common software environment",
	"summary": "",
	"abstract": "Described are techniques for facilitating communication between device drivers. A device driver is provided that makes at least one call using an application programming interface. The application programming interface facilitates communication between the device driver module and a target code module. The application programming interface provides support for performing the at least one call from a first execution mode associated with the device driver module and a second execution mode associated with the target code module. The application programming interface provides support for user space to user space communication, user space to kernel space communication, kernel space to kernel space communication, and kernel to user space communication. The first execution mode of the device driver module and said second execution mode of the target code module are determined. A communication path between the modules is established in accordance with said first execution mode and said second execution mode.",
	"url": null,
	"owner": "EMC Corporation",
	"publication_number": "07950022",
	"publication_date": "2011-05-24",
	"application_number": "11824506",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "techniques-for-use-with-device-drivers-in-a-common-software-environment",
	"match_type": "abstract"
},
{
	"name": "User authentication system and method for encryption and decryption",
	"summary": "",
	"abstract": "A system configured to authenticate a user for encryption or decryption includes a user authentication apparatus, a computer-readable medium operable to communicate with the user authentication apparatus, and an encryption and decryption computer communicating with the user authentication apparatus. The computer-readable medium may store user identifying information and encryption and decryption data. The encryption and decryption computer may be configured to receive an application programming interface (API) for interfacing with the user authentication apparatus and receive the user identifying information from the computer-readable medium via the API. A user may be authenticated based on the user identifying information and, once the user is authenticated, the encryption and decryption data may be read.",
	"url": null,
	"owner": "Empire IP LLC",
	"publication_number": "08359476",
	"publication_date": "2013-01-22",
	"application_number": "12957479",
	"application_date": "2010-12-01",
	"tags": null,
	"slug": "user-authentication-system-and-method-for-encryption-and-decryption",
	"match_type": "abstract"
},
{
	"name": "Method and system for extending keyword searching to syntactically and semantically annotated data",
	"summary": "",
	"abstract": "Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (u201cSQEu201d) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. In one embodiment, the SQE comprises a Query Processor, a Data Set Preprocessor, a Keyword Search Engine, a Data Set Indexer, an Enhanced Natural Language Parser (u201cENLPu201d), a data set repository, and, in some embodiments, a user interface or an application programming interface.",
	"url": null,
	"owner": "Evri Inc.",
	"publication_number": "07526425",
	"publication_date": "2009-04-28",
	"application_number": "11012089",
	"application_date": "2004-12-13",
	"tags": null,
	"slug": "method-and-system-for-extending-keyword-searching-to-syntactically-and-semantically-annotated-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for extending keyword searching to syntactically and semantically annotated data",
	"summary": "",
	"abstract": "Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (u201cSQEu201d) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. In one embodiment, the SQE comprises a Query Processor, a Data Set Preprocessor, a Keyword Search Engine, a Data Set Indexer, an Enhanced Natural Language Parser (u201cENLPu201d), a data set repository, and, in some embodiments, a user interface or an application programming interface.",
	"url": null,
	"owner": "Evri, Inc.",
	"publication_number": "08131540",
	"publication_date": "2012-03-06",
	"application_number": "12401421",
	"application_date": "2009-03-10",
	"tags": null,
	"slug": "method-and-system-for-extending-keyword-searching-to-syntactically-and-semantically-annotated-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for extending keyword searching to syntactically and semantically annotated data",
	"summary": "",
	"abstract": "Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (u201cSQEu201d) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. In one embodiment, the SQE comprises a Query Processor, a Data Set Preprocessor, a Keyword Search Engine, a Data Set Indexer, an Enhanced Natural Language Parser (u201cENLPu201d), a data set repository, and, in some embodiments, a user interface or an application programming interface.",
	"url": null,
	"owner": "Evri, Inc.",
	"publication_number": "07953593",
	"publication_date": "2011-05-31",
	"application_number": "12401386",
	"application_date": "2009-03-10",
	"tags": null,
	"slug": "method-and-system-for-extending-keyword-searching-to-syntactically-and-semantically-annotated-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for controlling and accessing content servers",
	"summary": "",
	"abstract": "A method and system for controlling provisioning and access to cache servers with an application programming interface (API). The API includes components for performing various actions including: (i) prepopulating content on at least one cache server from a content server; (ii) expiring content on at least one cache server; (iii) pinning content in a memory of at least one cache server; (iv) assigning resources on at least one cache server in accordance with a quota; (v) retrieving content from at least one cache server; and (vi) flushing deleted content from at least one selected cache. The API may include a security layer. The security layer determines whether a requestor has permission to cause the requested action to be performed.",
	"url": null,
	"owner": "F5 Networks, Inc.",
	"publication_number": "08204930",
	"publication_date": "2012-06-19",
	"application_number": "10077689",
	"application_date": "2002-02-15",
	"tags": null,
	"slug": "method-and-system-for-controlling-and-accessing-content-servers",
	"match_type": "abstract"
},
{
	"name": "ASP business decision engine",
	"summary": "",
	"abstract": "A decision engine is provided that integrates all components of a credit application process, including access to and manipulation of credit bureau data, credit scoring, credit decisioning, and matching the correct products, into a single application service provider (ASP) platform which is accessible through a series of Application Programming Interfaces (APIs).",
	"url": null,
	"owner": "Fair Isaac and Company, Inc.",
	"publication_number": "07356503",
	"publication_date": "2008-04-08",
	"application_number": "09790382",
	"application_date": "2001-02-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "ASP business decision engine",
	"summary": "",
	"abstract": "A decision engine is provided that integrates all components of a credit application process, including access to and manipulation of credit bureau data, credit scoring, credit decisioning, and matching the correct products, into a single application service provider (ASP) platform which is accessible through a series of Application Programming Interfaces (APIs).",
	"url": null,
	"owner": "Fair Isaac Corporation",
	"publication_number": "07734522",
	"publication_date": "2010-06-08",
	"application_number": "11971858",
	"application_date": "2008-01-09",
	"tags": null,
	"slug": "asp-business-decision-engine",
	"match_type": "abstract"
},
{
	"name": "Method for launching applications",
	"summary": "",
	"abstract": "An originating application in a process plant is able to launch multiple desired applications, with one or more of the desired applications having a different application programming interface. In one example, the originating application is able to launch multiple desired applications via an application launcher program. The originating application provides the application launcher program with an indication of the desired application to be launched, and the application launcher program then launches the indicated desired application.",
	"url": null,
	"owner": "Fisher-Rosemount Systems, Inc.",
	"publication_number": "07600234",
	"publication_date": "2009-10-06",
	"application_number": "10315857",
	"application_date": "2002-12-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method, interface and apparatus for discovering a location of a device",
	"summary": "",
	"abstract": "A system, method, Application Programming Interface (API) and device for discovering a location of a device, for example, to provide location information for a Location Based Service (LBS). The device includes a memory, a display, and a processor operably coupled to the memory and the display. The processor may be arranged to provide a user interface (UI) on the display, retrieve location cues in response to a location request, forward location cues to a location server and receive location information back from the location server. The location information may be a location query page associated with a new place ID if the location cues do not correspond to the location server cues or the location information may be a previously discovered place ID associated with the server location cues if one or more of the location cues correspond to one or more of the server's location cues.",
	"url": null,
	"owner": "France Telecom",
	"publication_number": "07934224",
	"publication_date": "2011-04-26",
	"application_number": "11771925",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "method-interface-and-apparatus-for-discovering-a-location-of-a-device",
	"match_type": "abstract"
},
{
	"name": "Method and systems to interface navigation operations",
	"summary": "",
	"abstract": "Methods and Systems are provided for interfacing to navigation operations. An application programming interface (API) library is provided having navigation modules, guidance modules, routing modules, and mapping modules. The API is accessible to customized modules operating on a portable electronic device. The customized modules are operable to selectively access and process a number of the modules using the API library while the customized modules are processing on the portable electronic device.",
	"url": null,
	"owner": "Garmin Ltd.",
	"publication_number": "07099771",
	"publication_date": "2006-08-29",
	"application_number": "10822330",
	"application_date": "2004-04-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems to interface navigation operations",
	"summary": "",
	"abstract": "Methods and Systems are provided for interfacing to navigation operations. An application programming interface (API) library is provided having navigation modules, guidance modules, routing modules, and mapping modules. The API is accessible to customized modules operating on a portable electronic device. The customized modules are operable to selectively access and process a number of the modules using the API library while the customized modules are processing on the portable electronic device.",
	"url": null,
	"owner": "Garmin Ltd.",
	"publication_number": "07228225",
	"publication_date": "2007-06-05",
	"application_number": "11456491",
	"application_date": "2006-07-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems to interface navigation operations",
	"summary": "",
	"abstract": "Methods and Systems are provided for interfacing to navigation operations. An application programming interface (API) library is provided having navigation modules, guidance modules, routing modules, and mapping modules. The API is accessible to customized modules operating on a portable electronic device. The customized modules are operable to selectively access and process a number of the modules using the API library while the customized modules are processing on the portable electronic device.",
	"url": null,
	"owner": "Garmin Ltd.",
	"publication_number": "07062374",
	"publication_date": "2006-06-13",
	"application_number": "10822331",
	"application_date": "2004-04-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems to interface navigation operations",
	"summary": "",
	"abstract": "Methods and Systems are provided for interfacing to navigation operations. An application programming interface (API) library is provided having navigation modules, guidance modules, routing modules, and mapping modules. The API is accessible to customized modules operating on a portable electronic device. The customized modules are operable to selectively access and process a number of the modules using the API library while the customized modules are processing on the portable electronic device.",
	"url": null,
	"owner": "Garmin Ltd.",
	"publication_number": "07013216",
	"publication_date": "2006-03-14",
	"application_number": "10246026",
	"application_date": "2002-09-18",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Analysis engine and work space manager for use with gene expression data",
	"summary": "",
	"abstract": "A platform is for managing, integrating, and analyzing gene expression data. The platform includes a Run Time Engine(RTE) which provides more direct, quicker, and more efficient access to gene expression data through the use of memory mapped files. The platform also includes a workspace that is implemented in directories with data objects comprising XML descriptors coupled with binary data objects for storing gene and sample identifiers and input parameters for saved analysis sessions. The platform provides various Application Programming Interfaces (APIs) to a data warehouse, including a low-level C++ API, a high-level C++ API, a Perl API, R API, and CORBA API to access gene expression data from RTE memory mapped files. These APIs offer quicker and more direct access to the memory, thus improving the speed of overall operations.",
	"url": null,
	"owner": "Gene Logic Inc.",
	"publication_number": "07251642",
	"publication_date": "2007-07-31",
	"application_number": "10213881",
	"application_date": "2002-08-06",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Call and data correspondence in a call-in center employing virtual restructuring for computer telephony integrated functionality",
	"summary": "",
	"abstract": "A call center having agent stations comprising telephones connected to computer stations by a Telephone Application Programming Interface (TAPI)-compliant bridge has data pertaining to callers stored in a database on a local area network (LAN) to which the computer stations are also connected. Origination data for incoming calls, both conventional calls to the telephones and computer-simulated calls to the computer platforms, is used as a key to extract data pertaining to calls from the database for display on video display units (VDUs) of the computer workstations where the calls are terminated. In some cases, data is only extracted and displayed for calls from previously listed origination points.",
	"url": null,
	"owner": "Genesys Telecommunications Laboratories, Inc.",
	"publication_number": "07903807",
	"publication_date": "2011-03-08",
	"application_number": "10843802",
	"application_date": "2004-05-11",
	"tags": null,
	"slug": "call-and-data-correspondence-in-a-callin-center-employing-virtual-restructuring-for-computer-telephony-integrated-functionality",
	"match_type": "abstract"
},
{
	"name": "Message durability and retrieval in a geographically distributed voice messaging system",
	"summary": "",
	"abstract": "A message retrieval subsystem comprises a voice extensible mark-up language browser, a message server, and a message library. The VXML browser is configured with an application programming interface that enables a subscriber of a distributed voice messaging service to request a stored message. The message server receives a request to open a connection from a client process operative on the voice extensible mark-up language browser, spawns a thread to enable the connection, uses the thread to queue one or more subscriber requests for respective blocks of audio information, removes and processes the one or more subscriber requests, and uses the thread to forward a retrieved block of audio information to a subscriber. The message library is coupled to the message server and interposed between the message server and a common message store. The upper library isolates the VXML browser from a streaming protocol used to access the stored message.",
	"url": null,
	"owner": "Glenayre Electronics, Inc.",
	"publication_number": "07308083",
	"publication_date": "2007-12-11",
	"application_number": "11170459",
	"application_date": "2005-06-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Custom search index",
	"summary": "",
	"abstract": "A system includes an application programming interface, an indexer, a security unit and at least one search engine. The application programming interface uploads user-selected custom content from a first user. The indexer indexes the custom content to produce a first search index. The security unit authenticates a user and the at least one search engine receives a search query from the user, searches the first search index based on the search query, and searches a second search index based on the search query and based on results of the user authentication, where the second search index is different than the first search index.",
	"url": null,
	"owner": "Google Inc.",
	"publication_number": "07725453",
	"publication_date": "2010-05-25",
	"application_number": "11618327",
	"application_date": "2006-12-29",
	"tags": null,
	"slug": "custom-search-index",
	"match_type": "abstract"
},
{
	"name": "Custom search index data security",
	"summary": "",
	"abstract": "A system includes a server to store content and a content searching system. The content search system includes an application programming interface to receive user-selected metadata uploaded from a first user, where the metadata includes data that describes content stored at a server. The content searching system further includes an indexer to index the metadata to produce a metadata search index, a search engine to search the metadata search index based on a search query received from a user to produce metadata search results, and a delivery engine to send the metadata search results, and a link to the remote server, to the user to permit the user to access the content stored at the remote server.",
	"url": null,
	"owner": "Google Inc.",
	"publication_number": "08442994",
	"publication_date": "2013-05-14",
	"application_number": "12209996",
	"application_date": "2008-09-12",
	"tags": null,
	"slug": "custom-search-index-data-security",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for controlling execution of a computer operation",
	"summary": "",
	"abstract": "Computer operations whose execution would increase usage costs may require use of authorization and notification plug-ins to prevent unauthorized execution. The command may be designed to only execute properly if the authorization and notification plug-ins are properly registered. The computer system customer designs the authorization and notification plug-ins based on standard application programming interfaces to suit the customer's business practices and links them to the computer operation. The computer operation executes the authorization plug-in to determine if the proper authorization plug-in parameters have been specified and verify that the command is authorized. If authorization is granted, the computer operation checks to see that the notification plug-in is given the correct parameters, executes the computer operation, and then executes the notification module to notify the necessary personnel. Both authorization and notification plug-ins return errors that are passed to the user through the computer operation.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07287277",
	"publication_date": "2007-10-23",
	"application_number": "10023811",
	"application_date": "2001-12-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for controlling execution of a computer operation",
	"summary": "",
	"abstract": "Computer operations whose execution would increase usage costs may require use of authorization and notification to prevent unauthorized execution. The computer operations may be designed to execute only if a authorization and notification routines are properly registered. The computer system customer establishes the authorization and notification requirements based on standard application programming interfaces to suit the customer's business practices and links the requirements to the computer operation. The computer operation determines if the authorization and notification are proper. If authorization is granted, the computer operation checks to see that the notification is proper, executes the computer operation, and then executes a notification module to notify the necessary personnel. Both authorization and notification routines return errors that are passed to the user through the computer operation.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07926101",
	"publication_date": "2011-04-12",
	"application_number": "11976099",
	"application_date": "2007-10-22",
	"tags": null,
	"slug": "method-and-apparatus-for-controlling-execution-of-a-computer-operation",
	"match_type": "abstract"
},
{
	"name": "Providing requested file mapping information for a file on a storage device",
	"summary": "",
	"abstract": "A resolve agent for providing requested file mapping information for a file on a storage device. The agent comprises an application programming interface through which file identifying information is provided to the resolve agent and the requested file mapping information provided by the resolve agent; and file system logic configured to ascertain the requested file mapping information from file data structures on the storage device according to a file system that created the file data structure on the storage device.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07308463",
	"publication_date": "2007-12-11",
	"application_number": "10180284",
	"application_date": "2002-06-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for providing location profile data for network nodes",
	"summary": "",
	"abstract": "A system for providing relational data for a hierarchically-organized plurality of nodes is provided, such as for providing physical location data of a node in an enterprise network. The system includes a hierarchical database system storing network hierarchy data for the plurality of nodes, such as an LDAP database. A configuration repository system stores relational data associated with one or more of the nodes, such as the room and floor location of each node. The relational data of the configuration repository system is organized in a bottom-up order and the network hierarchy data of the hierarchical database system is organized in a top-down order, such that the location of a node in an organization can be determined by searching using an application programming interface that goes from the node location upwards through the network hierarchy.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07590618",
	"publication_date": "2009-09-15",
	"application_number": "10107020",
	"application_date": "2002-03-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Wireless printing interface kit and method",
	"summary": "",
	"abstract": "A kit, system, and associated methods are provided to facilitate wireless printing. In one embodiment, the system comprises a platform having a processor circuit having a processor and a memory. The system also includes a wireless printing logic stored in the memory and executable by the processor. The wireless printing logic comprises an application capable of a print operation and a number of hidden objects that encapsulate a number of wireless printing tasks associated with a wireless printing operation for the application. The wireless printing logic also includes at least one application programming interface (API) object that provides an interface between the application and the hidden objects, and, at least one platform specific object that encapsulates a number of adaptive wireless printing tasks that are configured for operation on the platform.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07417754",
	"publication_date": "2008-08-26",
	"application_number": "09947261",
	"application_date": "2001-09-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Techniques for managing a storage environment",
	"summary": "",
	"abstract": "Techniques for managing a storage environment. According to an embodiment of the present invention, high-level application programming interfaces (APIs) are provided that can be used by applications such as storage management applications (e.g., ERM applications, SRM applications) to manage a storage environment. Using these APIs, an application can issue simple high-level commands to perform storage management operations without having to worry about the low level storage array-specific commands. Embodiments of the present invention handle the necessary translations between the high-level commands and the low-level storage array-specific commands or protocols.",
	"url": null,
	"owner": "Hitachi, Ltd.",
	"publication_number": "08001284",
	"publication_date": "2011-08-16",
	"application_number": "12050879",
	"application_date": "2008-03-18",
	"tags": null,
	"slug": "techniques-for-managing-a-storage-environment",
	"match_type": "abstract"
},
{
	"name": "Techniques for managing a storage environment",
	"summary": "",
	"abstract": "Techniques for managing a storage environment. According to an embodiment of the present invention, high-level application programming interfaces (APIs) are provided that can be used by applications such as storage management applications (e.g., ERM applications, SRM applications) to manage a storage environment. Using these APIs, an application can issue simple high-level commands to perform storage management operations without having to worry about the low level storage array-specific commands. Embodiments of the present invention handle the necessary translations between the high-level commands and the low-level storage array-specific commands or protocols.",
	"url": null,
	"owner": "Hitachi, Ltd.",
	"publication_number": "07363390",
	"publication_date": "2008-04-22",
	"application_number": "10374319",
	"application_date": "2003-02-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for displaying animation with an embedded system graphics API",
	"summary": "",
	"abstract": "An animation file player can display animation files with an embedded system graphics application programming interface (graphics API). In an example implementation, an animation file comprises a Flashu00ae animation file such as, a Shockwave Flashu00ae animation file, and the embedded system graphics API comprises an OpenGLu00ae|ES graphics API. The present invention is not intended to be so limited, and other types of animation files and embedded system graphics APIs can be used.",
	"url": null,
	"owner": "Hooked Wireless, Inc.",
	"publication_number": "07911467",
	"publication_date": "2011-03-22",
	"application_number": "11321042",
	"application_date": "2005-12-30",
	"tags": null,
	"slug": "method-and-system-for-displaying-animation-with-an-embedded-system-graphics-api",
	"match_type": "abstract"
},
{
	"name": "Method and system for displaying animation with an embedded system graphics API",
	"summary": "",
	"abstract": "An animation file player can display animation files with an embedded system graphics application programming interface (graphics API). In an example implementation, an animation file comprises a Flashu00ae animation file such as, a Shockwave Flashu00ae animation file, and the embedded system graphics API comprises an OpenGLu00ae|ES graphics API. The present invention is not intended to be so limited, and other types of animation files and embedded system graphics APIs can be used.",
	"url": null,
	"owner": "Hooked Wireless, Inc.",
	"publication_number": "08248420",
	"publication_date": "2012-08-21",
	"application_number": "13028833",
	"application_date": "2011-02-16",
	"tags": null,
	"slug": "method-and-system-for-displaying-animation-with-an-embedded-system-graphics-api",
	"match_type": "abstract"
},
{
	"name": "Call center system and method for obtaining interface invoke information",
	"summary": "",
	"abstract": "The present invention discloses a call center system and a method for obtaining interface invoke information to realize automatic analysis of the user behaviors. The method includes steps of sending a connection establishment request message to a user interface server by a call center client after a service is activated; allocating a connection identification for the activated service and sending a response message after the user interface server receives the connection request message; performing interactions between the call center client and the user interface server and recording the interaction message according to the connection identification attached in the interaction message; and decomposing the recorded interaction message and obtaining the information on the application programming interface invoked by each service according to the name of the application programming interface corresponding to the interface identification obtained from each message.",
	"url": null,
	"owner": "Huawei Technologies Co., Ltd.",
	"publication_number": "08175256",
	"publication_date": "2012-05-08",
	"application_number": "11484905",
	"application_date": "2006-07-12",
	"tags": null,
	"slug": "call-center-system-and-method-for-obtaining-interface-invoke-information",
	"match_type": "abstract"
},
{
	"name": "Electronic gaming apparatus with authentication",
	"summary": "",
	"abstract": "A gaming machine is provided with a cabinet, at least one user-interface button, a value-receiving mechanism associated with the cabinet, a display unit associated with the cabinet, a processor disposed in the cabinet, system software representing a game that may be played by a player, encoded data generated from at least one message digest that was generated based on using an encoding function with the system software, loading software stored in memory that loads system software into random-access memory and verifies correctness and authenticity of the system software, and operating system (OS) software stored in memory that comprises an application programming interface including an application programming interface portion that provides a software interface to the display unit.",
	"url": null,
	"owner": "IGT",
	"publication_number": "07063615",
	"publication_date": "2006-06-20",
	"application_number": "10601465",
	"application_date": "2003-06-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Extending an RFID reader API",
	"summary": "",
	"abstract": "The present disclosure provides a Radio Frequency Identification (RFID) reader software structure and method. A functionality of a reader engine is extended, enabling it to communicate via an extended standard Application Programming Interface (API) with an application software. The extended functionality supports a Partner Service Module that resides in the reader, thus allowing at least one of its Partner Software Functions to communicate with the application software over a single connection.",
	"url": null,
	"owner": "Impinj, Inc.",
	"publication_number": "08082556",
	"publication_date": "2011-12-20",
	"application_number": "11959592",
	"application_date": "2007-12-19",
	"tags": null,
	"slug": "extending-an-rfid-reader-api",
	"match_type": "abstract"
},
{
	"name": "Virtual machine interface for hardware reconfigurable and software programmable processors",
	"summary": "",
	"abstract": "The present invention provides a virtual machine interface (VMI) and an application programming interface (API) usable in conjunction with a reconfigurable wireless network communication apparatus. The reconfigurable wireless network communication apparatus comprises a plurality of hardware kernels. The apparatus can be reconfigured to support different or modified communication protocols over time. The VMI comprises a library of software objects. By configuring VMI software objects, a programmer selects the communication protocol used by the reconfigurable wireless network communication apparatus. The API of the present invention provides higher level management of the communication protocol used by a reconfigurable wireless network communication apparatus. The API comprises a library of high level software objects that further abstract hardware details of the apparatus.",
	"url": null,
	"owner": "Infineon Technologies AG",
	"publication_number": "07703107",
	"publication_date": "2010-04-20",
	"application_number": "09828381",
	"application_date": "2001-04-05",
	"tags": null,
	"slug": "virtual-machine-interface-for-hardware-reconfigurable-and-software-programmable-processors",
	"match_type": "abstract"
},
{
	"name": "Shared library in a printing system",
	"summary": "",
	"abstract": "Provided are a method, system and article of manufacture wherein device configuration information is stored in a shared library. An application programming interface is provided to allow a plurality of page description language interpreters to access the device configuration information stored in the shared library. At least one of the plurality of page description language interpreters accesses the device configuration information stored in the shared library by calling the application programming interface.",
	"url": null,
	"owner": "InfoPrint Solutions Company, LLC.",
	"publication_number": "07894084",
	"publication_date": "2011-02-22",
	"application_number": "11413402",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "shared-library-in-a-printing-system",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for configuring data plane behavior on network forwarding elements",
	"summary": "",
	"abstract": "A method and apparatus for configuring data plane behavior on network forwarding elements are described. In one embodiment, the method includes receiving, within a network element control plane, protocol configuration information extracted from a protocol application utilizing a network protocol application programming interface (API). Once the protocol configuration information is received, the protocol configuration information is processed using a control interface corresponding to the network protocol implemented by the protocol application. Once the protocol configuration information is processed, the control interface programs one or more data plane forwarding elements of the network element according to protocol configuration information. Accordingly, by providing similar control interfaces for multiple, network protocols, inter-operability between components from multiple vendors is enabled.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07646759",
	"publication_date": "2010-01-12",
	"application_number": "10338291",
	"application_date": "2003-01-07",
	"tags": null,
	"slug": "apparatus-and-method-for-configuring-data-plane-behavior-on-network-forwarding-elements",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for networking driver protocol enhancement",
	"summary": "",
	"abstract": "Application Programming Interface, methods and apparatus are disclosed for enhancing data network communication. In a network including a first and a second network interface, each interface has an associated MAC address, and each network interface has a driver storing the MAC address for its associated interface. Under certain circumstances, such as in a fail-over condition, or to improve throughput, the second driver is conditionally directed to replace its stored MAC address with the MAC address of the first network interface. Thus, the second network interface can process network traffic as if it were the first network interface. Disclosed are several features and advantages resulting from such MAC reassignment.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "06874147",
	"publication_date": "2005-03-29",
	"application_number": "09443026",
	"application_date": "1999-11-18",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Enabling a PC-DTV receiver to share the resource cache with multiple clients",
	"summary": "",
	"abstract": "A digital broadcast signal is received to a digital television receiver in a computer. The digital broadcast signal is processed to extract enhanced content data. The enhanced content data is stored in a web browser cache. The web browser cache is interrogated with an application programming interface. Responsive to the application programming interface interrogating the web browser cache, the enhanced content data is provided to a personal web server. The enhanced content data in the personal web server is stored and providing to at least one client device.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07263712",
	"publication_date": "2007-08-28",
	"application_number": "09870100",
	"application_date": "2001-05-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Encryption acceleration",
	"summary": "",
	"abstract": "The subject mater herein relates to data processing and, more particularly, to encryption acceleration. Various embodiments herein provide devices and systems including a standardized encryption application programming interface embedded in firmware to perform encryption services. Some such embodiments move encryption operations away from operating system processes into firmware. As a result, encryption operations are generally accelerated.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07987349",
	"publication_date": "2011-07-26",
	"application_number": "11771671",
	"application_date": "2007-06-29",
	"tags": null,
	"slug": "encryption-acceleration",
	"match_type": "abstract"
},
{
	"name": "Hybrid mode network stack under EFI/Tiano based BIOS in modular computing environment",
	"summary": "",
	"abstract": "A method of transmitting data through network stack choosing one of a synchronous and an asynchronous mode depending on requests of applications. The method may involve changing frequencies of a timer, for example, adjusting the frequency in the asynchronous Application Programming Interface (API) according to a load of network traffic and even stopping the timer for the synchronous API. In the asynchronous API, as heavier network traffic load is expected, the timer may increase its frequency. Accordingly, the timer decreases its frequency detecting the lighter network traffic and the remaining Central Processing Unit (CPU) cycles may be used to execute the foreground task, while the network stack still may respond to Internet Control Message Protocol (ICMP) and Address Resolution Protocol (ARP) requests. As the application tries to receive packets, for example, downloading a large volume of data, such as the kernel of an Operating System (OS), the network stack may even shut down the timer temporarily and switch to a synchronous mode to improve overall system performance. Here, the network stack may use a busy waiting signal to notify its status.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07568021",
	"publication_date": "2009-07-28",
	"application_number": "10849866",
	"application_date": "2004-05-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for distributing applications",
	"summary": "",
	"abstract": "Methods and systems for distributing applications are described herein. In one aspect of the invention, an exemplary method includes receiving an original request for accessing a distributed resource management system (DRMS) through an application distributor application programming interface (API), the application distributor API being independent of the DRMS, selecting the DRMS as requested, translating the original request to be compatible with the selected DRMS, and transmitting translated request to the selected DRMS. Other methods and systems are also described.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07096249",
	"publication_date": "2006-08-22",
	"application_number": "10109938",
	"application_date": "2002-03-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Techniques to provide information validation and transfer",
	"summary": "",
	"abstract": "Techniques to issue a single application programming interface (API) to request both data copy and CRC validation operations. In some embodiments, a receiver of the API may observe which logic (e.g., software or hardware and/or combinations of software and hardware) is available to execute instructions for data copy and CRC validation operations.",
	"url": null,
	"owner": "Intel Corporation",
	"publication_number": "07454667",
	"publication_date": "2008-11-18",
	"application_number": "11115656",
	"application_date": "2005-04-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Apparatus, system, and method for seamless multiple format metadata abstraction",
	"summary": "",
	"abstract": "An apparatus, system, and method are disclosed for providing seamless multiple format metadata abstraction. A metadata application programming interface (API) is provided to abstract metadata from an incoming business object and provide it to an adapter for processing. The metadata API is configured to operate on multiple metadata formats such as SDO and JavaBean such that the adapter receives the metadata from the metadata API in a common format that is compatible with the adapter. In this manner, the multiple metadata formats may be plugably used with the adapter.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250590",
	"publication_date": "2012-08-21",
	"application_number": "11777744",
	"application_date": "2007-07-13",
	"tags": null,
	"slug": "apparatus-system-and-method-for-seamless-multiple-format-metadata-abstraction",
	"match_type": "abstract"
},
{
	"name": "Automated interface generation for computer programs in different environments",
	"summary": "",
	"abstract": "Automated interface generation for computer programs operating in different environments is provided. An automated interface generation system, method, computer program product and article of manufacture is provided comprising an import utility and a runtime environment. The import utility imports a COBOL IMS transaction source file, parses the specified input and output message records, and generates an application programming interface. The application programming interface operates with the runtime environment to take the data values from the language of a different environment and translate them to a formatted IMS input message. This format is derived from the definition of the input message record in the COBOL IMS transaction source file. After the IMS transaction has executed, the resulting IMS output message is translated back to the data values of the language of the different environment, said values including the results of the transaction. The translation step handles data conversion between different code pages, machine architectures, and program semantics, and handles the dynamic nature of IMS messages.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "06983468",
	"publication_date": "2006-01-03",
	"application_number": "09574409",
	"application_date": "2000-05-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Automated validation of peripheral director hardware",
	"summary": "",
	"abstract": "A system and method of automating the validation and control of peripheral director hardware in a switched fabric network. A system is provided that includes a script language processor for interpreting high-level statements and generating command functions understood by an application programming interface (API) associated with the switched fabric network, wherein the command functions include a query switch command, a query interface switch command, a write switch command, and a display result command; and a system for generating an output in response to a set of command functions submitted to the switched fabric network.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08015274",
	"publication_date": "2011-09-06",
	"application_number": "11685451",
	"application_date": "2007-03-13",
	"tags": null,
	"slug": "automated-validation-of-peripheral-director-hardware",
	"match_type": "abstract"
},
{
	"name": "Automatically detecting keyboard layout in order to improve the quality of spelling suggestions",
	"summary": "",
	"abstract": "A method, system and computer program product for keyboard layout detection resulting in improving the quality of the spelling suggestions, and in another aspect, recognizing a keyboard mapping mismatch between a computer and a given remote user based on a defined finite dictionary. There is no extra Application Programming Interfaces (API) required to pass information between the text editor and a spellchecking engine in order to perform keyboard layout detection.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08219905",
	"publication_date": "2012-07-10",
	"application_number": "12272316",
	"application_date": "2008-11-17",
	"tags": null,
	"slug": "automatically-detecting-keyboard-layout-in-order-to-improve-the-quality-of-spelling-suggestions",
	"match_type": "abstract"
},
{
	"name": "Common interface to access catalog information from heterogeneous databases",
	"summary": "",
	"abstract": "Various embodiments of a method to access metadata from a plurality of data servers from a federated database management system are provided. In one embodiment, a request for metadata, from a client application, is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server, metadata describing data of a data source of that data server is retrieved in accordance with the application request. The retrieved metadata from each of the data servers is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided. In another embodiment, for each data server, a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata request for metadata for each data server.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07469248",
	"publication_date": "2008-12-23",
	"application_number": "11131792",
	"application_date": "2005-05-17",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Common interface to access catalog information from heterogeneous databases",
	"summary": "",
	"abstract": "Various embodiments of a system and computer program product to access metadata from a plurality of data servers from a federated database management system are provided. In one embodiment, a request for metadata, from a client application, is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server, metadata describing data of a data source of that data server is retrieved in accordance with the application request. The retrieved metadata from each of the data servers is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided. In another embodiment, for each data server, a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata request for metadata for each data server.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08051094",
	"publication_date": "2011-11-01",
	"application_number": "12249957",
	"application_date": "2008-10-12",
	"tags": null,
	"slug": "common-interface-to-access-catalog-information-from-heterogeneous-databases",
	"match_type": "abstract"
},
{
	"name": "Data server administration using a chatbot",
	"summary": "",
	"abstract": "Provided are techniques for data server administration. Under control of a chatbot in real time, a command is received from a user for administering a data server in a natural language format. It is determined whether the data server is to be contacted to process the command. In response to determining that the data server is to be contacted, session information is retrieved to identify the data server to be contacted, the command in the natural language format is converted into one or more data server administration Application Programming Interface (API) calls, the one or more data server administration API calls to the data server are issued, and information about processing of the command is provided to the user.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250192",
	"publication_date": "2012-08-21",
	"application_number": "11871927",
	"application_date": "2007-10-12",
	"tags": null,
	"slug": "data-server-administration-using-a-chatbot",
	"match_type": "abstract"
},
{
	"name": "Discovering object definition information in an integrated application environment",
	"summary": "",
	"abstract": "Provided is a method, system, and program for providing an object discovery agent (ODA) client. There is one object discovery agent (ODA) client and at least one ODA, wherein each ODA is associated with one application and includes: (i) application programming interfaces (APIs) to communicate with the associated application to discover definition information on objects maintained by the application and (ii) code to communicate with the ODA client. The ODA client communicates with one of the at least one ODA to cause the ODA to gather definition information on at least one object used by one application. The gathered object definition information is provided to an integration server to integrate the object in an environment including heterogeneous objects from different applications.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07406474",
	"publication_date": "2008-07-29",
	"application_number": "11008306",
	"application_date": "2004-12-08",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Enabling collaborative applications using Session Initiation Protocol (SIP) based Voice over Internet protocol Networks (VoIP)",
	"summary": "",
	"abstract": "A method and system for enabling voice over Internet for computer applications includes registering session initiation protocol (SIP) as a system service and providing SIP service through an application programming interface (API) to permit access to service functions by individual software applications. A SIP link is provided within a software application to permit user invocation of SIP service functions. The link may be passed as a parameter to permit external access to an invoked service function.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07376129",
	"publication_date": "2008-05-20",
	"application_number": "10695856",
	"application_date": "2003-10-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Externalized classloader information for application servers",
	"summary": "",
	"abstract": "Modules which are running outside of a first application server virtual machine (VM) are enabled to introspect into modules running inside the first VM by notifying a manageable component factory by an application module being executed by a first application server VM of a need to allow a second VM to introspect into and to load class information regarding objects already running in the first VM, wherein the first and second virtual machines are separate virtual machines; registering the already-running object class information to a manageable component server using a descriptor; and loading the registered class information by the second VM from the manageable component server, wherein a tool object or administrative object running in the second VM introspects into and loads the objects already running in the first virtual machine without use of an application programming interface.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07761862",
	"publication_date": "2010-07-20",
	"application_number": "11373567",
	"application_date": "2006-03-10",
	"tags": null,
	"slug": "externalized-classloader-information-for-application-servers",
	"match_type": "abstract"
},
{
	"name": "Generalized trace and log facility for first error data collection",
	"summary": "",
	"abstract": "A generalized trace and log facility is employed to collect data, including data associated with the first occurrence of an error. The facility provides standardized application programming interfaces to be used to collect data, print the data, and forward the data to a support team, if desired.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07757129",
	"publication_date": "2010-07-13",
	"application_number": "11694228",
	"application_date": "2007-03-30",
	"tags": null,
	"slug": "generalized-trace-and-log-facility-for-first-error-data-collection",
	"match_type": "abstract"
},
{
	"name": "Hierarchical event filtering for multiple parent event types",
	"summary": "",
	"abstract": "A technique for reducing the number of events that are transmitted by a server to a client/server application programming interface (API). At the server host, each of different event messages is associated with at least one event category in a hierarchy of event categories. Each client host sends a registration request to the server host in order to inform the host server host that the client wants to receive event messages associated with a specified event category. The server host associates the specified event category with each client host and communicates the event messages that are descendants of the specified event category, wherein the event messages may be descendants of more than one specified event category.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07493625",
	"publication_date": "2009-02-17",
	"application_number": "10869223",
	"application_date": "2004-06-16",
	"tags": null,
	"slug": "hierarchical-event-filtering-for-multiple-parent-event-types",
	"match_type": "abstract"
},
{
	"name": "Hierarchical event filtering for storage server",
	"summary": "",
	"abstract": "A technique for reducing the number of events that are transmitted by a server to a client in a client/server application programming interface (API). At the server host, each of different event messages is associated with at least one event category in a hierarchy of event categories. Each client host sends a registration request to the server host to inform the server host that the client host wants to receive only event messages that are associated with a specified event category. The server host associates the specified event category with each client host, and communicates only the event messages that are descendants of the specified event category.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07437735",
	"publication_date": "2008-10-14",
	"application_number": "10789167",
	"application_date": "2004-02-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Message formation and distribution in heterogeneous networks",
	"summary": "",
	"abstract": "A system is disclosed for communicating with a plurality of network processors, one or more of the processors having a different operating environment, includes receiving an application programming interface (API) call from a user application, the API call including a call address identifying one or more of the network processors; and accessing a memory that identifies an appropriate form for the API call for each operating environment implemented by each network processor identified by the call address; and building one or more messages including the appropriate form for the API call for the operating environment of each of the network processors to receive any particular message.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07940754",
	"publication_date": "2011-05-10",
	"application_number": "12048528",
	"application_date": "2008-03-14",
	"tags": null,
	"slug": "message-formation-and-distribution-in-heterogeneous-networks",
	"match_type": "abstract"
},
{
	"name": "Message system and method",
	"summary": "",
	"abstract": "A method and system for bridging services is provided. The method and system includes retrieving at last one message from a first messaging tool using at least one processing thread to retrieve message objects from a messaging queue of the first messaging tool. This aspect of the invention further includes executing a preprocessing on the retrieved message object using a predefined application programming interface (API) and placing the preprocessed message on an API of a second messaging tool. A computer program product comprising a computer useable medium including a computer readable program which, when executed causes the computer to implement the steps of the method.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07853956",
	"publication_date": "2010-12-14",
	"application_number": "11117449",
	"application_date": "2005-04-29",
	"tags": null,
	"slug": "message-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for bridging service for standard object identifier based protocols",
	"summary": "",
	"abstract": "A method and apparatus is presented for maintaining a logical composite repository of Object Identifier (OID) tree structures on a server in a distributed data processing system. Each OID subtree repository has been programmed to interface with an application programming interface (API) associated with an OID abstraction layer for the logical composite repository. An OID subtree structure can be added to the logical composite repository resulting in registration with the OID abstraction layer. Any query from a requester in the distributed data processing system about an object contained in the logical composite repository associated with the server is processed by the OID abstraction layer. The query must be in a protocol, such as SNMP, LDAP, and CIM/XML, recognized by the OID abstraction layer. The repository associated with the object of the query is determined from the OID abstraction layer registry. The query is formatted to be consistent with the API associated with the OID abstraction layer and sent to the repository associated with the object. When a reply is received from the repository, it is formatted in the protocol of the original query and sent to the requester in the distributed data processing system.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07272836",
	"publication_date": "2007-09-18",
	"application_number": "09583411",
	"application_date": "2000-05-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for encoding binary data as a zero terminated string",
	"summary": "",
	"abstract": "Passing input strings through an application programming interface between functions that take null byte terminated strings as arguments, where at least some of said input strings contain null bytes internally. This is accomplished by storing the positions of the null bytes relative to the start of the block and storing the non-null bytes in their relative order to prevent said internal null strings from being treated as terminal null strings.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07280055",
	"publication_date": "2007-10-09",
	"application_number": "11112776",
	"application_date": "2005-04-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for determining application availability",
	"summary": "",
	"abstract": "A method and system for determining an availability of an application. Pairs of processes utilized by the application are determined. Each pair includes consumer and provider processes. For each pair, a diagnostic transaction is initiated by the pair's consumer process, utilizes an application programming interface (API) to open a connection between the consumer process and provider process and to request access to a resource managed by the provider process. Any communication between a pair's consumer and provider processes uses the same API. The diagnostic transaction is completed by receiving or not receiving, at the consumer process, a response from the pair's provider process where the response provides the requested access. Receipt of the response designates the provider process as available to the application, whereas non-receipt of the response designates the provider process as unavailable. If responses are received for all diagnostic transactions, the application is available.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07587453",
	"publication_date": "2009-09-08",
	"application_number": "11326559",
	"application_date": "2006-01-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for managing tables that are used by network processors to control traffic through a network",
	"summary": "",
	"abstract": "A method for managing tables that are used by network processors to control network traffic through a network. The method comprises including a first table management software application in a first network processor, in which the first table management software is dedicated to managing only tables associated with the first network processor; including a second table management software application in a second network processor, in which the second table management software application is dedicated to managing only tables associated with the second network processor; and including a table management control application in a host processor, in which the table management control application is configured to respectively manage the tables associated with the first network processor and the tables associated with the second network processor through the first table management software application and the second table management software application through a plurality of generic application programming interfaces (APIs).",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07865912",
	"publication_date": "2011-01-04",
	"application_number": "11942657",
	"application_date": "2007-11-19",
	"tags": null,
	"slug": "method-and-system-for-managing-tables-that-are-used-by-network-processors-to-control-traffic-through-a-network",
	"match_type": "abstract"
},
{
	"name": "Method for controlling security function execution with a flexible, extendable, and non-forgable block",
	"summary": "",
	"abstract": "A method, article, and system for providing an effective implementation of data structures, and application programming interface (API) functions that allow secure execution of functions behind a secure boundary. The controlling mechanism is a flexible, extendable, and non-forgeable block that details how values and parameters behind the secure boundary can be changed. The invention allows for one entity to execute a security function that will normally require extensive authorizations or dual or multiple control. The method and system comprise instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines security policies that are permitted when an application program employs the trusted block in APIs. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07779258",
	"publication_date": "2010-08-17",
	"application_number": "11534236",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "method-for-controlling-security-function-execution-with-a-flexible-extendable-and-nonforgable-block",
	"match_type": "abstract"
},
{
	"name": "Method for improved key management for ATMs and other remote devices",
	"summary": "",
	"abstract": "A method, article, and system for providing an effective implementation of a data structure comprising instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface (API) functions to generate or export symmetric cryptographic keys. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways or with unintended keys.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07908474",
	"publication_date": "2011-03-15",
	"application_number": "11534232",
	"application_date": "2006-09-22",
	"tags": null,
	"slug": "method-for-improved-key-management-for-atms-and-other-remote-devices",
	"match_type": "abstract"
},
{
	"name": "Method to precondition a storage controller for automated data collection based on host input",
	"summary": "",
	"abstract": "An FTDC interface with the host or user. The interface can include a command application programming interface (API) or a data storage Command-Line Interface (DS CLI)/Graphical User Interface (GUI). In certain embodiments, the FTDC interface allows a host or user to customize a desired FTDC on a two-tiered system. The first tier is one in which a host/user selects, from a list of conditions, which ones, upon occurrence of those conditions, they would like the controller to perform FTDC. In the second tier a second selection is made such that for each first tier item, the host/user will select the level of FTDC (collection and offloading of logs and/or the forcing and offloading of a statesave).",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08250402",
	"publication_date": "2012-08-21",
	"application_number": "12053663",
	"application_date": "2008-03-24",
	"tags": null,
	"slug": "method-to-precondition-a-storage-controller-for-automated-data-collection-based-on-host-input",
	"match_type": "abstract"
},
{
	"name": "Method, system and program product for adapting to protocol changes",
	"summary": "",
	"abstract": "A method, system and program product for overriding existing functionality provided in an application programming interface (API) for a local protocol implementation is provided. The method includes providing an API for a local protocol implementation having a raw interface function that can be invoked by a client application to override existing functionality provided in the API. The method further includes defining for the raw interface function an array of pre-formed payload elements to be included for creating a customized protocol request message for requesting a protocol service from a server application using a remote protocol implementation different than the local protocol implementation, populating data for each element in the array defined, and invoking the raw interface function, which takes as input the array defined and inserts them, in order, behind a protocol message header of the protocol request message and sends the customized protocol request message to the server application.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07907619",
	"publication_date": "2011-03-15",
	"application_number": "11612657",
	"application_date": "2006-12-19",
	"tags": null,
	"slug": "method-system-and-program-product-for-adapting-to-protocol-changes",
	"match_type": "abstract"
},
{
	"name": "Method, system, and computer program product for implementing a web service interface",
	"summary": "",
	"abstract": "A method for using WebServices as a basis for implementing an application programming interface (API) of a high-level programming language between a service application and a client application is disclosed. Function parameters of an API function call represent a complex object structure (COS). The method includes serializing the COS into serialized payload data, encoding the serialized payload data to form a payload string that does not contain any XML-specific characters, and specifying the parameters of the API call in parts of an input message of a corresponding operation in a WSDL document. The method also includes transporting the payload string within the input message to the service application, decoding the payload string to yield the serialized payload data, and deserializing the serialized payload data to restore the COS representing the parameters of the API call. A system and computer program product for implementing the API on the basis of Web Services are also disclosed.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08245246",
	"publication_date": "2012-08-14",
	"application_number": "12206869",
	"application_date": "2008-09-09",
	"tags": null,
	"slug": "method-system-and-computer-program-product-for-implementing-a-web-service-interface",
	"match_type": "abstract"
},
{
	"name": "Method, system, and program product for monitoring message flow in a message queuing system",
	"summary": "",
	"abstract": "System, method, and computer program product for automatically monitoring message flow in a message queuing system in an asynchronous messaging network. A message queuing application programming interface appends, in a message descriptor field for recording and monitoring message flow, unique application identification keys of applications that process the message, operation codes applied to the message, and time stamps of operations applied during message processing. The keys are generated by the start-up of the applications and are filled in by each PUT and GET function of the API. After processing of the message, the entries included in the message descriptor field are monitored, and any deviation from a predefined message flow is automatically detected and reported.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07707585",
	"publication_date": "2010-04-27",
	"application_number": "11254007",
	"application_date": "2005-10-19",
	"tags": null,
	"slug": "method-system-and-program-product-for-monitoring-message-flow-in-a-message-queuing-system",
	"match_type": "abstract"
},
{
	"name": "Methods and computer programs for database structure comparison",
	"summary": "",
	"abstract": "Methods and computer programs for comparing database structures such as database schemas and descriptions of application programming interfaces are disclosed. The methods involve identifying incompatibilities between information repositories such as relational databases and byte code repositories by extracting a first database structure from a first information repository, extracting a second database structure from a second information repository, filtering relevant sections from each database structure, asymmetrically comparing the relevant sections, and identifying any incompatibilities between database schemas or byte code repositories.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07788282",
	"publication_date": "2010-08-31",
	"application_number": "10943064",
	"application_date": "2004-09-16",
	"tags": null,
	"slug": "methods-and-computer-programs-for-database-structure-comparison",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for preventing security breaches",
	"summary": "",
	"abstract": "A security payload is attached to a received binary executable file. The security payload is adapted to intercept application programming interface (API) calls to system resources from the binary executable file via export address redirection back to the security payload. Upon execution of the binary executable file, the security payload replaces system library export addresses within a process address space for the binary executable file with security monitoring stub addresses to the security payload. Upon the binary executable computer file issuing a call to a given API, the process address space directs the call to the given API back to the security payload via one of the security monitoring stub addresses that is associated with the given API. The security payload then can assess whether the call to the given API is a security breach.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08245289",
	"publication_date": "2012-08-14",
	"application_number": "11938181",
	"application_date": "2007-11-09",
	"tags": null,
	"slug": "methods-and-systems-for-preventing-security-breaches",
	"match_type": "abstract"
},
{
	"name": "Methods, systems and computer program products for CPU signaturing to aide in performance analysis",
	"summary": "",
	"abstract": "Methods, systems and computer program products for CPU signaturing to aide in performance analysis. Exemplary embodiments include a performance analysis method including identifying a workload having one or more testcases, assigning a CPU signature to each of the one or more testcases, calling a CPU signature application programming interface that toggles the CPU to generate the CPU signature, passing four parameters to the CPU signature application programming interface, prior to running each of the one or more testcases of the workload, generating the CPU signature, dynamically determining a run order of the one or more testcases at a run time of the workload and reviewing performance data during the running of each of the one or more testcases, each of the one or more testcases being identifiable by its respective CPU signature.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07823018",
	"publication_date": "2010-10-26",
	"application_number": "12120955",
	"application_date": "2008-05-15",
	"tags": null,
	"slug": "methods-systems-and-computer-program-products-for-cpu-signaturing-to-aide-in-performance-analysis",
	"match_type": "abstract"
},
{
	"name": "Processing event notifications with an event sink",
	"summary": "",
	"abstract": "Applications generating events, and system facilities generating events, send notifications of the events to a system event sink. The event sink is preferably associated with an operating system, and provides an application programming interface for registering listeners. (In one alternative approach, the event sink operates as a centrally-accessible or network-accessible entity, where it may concurrently interact with more than one client.) Upon receiving a notification of an event, the event sink forwards the notification to any registered listeners. Optionally, filters may be used to specify criteria to be met before a notification is forwarded to the listener. An event does not rely a particular application for displaying the event to an end user. As one example, notification of a newly-arrived e-mail message might be presented in a chat window of an instant messaging client.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07937714",
	"publication_date": "2011-05-03",
	"application_number": "11924575",
	"application_date": "2007-10-25",
	"tags": null,
	"slug": "processing-event-notifications-with-an-event-sink",
	"match_type": "abstract"
},
{
	"name": "Processing event notifications with an event sink",
	"summary": "",
	"abstract": "Applications generating events, and system facilities generating events, send notifications of the events to a system event sink. The event sink is preferably associated with an operating system, and provides an application programming interface for registering listeners. (In one alternative approach, the event sink operates as a centrally-accessible or network-accessible entity, where it may concurrently interact with more than one client.) Upon receiving a notification of an event, the event sink forwards the notification to any registered listeners. Optionally, filters may be used to specify criteria to be met before a notification is forwarded to the listener. An event does not rely on a particular application for displaying the event to an end user. As one example, notification of a newly-arrived e-mail message might be presented in a chat window of an instant messaging client.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08117304",
	"publication_date": "2012-02-14",
	"application_number": "11924583",
	"application_date": "2007-10-25",
	"tags": null,
	"slug": "processing-event-notifications-with-an-event-sink",
	"match_type": "abstract"
},
{
	"name": "Processing messages in a message queueing system",
	"summary": "",
	"abstract": "A system, method, and a computer program product for processing messages in a message queuing system includes an application repository, a message store, and a queue-less application programming interface in each message queuing system. The application repositories may store application identification data provided by applications. The application programming interfaces may put messages to and get messages from the message queuing systems, and provide with each connect and put request application identification data.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07716678",
	"publication_date": "2010-05-11",
	"application_number": "11290080",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "processing-messages-in-a-message-queueing-system",
	"match_type": "abstract"
},
{
	"name": "Programming portal applications",
	"summary": "",
	"abstract": "Provided is a method for enabling dynamic graphical interfacing with a server from a client. A method includes receiving at a portlet, a plurality of user-generated drawing location identifiers, mapping the user-generated drawing location identifiers to an Applet function via an Applet application programming interface (API), and generating a drawing using a drawing method with the user-generated drawing location identifiers. After the drawing is generated a drawing is returned to a user associated with the user-generated drawing location identifiers. The user-generated drawing location identifiers can be one or more of mouse clicks, taps, and tablet PC drawing indications via a pen. The portlet enables a graphical interface via the Applet API and the Applet API is stored in a Java Archive file (JAR). The JAR file enables multiple users to view the drawing without requiring local files.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07509659",
	"publication_date": "2009-03-24",
	"application_number": "10992523",
	"application_date": "2004-11-18",
	"tags": null,
	"slug": "programming-portal-applications",
	"match_type": "abstract"
},
{
	"name": "Query framework system and method",
	"summary": "",
	"abstract": "A query framework system is provided. The query framework system comprises a query framework service for consuming a query and returning a result set, a provider application programming interface for defining a consistent application programming interface for providers, one or more providers incorporating query processing logic, and a configuration repository for storing the list of the providers in the query framework system and their properties.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07716212",
	"publication_date": "2010-05-11",
	"application_number": "11473375",
	"application_date": "2006-06-22",
	"tags": null,
	"slug": "query-framework-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Secure communication system and method of operation for conducting electronic commerce using remote vault agents interacting with a vault controller",
	"summary": "",
	"abstract": "A secure end-to-end communications system provides end users access to vault-based custom applications of an organization for purposes of conducting electronic commerce. The system includes a web-based vault controller running an application, e.g. a registrations application in a vault cryptographically linked to a database and a Certificate Management System (CMS) for generating digital certificates, and at least one remote vault agent coupled to the vault controller for providing vault-based custom applications to end users. An X.500 directory is coupled to the CMS and cryptographically linked to the remote vault agents for storing end user data. The remote vault agent is an application which comprises a collection of Application Programming Interfaces (APIs) which provide a secure interface to the vault controller; a Lightweight Data Access Protocol (LDAP) used to access the X.500 directory; a secure depositor coupled to vault-based custom applications of an organization. The secure depositor includes APIs to perform cryptographic functions in passing communications between vaults used by the vault agent and vaults used by the vault controller or vaults used by other vault agent applications and a secure depositor library which uses functions in the LDAP to access the X.500 directory. The remote vault agent accesses the web based vault controller on a non-web basis to enable remote custom applications to communicate securely with vault-based applications, such as a registration application that administers digital certificates.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "06892300",
	"publication_date": "2005-05-10",
	"application_number": "10338364",
	"application_date": "2003-01-08",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Secure shell protocol access control",
	"summary": "",
	"abstract": "An enhanced Secure Shell (SSH) protocol having fine-grained access security policy management and enforcement. Via an authorization application programming interface (aznAPI), remote user protocol connections and sessions may be added to the protected object space of a policy management system so that a system administrator may set permissions to access or use a particular secured system resource for each user, and by groups of users. Thus, when a user accesses the system by Secure Shell, rather than having full, unlimited use and access to system resources once authenticated, the user is granted permission to access only the system resources allowed in the security policy or policies.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "06851113",
	"publication_date": "2005-02-01",
	"application_number": "09895120",
	"application_date": "2001-06-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Shared credential store",
	"summary": "",
	"abstract": "A personal credential store that aggregates a number of physical credential stores beneath an application programming interface (API) and offers tag-based credential look-up. The API of the disclosed system runs on the user's client system, and effectively hides the underlying credential store types from applications using it. The tags used to look up credentials through the API may advantageously include or consist of unique identifiers indicating the functional purpose of the desired credential. The types of physical credential store aggregated together under the disclosed API may include a local credential store, a network-resident private credential store that may be shared across multiple client systems operated by a single user, and a network-resident shareable credential store, that may be used by processes acting on behalf of the user, and/or shared by multiple users.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08015596",
	"publication_date": "2011-09-06",
	"application_number": "10878166",
	"application_date": "2004-06-28",
	"tags": null,
	"slug": "shared-credential-store",
	"match_type": "abstract"
},
{
	"name": "Storage and retrieval of variable data",
	"summary": "",
	"abstract": "Methods and apparatus, including computer program products, implementing and using techniques for managing data items. A data store includes at least two copies of each data item. Each copy of a data item is used for a unique set of operations performed on the data item. An application programming interface receives a request from a consumer to perform an operation on a data item in the data store. The application programming interface selects, based on the received request, which copy of the data item is to be used when performing the operation.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08126841",
	"publication_date": "2012-02-28",
	"application_number": "12034475",
	"application_date": "2008-02-20",
	"tags": null,
	"slug": "storage-and-retrieval-of-variable-data",
	"match_type": "abstract"
},
{
	"name": "Storage manager for virtual machines with virtual storage",
	"summary": "",
	"abstract": "A storage manager connects containers of virtual machine (VM) images and virtual storage device data within hosts. The storage management provides a set of northbound application programming interfaces (APIs) that allow configuration of images associated with VM images and virtual storage devices provided to the operating systems and applications within virtual machine images. The northbound APIs, include methods for creating a virtual storage container that contains storage for the VM instance and also at least one virtual storage device to be provided to an operating system executed by the VM, a method for causing an attach of the virtual storage container to the host and a method for causing a deployment of the virtual storage device within the host. A set of southbound APIs are provided by the host, including at least a method that creates virtual storage devices and a method that attaches virtual storage devices to the host.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08434081",
	"publication_date": "2013-04-30",
	"application_number": "12829714",
	"application_date": "2010-07-02",
	"tags": null,
	"slug": "storage-manager-for-virtual-machines-with-virtual-storage",
	"match_type": "abstract"
},
{
	"name": "Supporting multiple security mechanisms in a database driver",
	"summary": "",
	"abstract": "A method for connecting a client to a database server are provided. The method provide for providing a generic interface, the generic interface being operable to interoperate with one or more non-GSSAPI (Generic Security Services Application Programming Interface) compliant security mechanisms, providing a set of specialized interfaces, the set of specialized interface being operable to interoperate with one or more GSSAPI compliant security mechanisms, and establishing a connection between a client and a database server using the generic interface or the set of specialized interfaces depending on a security mechanism used by the client. The one or more non-GSSAPI compliant security mechanisms and the one or more GSSAPI compliant security mechanisms may be predefined or user-defined.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07761468",
	"publication_date": "2010-07-20",
	"application_number": "11538518",
	"application_date": "2006-10-04",
	"tags": null,
	"slug": "supporting-multiple-security-mechanisms-in-a-database-driver",
	"match_type": "abstract"
},
{
	"name": "System and apparatus to ensure a low-latency read of log records from a database management system (u201cDBMSu201d)",
	"summary": "",
	"abstract": "A system and method to ensure a low-latency read of log records from a Database Management System (u201cDBMSu201d) in asynchronous log-based database replication capture from a blocking log read Application Programming Interface (u201cAPIu201d). The system may include a replication server with a log read module to initialize a log read thread. The reading module of the log read thread may read a predefined number of DBMS log records. A log flush module of the log flush thread may be executed by the log read thread and waits for a read complete notification. The update module, in response to a log flush thread time out, may also generate a plurality of loggable transactions such that a number of log records in an internal API log satisfies a DBMS threshold and unblocks the DBMS API. Therefore, the latency time may be constant, low, and predictable ensuring an accurate replication capture.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07890455",
	"publication_date": "2011-02-15",
	"application_number": "12128488",
	"application_date": "2008-05-28",
	"tags": null,
	"slug": "system-and-apparatus-to-ensure-a-lowlatency-read-of-log-records-from-a-database-management-system-dbms",
	"match_type": "abstract"
},
{
	"name": "System and method for dynamic runtime partitioning of model-view-controller applications",
	"summary": "",
	"abstract": "Methods and apparatus for dynamic runtime partitioning of network-based client/server applications using a Model-View-Controller pattern are provided. Such dynamic partitioning is accomplished by requiring that the application specify: (i) that access to the Model be done through an application programming interface (API) which allows the system runtime to dynamically allocate and access Model storage on the client and/or server; and (ii) that access to the View be done through an API which allows the system runtime to dynamically allocate and access View components on the client and/or server. This enables applications written and tested in such a manner (referred to herein as the u201ccanonical formu201d) to execute in a non-distributed mode or in a dynamically partitioned mode in which client/server issues are not a factor. This greatly facilitates development of the application. Furthermore, by specifying View components in an abstract, or u201cplatform-independentu201d API, the application can run on multiple client devices without modifying the application. All that is required is a platform-specific implementation of the View components' API. Client platforms for the application can thus include, for example, applets, HTML browsers, and PDAs.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "06950850",
	"publication_date": "2005-09-27",
	"application_number": "09703187",
	"application_date": "2000-10-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for real-time detection of computer system files intrusion",
	"summary": "",
	"abstract": "A system and method for real-time detection of computer system files intrusion consists in taking advantage of an existing Application Programming Interface (API) dedicated to the creation, modification and deletion of files in order to detect in real-time illegal modification of any vital file or directory of a computer system.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07318163",
	"publication_date": "2008-01-08",
	"application_number": "10753180",
	"application_date": "2004-01-06",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System for portion of a day out of office notification",
	"summary": "",
	"abstract": "A system for generating an electronic notice programmed to display a portion of a day out of the office notice. The system including an application server node configured to execute a personal information management application. An application programming interface is programmatically associated with the personal information management application for allowing requests for services to be transmitted to the personal information management application. At least one of a rich client delegate and a remote EJB housing the API, the rich client delegate and the remote EJB being programmatically associated with the application server node and the personal information management application. The rich client delegate being configured to receive and transmit data to the API via a network. At least one client node is operably associated with the application server node via the network. Each client node having a user interface (UI) that is programmatically associated with the personal information management application.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08095941",
	"publication_date": "2012-01-10",
	"application_number": "11470677",
	"application_date": "2006-09-07",
	"tags": null,
	"slug": "system-for-portion-of-a-day-out-of-office-notification",
	"match_type": "abstract"
},
{
	"name": "Systems, methods and computer products for database cluster modeling",
	"summary": "",
	"abstract": "Generating in a computer system and deploying a data model of a plurality of database cluster configuration availability solutions over a computer network by creating a database cluster configuration modeling specification including objects contained in a unified model language diagram providing a definition of a database cluster configuration data model. Creating the database cluster configuration data model using the database cluster configuration modeling specification and upon receiving signals from a graphical user interface or from XML batch data files or from application programming interfaces, indicating the definition of the cluster configuration model. After creating the graphical database cluster configuration data model, constraints that specify a valid logical configuration are validated and the solution is transformed into data understandable by database cluster manager software applications and then transmitted over a network to multiple cluster manager targets to be incorporated as database cluster configuration availability solutions.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07730091",
	"publication_date": "2010-06-01",
	"application_number": "11848783",
	"application_date": "2007-08-31",
	"tags": null,
	"slug": "systems-methods-and-computer-products-for-database-cluster-modeling",
	"match_type": "abstract"
},
{
	"name": "User registry adapter framework",
	"summary": "",
	"abstract": "A method, computer program product, and data processing system, with which a unified security policy may be implemented using existing application components with disparate security mechanisms and user registries is disclosed. The present invention provides a generic application programming interface (API) that forms a framework for creating registry adapters. Registry adapters allow a policy director (an item of software for imposing a sitewide security policy) to operate with new or unfamiliar registry types by acting as a drop-in translator for converting generic registry-access commands into operations specific to the particular registry in question.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07146637",
	"publication_date": "2006-12-05",
	"application_number": "09895978",
	"application_date": "2001-06-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Virtual multidimensional datasets for enterprise software systems",
	"summary": "",
	"abstract": "Techniques are described for specifying virtual datasets within an enterprise software system. A computer-implemented system, for example, includes an enterprise planning system and a computing device coupled to the enterprise planning system via a network connection. The computing device includes an object store that stores a dataset, an application programming interface (API) that defines an operation for specifying the virtual dataset from the dataset, and an object model that stores a virtual dataset to the object store in response to receiving the operation defined by the API. The computing device further includes a plurality of applications that utilize the virtual dataset for a further operation defined by the API without resolving the virtual dataset. Because virtual dataset may be utilized without first resolving them, the virtual datasets may require less storage space within a memory, may automatically remain synchronous with the underlying dataset, and may quickly layer to more readily perform complicated operations.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07747562",
	"publication_date": "2010-06-29",
	"application_number": "11564011",
	"application_date": "2006-11-28",
	"tags": null,
	"slug": "virtual-multidimensional-datasets-for-enterprise-software-systems",
	"match_type": "abstract"
},
{
	"name": "Web service interfaces used in providing a billing service",
	"summary": "",
	"abstract": "A web service interface defined for a billing service, comprising a plurality of application programming interfaces, where each application programming interface is associated with a billing function provided by the billing service, where each of the application programming interfaces can be implemented such that the billing function associated therewith is performed after a web service invocation that commands performance of that billing function is received by the web service interface. The web service interface is used to provide the billing service as a web service to computing applications in a distributed network environment.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08195566",
	"publication_date": "2012-06-05",
	"application_number": "10674778",
	"application_date": "2003-09-30",
	"tags": null,
	"slug": "web-service-interfaces-used-in-providing-a-billing-service",
	"match_type": "abstract"
},
{
	"name": "Architecture, system and method for an RTP streaming system",
	"summary": "",
	"abstract": "An architecture, system and method for an RTP streaming system is disclosed. In one embodiment, a method includes developing multiple standalone modules, developing application programming interfaces associated with the standalone modules, and tying together the standalone modules to form a subsystem associated with a streaming application and with a network. The method further includes integrating standalone modules including an RTP module, an RTCP module and a payload interface, associated with any one of a server mode and a client mode. The method also includes managing a streaming session associated with media streams via an RTPSS manager, adding the media streams to a stream manager. For each media stream of the streaming session: the method includes performing packetization services in the server mode and de-packetization services in the client mode, and performing server-mode related services in the server mode and client-mode related services in the client mode.",
	"url": null,
	"owner": "Ittiam Systems (P) Ltd.",
	"publication_number": "08307118",
	"publication_date": "2012-11-06",
	"application_number": "12018801",
	"application_date": "2008-01-24",
	"tags": null,
	"slug": "architecture-system-and-method-for-an-rtp-streaming-system",
	"match_type": "abstract"
},
{
	"name": "System and method for connecting, configuring and testing wireless devices and applications",
	"summary": "",
	"abstract": "A system, apparatus, and method are provided for connecting, configuring and testing wireless devices and applications. For example, one embodiment of wireless device for operation in a wireless network comprises a processor, a wireless module including a radio receiver and transmitter unit coupled to the processor, a graphical user interface (GUI) coupled to the processor, and a Connection Manager Module (CMM) including an Application Programming Interface (API) module, a Rules Engine Module, and a Rules Set Module, wherein the CMM manages a connection to a wireless network.",
	"url": null,
	"owner": "Jasper Technologies, Inc.",
	"publication_number": "08937910",
	"publication_date": "2015-01-20",
	"application_number": "14477614",
	"application_date": "2014-09-04",
	"tags": null,
	"slug": "system-and-method-for-connecting-configuring-and-testing-wireless-devices-and-applications",
	"match_type": "abstract"
},
{
	"name": "Clustered network acceleration devices having shared cache",
	"summary": "",
	"abstract": "A network acceleration device provides application programming interface (API) that facilitates the sharing of cache resources among multiple network acceleration devices, thereby allowing the network acceleration devices to be clustered and share a common cache of network content. This clustered approach may advantageously allow clients serviced by one network acceleration device to benefit from previous network access requests issued by clients serviced by a different network acceleration device of the cluster.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07979509",
	"publication_date": "2011-07-12",
	"application_number": "11227979",
	"application_date": "2005-09-15",
	"tags": null,
	"slug": "clustered-network-acceleration-devices-having-shared-cache",
	"match_type": "abstract"
},
{
	"name": "Multiple virtualized operating environments within a VPN appliance",
	"summary": "",
	"abstract": "A secure socket layer virtual private network (SSL VPN) network appliance includes a set of virtual systems having respective context information. Each of the virtual systems represents a VPN for a different subscriber network. The network appliance includes a network interface to receive a first network communication associated with a first one of the virtual systems. In response to the network communication, the SSL VPN network appliance sets a context identifier that identifies the first one of the virtual systems. The network appliance further comprises a set of VPN software processes executing on the network appliance to process the first network communication, wherein the set of VPN software processes generate data access requests. A configuration access application programming interface (API) dynamically directs the data access requests from the VPN software processes to the first one of the virtual systems based on the context identifier.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07961722",
	"publication_date": "2011-06-14",
	"application_number": "11369714",
	"application_date": "2006-03-07",
	"tags": null,
	"slug": "multiple-virtualized-operating-environments-within-a-vpn-appliance",
	"match_type": "abstract"
},
{
	"name": "Network management interface with selective rendering of output",
	"summary": "",
	"abstract": "A network router management interface offers two different presentation modes for viewing configuration and operational information encoded in extensible markup language output obtained from a network router. The network router management interface provides an application programming interface (API) that permits client applications to formulate configuration and operational requests according to an extensible markup language, such as XML. In response to the configuration and operational requests submitted by a client application, the router produces XML output. On a selective basis, the user may elect to view or archive the XML output in either a rendered or unrendered format. In this manner, clients such as network administrators, installation technicians and applications developers can view raw XML output on a selective basis for use in development and debugging.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07054901",
	"publication_date": "2006-05-30",
	"application_number": "09871046",
	"application_date": "2001-05-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Scalable route resolution",
	"summary": "",
	"abstract": "A router comprises a route resolution module to maintain routing information in accordance with a topology of a network, and an indirect next hop manager to maintain indirect next hop data that associates protocol next hops with forwarding next hops. The route resolution module invokes an application programming interface (API) of the indirect next hop manager for associating and disassociating protocol next hops and forwarding next hops. In response to a network event, the route resolution module can modify the indirect next hop data to reduce the time and resources necessary to perform route resolution.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07184437",
	"publication_date": "2007-02-27",
	"application_number": "10197922",
	"application_date": "2002-07-17",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Scalable route resolution",
	"summary": "",
	"abstract": "A router comprises a route resolution module to maintain routing information in accordance with a topology of a network, and an indirect next hop manager to maintain indirect next hop data that associates protocol next hops with forwarding next hops. The route resolution module invokes an application programming interface (API) of the indirect next hop manager for associating and disassociating protocol next hops and forwarding next hops. In response to a network event, the route resolution module can modify the indirect next hop data to reduce the time and resources necessary to perform route resolution.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "08014293",
	"publication_date": "2011-09-06",
	"application_number": "12820962",
	"application_date": "2010-06-22",
	"tags": null,
	"slug": "scalable-route-resolution",
	"match_type": "abstract"
},
{
	"name": "Scalable route resolution",
	"summary": "",
	"abstract": "A router comprises a route resolution module to maintain routing information in accordance with a topology of a network, and an indirect next hop manager to maintain indirect next hop data that associates protocol next hops with forwarding next hops. The route resolution module invokes an application programming interface (API) of the indirect next hop manager for associating and disassociating protocol next hops and forwarding next hops. In response to a network event, the route resolution module can modify the indirect next hop data to reduce the time and resources necessary to perform route resolution.",
	"url": null,
	"owner": "Juniper Networks, Inc.",
	"publication_number": "07746790",
	"publication_date": "2010-06-29",
	"application_number": "11670272",
	"application_date": "2007-02-01",
	"tags": null,
	"slug": "scalable-route-resolution",
	"match_type": "abstract"
},
{
	"name": "Removable card system with downloadable agent for communicating with a digital television receiver or other host device",
	"summary": "",
	"abstract": "A removable card is adapted for insertion into a corresponding receptacle of a host device, and includes a processor for running at least one application. An agent program is downloadable from the removable card to the host device. The agent program runs on a processor of the host device and controls communication between the application running on the processor of the removable card and at least one application running on the processor of the host device. A different agent program may be downloaded from the card to the host device for each of the applications running on the removable card processor, and each such agent program controls communications between its corresponding removable card application and one or more application programming interfaces (APIs) of applications running on the host device processor.",
	"url": null,
	"owner": "Koninklijke Philips Electronics N.V.",
	"publication_number": "07231411",
	"publication_date": "2007-06-12",
	"application_number": "09396565",
	"application_date": "1999-09-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Software support for virtual machine interpreter (VMI) acceleration hardware",
	"summary": "",
	"abstract": "A system and method for processing virtual machine instructions which supports the software trap methodology. An application programming interface (API) prescribes additional functionality for software traps that remove the processing of recursive virtual machine instructions from virtual machine hardware and instead process recursive virtual machine instructions using software. The additional functionality includes the configuration of a context for processing recursive virtual machine instructions, which enables the virtual machine instructions to access CPU registers to retrieve and modify the values of variables as required, the release of the configured context when processing of recursive virtual machine instructions is completed, and the return of control to a virtual machine for processing non-recursive virtual machine instructions.",
	"url": null,
	"owner": "Koninklijke Philips Electronics N.V.",
	"publication_number": "07210140",
	"publication_date": "2007-04-24",
	"application_number": "10247913",
	"application_date": "2002-09-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for displaying information on the screen of a user interface device under the control of a digital audio playback device",
	"summary": "",
	"abstract": "A digital audio playback device (DAPD) includes: 1) an external interface for coupling to a connected processing system that executes a user interface application program that accesses and controls the digital audio playback device via the external interface; 2) a memory coupled to the external interface for storing a reverse DAPD application programming interface (API); and 3) a processor coupled to the memory and the external interface for executing the reverse DAPD API. The reverse DAPD API causes the processor to access and control a user interface operated by the user interface application program displayed on a monitor screen of the connected processing system.",
	"url": null,
	"owner": "Koninklijke Philips Electronics N.V.",
	"publication_number": "07895610",
	"publication_date": "2011-02-22",
	"application_number": "09691334",
	"application_date": "2000-10-18",
	"tags": null,
	"slug": "system-and-method-for-displaying-information-on-the-screen-of-a-user-interface-device-under-the-control-of-a-digital-audio-playback-device",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for marking code for data versioning",
	"summary": "",
	"abstract": "A method, apparatus, and computer instructions for marking data versioning for code. Responsive to receiving an application programming interface call, a first marking statement in the code and a second marking statement are inserted in the code. A portion of code between the first marking statement and the second marking statement forms a marked section of code. A change made in data in an object caused by execution of the marked portion of code is detected. The detected change is tracked in manner such that the object may be restored to a prior state.",
	"url": null,
	"owner": "Lenovo (Singapore) Pte Ltd.",
	"publication_number": "07565645",
	"publication_date": "2009-07-21",
	"application_number": "11037322",
	"application_date": "2005-01-18",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Unified transportation payment system",
	"summary": "",
	"abstract": "Embodiments of the present invention relate to an electronic payment system and more particularly to a unified transportation payment system. In one embodiment, a passenger uses a card which has been set up for use within the transportation system to pay transportation costs. The card contains data including information representing a monetary value. The passenger uses the card at a card reader located at the transportation center. The card reader includes an application programming interface (API) which receives the data read from the card including information representing the monetary value stored on the card. The monetary value is adjusted by assessing an amount corresponding to a value associated with the transaction.",
	"url": null,
	"owner": "LG CNS Co., Ltd.",
	"publication_number": "08733645",
	"publication_date": "2014-05-27",
	"application_number": "13283872",
	"application_date": "2011-10-28",
	"tags": null,
	"slug": "unified-transportation-payment-system",
	"match_type": "abstract"
},
{
	"name": "Digital broadcasting system and method of processing data in digital broadcasting system",
	"summary": "",
	"abstract": "A method is provided for controlling a management server that is connected to a DTV through an IP connection, wherein the DTV is located in one independent space among a plurality of independent spaces physically separated from one another. The method including generating a message file including an Application Programming Interfaces (API) command and a parameter related to a display condition, accessing an IP address of a DTV serving as a destination of the generated message file, transmitting, if the accessing is successfully achieved, the generated message file to the DTV having the accessed IP address and receiving information for identifying whether the message file is successfully processed from the DTV.",
	"url": null,
	"owner": "LG Electronics Inc.",
	"publication_number": "08374180",
	"publication_date": "2013-02-12",
	"application_number": "12605782",
	"application_date": "2009-10-26",
	"tags": null,
	"slug": "digital-broadcasting-system-and-method-of-processing-data-in-digital-broadcasting-system",
	"match_type": "abstract"
},
{
	"name": "Record media written with data structure for recognizing a user and method for recognizing a user",
	"summary": "",
	"abstract": "The present invention relates to a record media written with a data structure used in recognizing specific users in hardware such as a robot, etc., a method for recognizing a user by using a data structure written in the record media, and a user identification database access method for the user identification software component application programming interface (API) and an error handling method in the user identification software component API. Among the user identification elements, in particular, the present invention relates to a method for building a database of image data for the user's clothes, and a performance evaluation of a vision-based recognizer, which is means for recognizing the user's image information for the clothes.",
	"url": null,
	"owner": "LG Electronics Inc.",
	"publication_number": "07890522",
	"publication_date": "2011-02-15",
	"application_number": "11594930",
	"application_date": "2006-11-09",
	"tags": null,
	"slug": "record-media-written-with-data-structure-for-recognizing-a-user-and-method-for-recognizing-a-user",
	"match_type": "abstract"
},
{
	"name": "Inter-domain network management system for multi-layer networks",
	"summary": "",
	"abstract": "A network management system for a multi-layer network having multiple architectural or technological domains includes an inter-domain configuration manager arranged between a set of one or more network service management applications and a set of network element domain managers, each of the domain managers being associated with a particular domain of the multi-layer network. The configuration manager implements network service design and provisioning functions across the domains of the network in conjunction with stored connectivity information characterizing the multi-layer network. The network management system further includes an inter-domain fault manager and an inter-domain capacity manager, which provide respective fault management and transport capacity management functions across the domains of the multi-layer network. The inter-domain configuration manager, inter-domain fault manager and inter-domain capacity manager may be interfaced to the set of network service management applications and the set of network element domain managers through corresponding published Common Object Request Broker Architecture (CORBA) Application Programming Interfaces (APIs).",
	"url": null,
	"owner": "Lucent Technologies Inc.",
	"publication_number": "07197546",
	"publication_date": "2007-03-27",
	"application_number": "09520133",
	"application_date": "2000-03-07",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Lighting control system and method",
	"summary": "",
	"abstract": "Lighting devices are configured to communicate with one another and with external systems. Sensors located at such lighting devices communicate with the external systems and with others of the lighting devices. Lighting is controlled to maintain safety, to drive customer traffic within a retail facility, or to conserve energy. An application programming interface provides a common mechanism for control of various lighting device types.",
	"url": null,
	"owner": "Lumetric Lighting, Inc.",
	"publication_number": "08670873",
	"publication_date": "2014-03-11",
	"application_number": "12875132",
	"application_date": "2010-09-03",
	"tags": null,
	"slug": "lighting-control-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Lighting control system and method",
	"summary": "",
	"abstract": "Lighting devices are configured to communicate with one another and with external systems. Sensors located at such lighting devices communicate with the external systems and with others of the lighting devices. Lighting is controlled to maintain safety, to drive customer traffic within a retail facility, or to conserve energy. An application programming interface provides a common mechanism for control of various lighting device types.",
	"url": null,
	"owner": "Lumetric, Inc.",
	"publication_number": "08143811",
	"publication_date": "2012-03-27",
	"application_number": "12482570",
	"application_date": "2009-06-11",
	"tags": null,
	"slug": "lighting-control-system-and-method",
	"match_type": "abstract"
},
{
	"name": "System and method for transacting purchases with a cash vendor using points",
	"summary": "",
	"abstract": "A system for permitting a participant to transact a purchase using awarded points with a vendor system which transacts purchases in currency. A loyalty program awards points to the participant. The awarded points are maintained in a point account for the participant. An application programming interface (API) interfaces with the vendor system. A program account for use in currency transactions provides the basis for the purchase with the vendor system. A graphical user interface (GUI) provides an interface between the participant and the API and for communicating with the loyalty program.",
	"url": null,
	"owner": "Maritz Inc.",
	"publication_number": "07134087",
	"publication_date": "2006-11-07",
	"application_number": "10117309",
	"application_date": "2002-04-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Format-converting device and private branch exchange system using the same, and format-converting method and memory medium storing a program to allow computer to execute the same method",
	"summary": "",
	"abstract": "A format-converting device couples a control device controlling an extension with a private branch exchange (PBX). A memory stores a converting table, which brings a first command data into correspondence with a given function and stores the first command data and the given function, a telephony application programming interface (TAPI) function and a telephony service provider interface (TSPI) function. A converting section calculates the given function based on the received first command data referring to the converting table. A first calculating section calculates the TAPI function. A second calculating section calculates the TSPI function. The first calculating section calculates based on a calculated result of the converting section. The second calculating section produces a second command data based on a calculated result of the first calculating section, where the second command data differs from the first command data. The second command data is sent to the PBX.",
	"url": null,
	"owner": "Matsushita Electric Industrial Co., Ltd.",
	"publication_number": "07010105",
	"publication_date": "2006-03-07",
	"application_number": "10098820",
	"application_date": "2002-03-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Telecommunications system having separate switch intelligence and switch fabric",
	"summary": "",
	"abstract": "The present invention is a telecommunications system having separate switch fabric and switch intelligence. The system comprises a switch fabric, a switch intelligence, and a feature processor. The switch intelligence is logically separated from the switch fabric and comprises a switch fabric proxy, a facility service, a connection manager service, and a call segment instance service. The switch fabric proxy is coupled to the switch fabric via a vendor-specific first Application Programming Interface (API). The switch fabric proxy supports a second API, which is common across all vendors, representing functions supported by the switch fabric. A facility instance, which is instantiated by a facility service using a facility model, represents the bearer and signaling facilities of a party to a call, and interacts with the switch fabric proxy via the second API to communicate with the switch fabric. The connection manager service represents the connectors for a party to a call, and interacts with the switch fabric proxy via the second API to communicate with the switch fabric. A call segment instance, which is instantiated by a call segment instance service using a call model, represents the call logic and call data for a party to a call, and interacts with the connection manager service via a third API and with the facility instance via a fourth API. The feature processor interacts with the call segment instance via a fifth API to provide the telecommunications feature.",
	"url": null,
	"owner": "MCI Communications Corporation",
	"publication_number": "RE043361",
	"publication_date": "2012-05-08",
	"application_number": "10054245",
	"application_date": "2002-01-24",
	"tags": null,
	"slug": "telecommunications-system-having-separate-switch-intelligence-and-switch-fabric",
	"match_type": "abstract"
},
{
	"name": "Multimedia interface for IP telephony",
	"summary": "",
	"abstract": "An IP telephony client initiates and manages multimedia sessions. The client includes a user interface, an application interface, and a protocol stack. The application interface provides an interface between the protocol stack and the user interface and helper applications. The protocol stack packages messages received from the application interface and parses messages received from other parties or prospective parties. The application interface converts incoming messages to appropriate application programming interfaces (APIs) and sends incoming payloads to the appropriate helper application.",
	"url": null,
	"owner": "MCI, Inc.",
	"publication_number": "06982973",
	"publication_date": "2006-01-03",
	"application_number": "10303342",
	"application_date": "2002-11-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Knowledge web",
	"summary": "",
	"abstract": "A system and method for organizing knowledge in such a way that humans can find knowledge, learn from it, and add to it as needed is disclosed. The exemplary system has four components: a knowledge base, a learning model and an associated tutor, a set of user tools, and a backend system. The invention also preferably comprises a set of application programming interfaces (APIs) that allow these components to work together, so that other people can create their own versions of each of the components. In the knowledge web a community of people with knowledge to share put knowledge in the database using the user tools. The knowledge may be in the form of documents or other media, or it may be a descriptor of a book or other physical source. Each piece of knowledge is associated with various types of meta-knowledge about what the knowledge is for, what form it is in, and so on. The information in the knowledge base can be created specifically for the knowledge base, but it can also consist of information converted from other sources, such as scientific documents, books, journals, Web pages, film, video, audio files, and course notes. The initial content of the knowledge web comprises existing curriculum materials, books and journals, and those explanatory pages that are already on the World Wide Web. These existing materials already contain most of the information, examples, problems, illustrations, even lesson plans, that the knowledge web needs. The knowledge base thus represents the core content (online documents or references to online or offline documents); the meta-knowledge that was created at the time of entry; and a number of user annotations and document metadata that accumulate over time about the usefulness of the knowledge, additional user opinions, certifications of its veracity and usefulness, commentary, and connections between various units of knowledge.",
	"url": null,
	"owner": "Metaweb Technologies, Inc.",
	"publication_number": "07502770",
	"publication_date": "2009-03-10",
	"application_number": "10474155",
	"application_date": "2002-04-10",
	"tags": null,
	"slug": "knowledge-web",
	"match_type": "abstract"
},
{
	"name": "System and method for describing and automatically managing resources",
	"summary": "",
	"abstract": "A system and method for automatically allocating resources is provided. The system includes one or more components for automatically allocating one or more resources, based at least in part on data associated with the one or more resources, the data including at least one of, type data, instance data, characteristic data, and dynamically modifiable metadata. An alternative aspect of the system provides one or more components for automatically allocating one or more resources distributed on a plurality of resource allocation servers. The one or more components for automatically allocating the one or more resources can improve utilization of the capacity of the one or more resources. In an alternative embodiment the system includes an Application Programming Interface (API) operable to configure and/or control the one or more components for automatically allocating one or more resources.",
	"url": null,
	"owner": "Microsoft Corp.",
	"publication_number": "06901446",
	"publication_date": "2005-05-31",
	"application_number": "09796284",
	"application_date": "2001-02-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Address book clearinghouse interface system and method",
	"summary": "",
	"abstract": "The present invention provides an application programming interface (u201cAPIu201d) to address book management functions for accessing and managing an integrated online address book clearinghouse. The API receives function calls from applications and executes one or more functions in response to the function calls. The address book functions manage address books of the integrated online address book clearinghouse by adding, deleting, updating, and finding address books, contacts, and groups of contacts of the address books. The API also verifies identity information to assure that each function call has authorization to access the desired address book. The API further includes a parameter processing module for processing function-specific parameters passed in data envelopes to the API by the applications. The API also includes a response generating module for responding to the application that sent a function call to the API.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07337448",
	"publication_date": "2008-02-26",
	"application_number": "10606991",
	"application_date": "2003-06-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "API schema language and transformation techniques",
	"summary": "",
	"abstract": "An API schema language and transformation techniques allow an application programming interface to be defined in a markup language. This interface definition can then be transformed into a non-markup language source file. Examples of transformation techniques include techniques to transform the interface definition into a component object model (COM) header file, a documentation file that describes the contents of the non-markup language source file, and a proxy object code file.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07363619",
	"publication_date": "2008-04-22",
	"application_number": "11038548",
	"application_date": "2005-01-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Architecture and system for location awareness",
	"summary": "",
	"abstract": "A location service and method provides a location aware computing device that is extensible by allowing different types of location awareness providers operate with the service. The method includes receiving a request for a location context, acquiring data associated with a current location from one or more location detection devices, reconciling the acquired data for any inconsistencies concerning the current location by applying either or both of a hierarchical and a metric process, and generating a location object accessible to applications. The service includes a location management component configured to route location data, a fuser engine configured to receive one or more location reports generated from the location data, reconcile conflicts between the location reports and generate a location object, and one or more location application programming interfaces (APIs) coupled to the location management component to transmit the location object from the fuser engine to an application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07536695",
	"publication_date": "2009-05-19",
	"application_number": "10402609",
	"application_date": "2003-03-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Architecture, programming model and API'S",
	"summary": "",
	"abstract": "The subject invention provides a system and/or a method that facilitates employing a model based at least upon a framework, wherein the model can be utilized to build an RFID application. A receiver component can receive data, wherein a model component can create a model based at least in part upon the received data that facilitates creating and/or executing the RFID application. The framework can be, but is not limited to, an entity, a framework class, a hierarchical framework of at least one class, an interface, an exception, a component architecture, a schema, an object model, and/or an API (Application Programming Interface). The model can be utilized to create, deploy, manage, and/or execute the RFID application to provide a generic operation and/or a business specific scenario.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07295116",
	"publication_date": "2007-11-13",
	"application_number": "11069459",
	"application_date": "2005-03-01",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Asynchronous updating of web page data views",
	"summary": "",
	"abstract": "Embodiments are provided to create and manage data view modules for updating data on a web page, without having to reload the entire web page to view the updated data. In one embodiment, a static data view module for viewing web data is modified utilizing an asynchronous update function which provides asynchronous update behavior for the data view module. The asynchronous update function enables the data view module to automatically update data displayed in a data view independently of data displayed in other static data views which may be present in a web page and which may only be updated by reloading the entire web page. In another embodiment, application programming interfaces (APIs) may be provided in the modified data view module which, when exposed, facilitate the building of customized data views by providing asynchronous update behavior for customized data view modules in a web page.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07895179",
	"publication_date": "2011-02-22",
	"application_number": "11768095",
	"application_date": "2007-06-25",
	"tags": null,
	"slug": "asynchronous-updating-of-web-page-data-views",
	"match_type": "abstract"
},
{
	"name": "Automatic discovery and configuration of external network devices",
	"summary": "",
	"abstract": "An improved system and method for discovering and configuring secure network topologies responds to existing networking environments and encompasses the dynamic detection and configuration of an appropriate hardware or software solution. In an embodiment of the invention, a broadcast mechanism is used to provide hardware device discovery while application programming interfaces provide discovery of software firewalls. In a further embodiment, a polling technique is used to ensure that the configuration of a gateway device does not change, endangering the protected network.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07418486",
	"publication_date": "2008-08-26",
	"application_number": "10456068",
	"application_date": "2003-06-06",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Automatic switching fonts on multilingual text runs",
	"summary": "",
	"abstract": "Automatic switching of fonts on multilingual text runs in one action is provided. After an indication that a new font scheme is to be applied to a multilingual text selection, a client application passes a language identification for each of the multilingual text runs, a major/minor font designation for each text run, a script identification for each text run, if available, and the selected new font scheme to a font scheme application programming interface (API). The font scheme API converts the received language identification to a script identification for each multilingual text run and maps the resulting script identifications to appropriate fonts associated with the selected font scheme for each of the multilingual text runs. Fonts retrieved for each language text run are returned to the client application for rendering the multilingual text runs according to the respective fonts applicable to the selected font scheme.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08078965",
	"publication_date": "2011-12-13",
	"application_number": "11799457",
	"application_date": "2007-05-01",
	"tags": null,
	"slug": "automatic-switching-fonts-on-multilingual-text-runs",
	"match_type": "abstract"
},
{
	"name": "Availability data service",
	"summary": "",
	"abstract": "Real time availability data (free/busy data) is provided for potential meeting attendees and/or assets. An availability service is queried for availability data for one or more attendees and/or meeting assets. The availability service determines the identity of an electronic mailbox server on which is stored current real time calendaring data for the desired attendees and/or assets. The requested data is retrieved by the availability service from one or more mailbox servers having data for each attendee and/or asset. Potential attendees may set permissions on their respective availability data to restrict the amount and types of data that may be retrieved by a given data requester. Data queries and data responses may be structured according to the Extensible Markup Language (XML) and application programming interfaces (API) may be exposed for allowing requesting applications to efficiently call the availability service for availability data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07849102",
	"publication_date": "2010-12-07",
	"application_number": "11267349",
	"application_date": "2005-11-04",
	"tags": null,
	"slug": "availability-data-service",
	"match_type": "abstract"
},
{
	"name": "Browser elements for communicating with other browser elements and with external applications",
	"summary": "",
	"abstract": "Browser elements are configurable as web services and communicate using various communication architectures and protocols. Application programming interfaces associated with browser elements configured as web services are accessible to web browsers through web scripting modules.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07805728",
	"publication_date": "2010-09-28",
	"application_number": "11687429",
	"application_date": "2007-03-16",
	"tags": null,
	"slug": "browser-elements-for-communicating-with-other-browser-elements-and-with-external-applications",
	"match_type": "abstract"
},
{
	"name": "Client application independent extensibility model",
	"summary": "",
	"abstract": "Information describing a type registration regarding which an action is being requested by the client application is received as one or more parameters of an application programming interface method invoked by the client application. Based on the one or more parameters, one of multiple type extensions to which the action being requested corresponds is determined. At least part of the information describing the type registration is sent to the one of the multiple type extensions, and the one of the multiple type extensions performs the action being requested.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08117622",
	"publication_date": "2012-02-14",
	"application_number": "12465812",
	"application_date": "2009-05-14",
	"tags": null,
	"slug": "client-application-independent-extensibility-model",
	"match_type": "abstract"
},
{
	"name": "Collaborative invitation system and method",
	"summary": "",
	"abstract": "A set of collaborative contacts may be selected with an invitation user interface. An invitation to participate in a collaborative activity may be sent to the selected contacts from the invitation user interface or from a collaborative application. The invitation may be received by a collaborative services platform. A user of the collaborative services platform may be presented with the invitation along with an ability to choose one of accept, decline and ignore in response to the invitation. The user may choose to accept, decline or explicitly ignore the invitation, and a response may be sent to the sender of the invitation indicating the user's choice. An application programming interface for a collaborative invitation service of the collaborative services platform may include an invitation element, a send invitation element, a respond to invitation element and a cancel invitation element. The cancel invitation element may be used to cancel issued invitations.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07752253",
	"publication_date": "2010-07-06",
	"application_number": "11114634",
	"application_date": "2005-04-25",
	"tags": null,
	"slug": "collaborative-invitation-system-and-method",
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07593959",
	"publication_date": "2009-09-22",
	"application_number": "11276244",
	"application_date": "2006-02-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07068284",
	"publication_date": "2006-06-27",
	"application_number": "10705132",
	"application_date": "2003-11-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07647347",
	"publication_date": "2010-01-12",
	"application_number": "11276245",
	"application_date": "2006-02-20",
	"tags": null,
	"slug": "color-management-system-that-supports-legacy-and-advanced-color-management-applications",
	"match_type": "abstract"
},
{
	"name": "Color management system that supports legacy and advanced color management applications",
	"summary": "",
	"abstract": "The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07647348",
	"publication_date": "2010-01-12",
	"application_number": "11276246",
	"application_date": "2006-02-20",
	"tags": null,
	"slug": "color-management-system-that-supports-legacy-and-advanced-color-management-applications",
	"match_type": "abstract"
},
{
	"name": "Communicating between an application process and a server process to manage peer-to-peer identities",
	"summary": "",
	"abstract": "Peer-to-peer (P2P) application programming interfaces (APIs) that allow an application to create, import, export, manage, enumerate, and delete P2P identities are presented. Further, the management of group identity information is provided. APIs abstract away from low level credential and cryptographic functions required to create and manage P2P identities. This management includes retrieval and setting of a friendly name, generation of a cryptographic public/private key pair, retrieval of security information in the form of an XML fragment, and creation of a new name based on an existing identity. Since the P2P environment also allows for the existence of multiple separate groups of peers within the P2P cloud, a preferred embodiment of the present invention also allows for the enumeration of all groups associated with a given identity, for each identity existing for the user.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08010681",
	"publication_date": "2011-08-30",
	"application_number": "12559841",
	"application_date": "2009-09-15",
	"tags": null,
	"slug": "communicating-between-an-application-process-and-a-server-process-to-manage-peertopeer-identities",
	"match_type": "abstract"
},
{
	"name": "Configurable system and methods for writing and executing test components",
	"summary": "",
	"abstract": "An automated and flexible architecture is provided that enables a plurality of component tests to be executed in various testing orders while imposing a test framework to mitigate adverse effects or results on previously developed tests. In one aspect, a computerized test system is provided. The system includes a test engine to execute a plurality of component tests. One or more application programming interfaces (API) are provided to selectively determine at a subset of the tests to execute, an execution order of the tests, or a fault response for the tests, if desired. The API determines a phase execution for the tests, where the phase execution can include a set up phase, an execution phase, a validation phase, a publishing phase, and a clean up phase, for example.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07562255",
	"publication_date": "2009-07-14",
	"application_number": "11201798",
	"application_date": "2005-08-11",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Contract programming for code error reduction",
	"summary": "",
	"abstract": "In one embodiment, a computer system provides an application programming interface (API) for augmenting an application API. A computer system receives software code written in a second programming language indicating a user's intention to augment an application API with contracts from a contract API written in a first programming language. The software code includes a reference to the contract API. The contracts include assertions indicating appropriate use of the application API. The computer system accesses portions of the contract API according to the reference in the software code and compiles the received software code and the referenced portions of the contract API into an intermediate language (IL) version of the software code. The IL version is in an intermediate language common to both the first programming language and the second programming language. The IL version includes the assertions indicating appropriate use of the application API.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08250524",
	"publication_date": "2012-08-21",
	"application_number": "11963346",
	"application_date": "2007-12-21",
	"tags": null,
	"slug": "contract-programming-for-code-error-reduction",
	"match_type": "abstract"
},
{
	"name": "Control object and user interface for controlling networked devices",
	"summary": "",
	"abstract": "A system for including a set of software components and an application programming interface for the logical networked representation and implementation of a system of smart devices within a home or small office environment. The software components include a control object component and a user interface component. The control object is a software object capable that carries out communication, accepts and issues control messages. The control object allows a user to remotely control or query a physical device for which the specific control object has responsibility and for maintaining logical and physical connections and control of the device. The user interface supplies a coherent and transparent interface across all network media and topologies. The user interface is capable of communicating with any control object that it identifies as being controllable in a given system. The communication may be across a logical network or may be local to a particular device. The user interface takes on the u201cpersonalityu201d of the physical device for which the attendant control object carries a logical and physical mapping and control responsibility.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07404187",
	"publication_date": "2008-07-22",
	"application_number": "10977809",
	"application_date": "2004-10-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Controlling access of application programs to an adaptive input device",
	"summary": "",
	"abstract": "Methods and systems for controlling access of application programs to an adaptive input device are described herein. One exemplary computing system includes an application programming interface executable on a computing device for controlling said access to an adaptive input device having a plurality of display regions. The application programming interface is configured to receive a display request from one of the application programs to display formatted output on the composite display and is further configured to apply at least a display sharing policy based on application-specific policy settings received from the application program for defining an application-specific area including at least one of the display regions. Further, the application programming interface is configured to generate formatted output based on the application-specific policy settings, and to send the formatted output to the application-specific area for display. The application-specific policy settings include a shared display mode and an exclusive display mode.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08201213",
	"publication_date": "2012-06-12",
	"application_number": "12427882",
	"application_date": "2009-04-22",
	"tags": null,
	"slug": "controlling-access-of-application-programs-to-an-adaptive-input-device",
	"match_type": "abstract"
},
{
	"name": "Crawling databases for information",
	"summary": "",
	"abstract": "A system facilitates the search engine to search for pieces of information in various databases and application documents without the need to know the specific protocols to communicate with the various databases and application documents, such as Microsoft Excel documents. Despite the multitude of possible protocols which a crawler would have to use to connect to the databases, the system includes a unifying application programming interface to unify the way to access pieces of information in the databases and application documents.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07801880",
	"publication_date": "2010-09-21",
	"application_number": "11096429",
	"application_date": "2005-03-29",
	"tags": null,
	"slug": "crawling-databases-for-information",
	"match_type": "abstract"
},
{
	"name": "Data driven remote device control model with general programming interface-to-network messaging adapter",
	"summary": "",
	"abstract": "A general programmatic interface-to-network messaging adapter exposes a suitable object integration interface or application programming interface to applications on a controller device and sends network data messages to invoke services or query status of a controlled device. The adapter maps application calls to the interface into network data messages according to service protocols of the controlled device. The general adapter provides the interface suitable to any specific service of a controlled device based on a data description of the interface, and converts the application calls to network data messages based on a data description of a protocol and format for network data messages to interact with the specific service. Once the interface/messaging description is obtained, applications on the controller device can programmatically interact with the adapter, and the adapter then handles appropriate message exchanges with the service of the controlled device. The general adapter allows controller device applications to be written using object-oriented programming, while avoiding code download.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07085814",
	"publication_date": "2006-08-01",
	"application_number": "09706446",
	"application_date": "2000-11-02",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Declarative representation for an extensible workflow model",
	"summary": "",
	"abstract": "Representing a componentized workflow model via a declarative markup language. Each step of the workflow is modeled as an activity that has metadata to describe design time aspects, compile time aspects, and runtime aspects of the workflow step. A user selects and arranges the activities to create the workflow via user interfaces or application programming interfaces. The metadata associated with each of the activities in the workflow is collected to create a persistent representation of the workflow. Users extend the workflow model by authoring custom activities.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07631291",
	"publication_date": "2009-12-08",
	"application_number": "11047404",
	"application_date": "2005-01-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Delegated administration of namespace management",
	"summary": "",
	"abstract": "A system and method for delegating at least one administrative duty associated with namespace management from an authentication system to at least one administration system. An application programming interface provides communication between the authentication system and the administration system. The authentication system receives a request from the administration system, verifies the authority of the request, and performs the action(s) specified in the request to manage a namespace.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07330971",
	"publication_date": "2008-02-12",
	"application_number": "10675255",
	"application_date": "2003-09-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Digital identity management",
	"summary": "",
	"abstract": "One aspect relates to a process and associated device for managing digital ID lifecycles for application programs, and abstracting application programs for multiple types of credentials through a common Digital Identity Management System (DIMS) and Application Programming Interface (API) layer.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07703128",
	"publication_date": "2010-04-20",
	"application_number": "10365878",
	"application_date": "2003-02-13",
	"tags": null,
	"slug": "digital-identity-management",
	"match_type": "abstract"
},
{
	"name": "Distributed routing table interface",
	"summary": "",
	"abstract": "Application programming interface (API) for starting and accessing distributed routing table (DRT) functionality. The API facilitates bootstrapping into the DRT by one or more devices of a group of devices (a mesh) seeking to collaborate over a serverless connection, establishing a node of the DRT, where each node is an instance of an application that is participating in the mesh, and node participation by allowing the application to search for keys published by other nodes in the mesh, or by becoming part of the mesh by publishing a key. The API facilitates optimization of the routing table for quickly finding a root of a specific key in the mesh by finding the key directly in a cache or by asking a root node of the key that is in the local routing table that is closest numerically to the key being searched.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08161095",
	"publication_date": "2012-04-17",
	"application_number": "11716896",
	"application_date": "2007-03-12",
	"tags": null,
	"slug": "distributed-routing-table-interface",
	"match_type": "abstract"
},
{
	"name": "Dynamic mechanism for providing metadata",
	"summary": "",
	"abstract": "Dynamic metadata allows for metadata that can be configured for an application programming interface (API) after the API has shipped. Multiple entities can provide metadata for the same API or portions of an API. The metadata provided for an API can be set up for each application domain, allowing customization within a single process. Metadata can be provided in several ways, including traditional compiled code and declarative markup as well as databases and other more dynamic approaches. Metadata is separated from its runtime components, so that the metadata that is used by the runtime components can be changed. For example, metadata may be declared on the objects separately. The metadata is then tied back to the runtime components.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716246",
	"publication_date": "2010-05-11",
	"application_number": "11291703",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "dynamic-mechanism-for-providing-metadata",
	"match_type": "abstract"
},
{
	"name": "Dynamic redirection of streaming media between computing devices",
	"summary": "",
	"abstract": "Dynamic redirection of streaming media between computing devices is described. In an implementation, a method listening at an application programming interface for a notification indicating that a change is to be made in a topology of streaming media software components. When the notification is received, a media engine that is capable of reconfiguring the topology in accordance with the indicated change is notified. At least one of the topology or the reconfigured topology have one of the streaming media software components located on a comprising device and another one of the streaming media software components located on another computing device.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07669206",
	"publication_date": "2010-02-23",
	"application_number": "10828402",
	"application_date": "2004-04-20",
	"tags": null,
	"slug": "dynamic-redirection-of-streaming-media-between-computing-devices",
	"match_type": "abstract"
},
{
	"name": "Ecommerce marketplace integration techniques",
	"summary": "",
	"abstract": "Various technologies and techniques are disclosed for integrating ecommerce marketplaces. An ecommerce integration framework has definitions for common data entities that are commonly used by multiple ecommerce marketplaces for listing items. Definitions for common operations that can manipulate the common data entities are provided. An application programming interface is provided that uses the common data entities and common operations to enable enterprise resource planning systems to exchange data in a standardized format with ecommerce marketplaces. Catalogs of items to be sold in ecommerce marketplaces can be created and managed using a customizable structure. The customizable structure enables catalogs to be created in a hierarchical manner with at least one parent catalog and zero or more child catalogs. Data values specified in a respective child catalog override data values specified in the parent catalog. A method for communicating with a particular ecommerce marketplace using an ecommerce integration framework is described.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08442865",
	"publication_date": "2013-05-14",
	"application_number": "13248633",
	"application_date": "2011-09-29",
	"tags": null,
	"slug": "ecommerce-marketplace-integration-techniques",
	"match_type": "abstract"
},
{
	"name": "Electronic ink processing",
	"summary": "",
	"abstract": "An application programming interface instantiates an ink analyzer object that receives document data for a document containing electronic ink content from a software application hosting the document and running on a first processing thread. The ink analyzer object then employs the first thread to make a copy of the document data, provides the copy of the document data to an electronic ink analysis process, and returns control of the first processing thread to the analysis process. After the analysis process has analyzed the electronic ink, the ink analyzer object reconciles the results of the analysis process with current document data for the document.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07468801",
	"publication_date": "2008-12-23",
	"application_number": "10646473",
	"application_date": "2003-08-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Flexible architecture for notifying applications of state changes",
	"summary": "",
	"abstract": "Described is a method and system a unified mechanism for storing device, application, and service state, as well as a rich notification brokerage architecture. Clients register with a notification broker to receive notifications for changes to state properties. When a registered state property changes, a notification broker determines which clients to notify of the state change and provides the client with a notification regarding the change. Clients may be notified whenever a state changes, when a state change meets a predetermined condition, or based on a schedule. An application may also be launched in response to a state change. An application programming interface (API) is provided that provides a unified way of accessing state change information across different components within the device.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07644376",
	"publication_date": "2010-01-05",
	"application_number": "10873881",
	"application_date": "2004-06-22",
	"tags": null,
	"slug": "flexible-architecture-for-notifying-applications-of-state-changes",
	"match_type": "abstract"
},
{
	"name": "Framework for database transactions",
	"summary": "",
	"abstract": "Various mechanisms are presented that allow for the coordination of transactions in a managed runtime environment. In one aspect, a runtime environment that is hosted in a database system, includes an application programming interface (API). The API can surface the database transactions as ambient transactions, and present them to some user code. When the user code connects to some remote resource, the ambient transaction can be implicitly propagated to the remoter resource, resulting in coordination of the database transaction with any given transaction running in the remote resource.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07770186",
	"publication_date": "2010-08-03",
	"application_number": "11326947",
	"application_date": "2006-01-06",
	"tags": null,
	"slug": "framework-for-database-transactions",
	"match_type": "abstract"
},
{
	"name": "Framework for seamlessly authoring and editing workflows at design and runtime",
	"summary": "",
	"abstract": "Modifying a componentized workflow model during execution of the workflow. Each step of the workflow is modeled as an activity that has metadata to describe design time aspects, compile time aspects, and runtime aspects of the workflow step. A user selects and arranges the activities to create the workflow via user interfaces or application programming interfaces. Metadata is associated with each of the activities in the workflow. During execution of the workflow, the user modifies the metadata to affect execution of the workflow without recompiling the workflow.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07565640",
	"publication_date": "2009-07-21",
	"application_number": "11047275",
	"application_date": "2005-01-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Generic user interface command architecture",
	"summary": "",
	"abstract": "Certain aspects of a generic user interface command architecture allow an application to host commands for presentation on a computing device. The commands can be written by the same designer or author as the application, or alternatively by other parties (e.g., by a third-party developer). Other aspects of the generic UI command architecture describe an application programming interface (API) that can be used to allow the application to host the commands. Other aspects of the generic UI command architecture describe an activation mechanism by which registered commands can be activated by an application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08359606",
	"publication_date": "2013-01-22",
	"application_number": "12570012",
	"application_date": "2009-09-30",
	"tags": null,
	"slug": "generic-user-interface-command-architecture",
	"match_type": "abstract"
},
{
	"name": "Generic user interface command architecture",
	"summary": "",
	"abstract": "Certain aspects of a generic user interface command architecture allow an application to host commands for presentation on a computing device. The commands can be written by the same designer or author as the application, or alternatively by other parties (e.g., by a third-party developer). Other aspects of the generic UI command architecture describe an application programming interface (API) that can be used to allow the application to host the commands. Other aspects of the generic UI command architecture describe an activation mechanism by which registered commands can be activated by an application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07636922",
	"publication_date": "2009-12-22",
	"application_number": "10838462",
	"application_date": "2004-05-03",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Graphical user interface for a screen telephone",
	"summary": "",
	"abstract": "A graphical user interface for a web telephone and other telephony devices provides a unique combination of display elements that provide information and enable the user to access functionality of the device. The display elements include customizable screen areas called panes, an application program selection area, and call state area for displaying telephone line status information. A software platform of the user interface provides a set of default user interface features and exposes an application programming interface. System implementers may customize the default display elements or create entirely new custom panes that fit within a uniform user interface framework using the application programming interface.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07225409",
	"publication_date": "2007-05-29",
	"application_number": "09383038",
	"application_date": "1999-08-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Image processing system for digital collage",
	"summary": "",
	"abstract": "It is required to provide a framework for an automated process for forming a visually appealing collage from a plurality of input images. It is required to provide a framework for this type of automated process which is flexible and robust and which can easily be interfaced to a related software application. An image synthesis framework is provided with a modular architecture having a first module, a plurality of prior compute modules and an image synthesis module. The first module provides an application programming interface, the prior compute modules compute information about input images, and the image synthesis module uses the computed information together with the input images to form a digital collage.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07532771",
	"publication_date": "2009-05-12",
	"application_number": "11609802",
	"application_date": "2006-12-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Instrumentation to find the thread or process responsible for an application failure",
	"summary": "",
	"abstract": "An application programming interface (API) that leverages operating system instrumentation to provide a chain of threads and processes may alleviate some debugging complications. Specifically, the chain may start with the first thread in the process that experienced the original failure and end with the last thread upon which the first thread directly or indirectly depends. The API may aid debugging efforts by classifying all threads related or dependent upon an original failed thread into specific categories of failures, requesting further information from the originating OS concerning specific failed threads, and using that information to debug the failed application or process more thoroughly.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07958512",
	"publication_date": "2011-06-07",
	"application_number": "11413421",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "instrumentation-to-find-the-thread-or-process-responsible-for-an-application-failure",
	"match_type": "abstract"
},
{
	"name": "Interfaces for creation and access of extensible markup language paper specification documents",
	"summary": "",
	"abstract": "XPS documents are created and accessed via a collection of interfaces of various classes of an application programming interface. The application programming interface includes a document sequence class for reading and writing the document sequence of the XPS document, a fixed document class for reading and writing the fixed documents of the document sequence, a page class for reading and writing the pages of the fixed documents, and a resource class for accessing the resources of each page. Applications seeking to create or read XPS documents may utilize the application programming interface such that the complexities of creating and accessing the XPS document are abstracted away.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716570",
	"publication_date": "2010-05-11",
	"application_number": "11301132",
	"application_date": "2005-12-12",
	"tags": null,
	"slug": "interfaces-for-creation-and-access-of-extensible-markup-language-paper-specification-documents",
	"match_type": "abstract"
},
{
	"name": "Media integration layer",
	"summary": "",
	"abstract": "A media integration layer including an application programming interface (API) and an object model allows program code developers to interface in a consistent manner with a scene graph data structure in order to output graphics. Via the interfaces, program code adds child visuals to other visuals to build up a hierarchical scene graph, writes Instruction Lists such as geometry data, image data, animation data and other data for output, and may specify transform, clipping and opacity properties on visuals. The media integration layer and API enable programmers to accomplish composition effects within their applications in a straightforward manner, while leveraging the graphics processing unit in a manner that does not adversely impact normal application performance. A multiple-level system includes the ability to combine different media types (such as 2D, 3D, Video, Audio, text and imaging) and animate them smoothly and seamlessly.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07511718",
	"publication_date": "2009-03-31",
	"application_number": "10693630",
	"application_date": "2003-10-23",
	"tags": null,
	"slug": "media-integration-layer",
	"match_type": "abstract"
},
{
	"name": "Media timeline",
	"summary": "",
	"abstract": "A media timeline is described. In an implementation, a method includes receiving a request from an application at an application programming interface (API) to interact with a plurality of media. Based on the request, a media timeline is generated. The media timeline is for exposure via the API to the application and includes a plurality of nodes. The media timeline defines a presentation of a first media referenced by a first node with respect to a second media referenced by a second node.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07934159",
	"publication_date": "2011-04-26",
	"application_number": "10782734",
	"application_date": "2004-02-19",
	"tags": null,
	"slug": "media-timeline",
	"match_type": "abstract"
},
{
	"name": "Media timeline sorting",
	"summary": "",
	"abstract": "Media timeline sorting is described. In an implementation, a method includes receiving a media timeline at an application programming interface, in which, the media timeline includes a plurality of timeline objects. One or more of the timeline objects reference a respective one of a plurality of media. A plurality of segments is generated from the media timeline for sequential rendering such that each segment references a particular set of the timeline objects that are rendering during a duration of the segment.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07313755",
	"publication_date": "2007-12-25",
	"application_number": "11110295",
	"application_date": "2005-04-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for building metadata driven software development kit",
	"summary": "",
	"abstract": "A metadata driven software development system provides various functionalities related to an entity of an application in the metadata format. Specifically, the system provides a set of base classes related to the entity and a set of methods and application programming interfaces for various operations to be performed on the entities in the metadata format. Defining such functionalities in the metadata format allows the system to dynamically generate XML messages matching any customized schema for that entity. Because such functionality is metadata driven, this system can be used with customized versions of the application without requiring any additional code or recompilation.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07321894",
	"publication_date": "2008-01-22",
	"application_number": "11025322",
	"application_date": "2004-12-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for enabling application program compatibility with display devices having improved pixel density",
	"summary": "",
	"abstract": "A method and apparatus are provided for enabling application program compatibility with display devices having an increased pixel density. According to one method, a call including one or more parameters is directed toward an application programming interface for performing a screen input or output function is received from an application program. In response to receiving the call, a determination is made as to whether the application program is configured for use with a display device having a lower pixel density or a display device having a higher pixel density. In response to determining that the application program is configured for use with a display device having a lower pixel density, the parameters are scaled for the higher pixel density display device and the application programming interface is called using the scaled parameters.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07180531",
	"publication_date": "2007-02-20",
	"application_number": "10789603",
	"application_date": "2004-02-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for high-performance rendering and hit testing of a window tree",
	"summary": "",
	"abstract": "A method and apparatus for high-performance rendering and hit-testing of a window tree is provided. A window tree may be rendered using an application programming interface provided by the present invention. The application programming interface provides support for world-transforms, enabling entire sub-trees of the window tree to be rotated and scaled during rendering. In order to quickly render and hit-test the transformed nodes of the window tree, a stack-based implementation of the u201cpainter's algorithmu201d is utilized to achieve fast rendering. By storing all state information on a stack regarding each node in the window tree and building new data structures containing rendering information for each node and its children, any portion of the sub tree may be rendered on demand.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07453473",
	"publication_date": "2008-11-18",
	"application_number": "11035640",
	"application_date": "2005-01-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for high-performance rendering and hit-testing of a window tree",
	"summary": "",
	"abstract": "A method and apparatus for high-performance rendering and hit-testing of a window tree is provided. A window tree may be rendered using an application programming interface provided by the present invention. The application programming interface provides support for world-transforms, enabling entire sub-trees of the window tree to be rotated and scaled during rendering. In order to quickly render and hit-test the transformed nodes of the window tree, a stack-based implementation of the u201cpainter's algorithmu201d is utilized to achieve fast rendering. By storing all state information on a stack regarding each node in the window tree and building new data structures containing rendering information for each node and its children, any portion of the sub tree may be rendered on demand.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "06954218",
	"publication_date": "2005-10-11",
	"application_number": "09885350",
	"application_date": "2001-06-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for utilizing an object model for managing content regions in an electronic document",
	"summary": "",
	"abstract": "A method and apparatus are provided for utilizing a document object model to manage content regions for use in an electronic document. A content region is a predefined area which may be inserted in an electronic document and which serves as a placeholder for receiving and displaying specific types of content such as text, graphics data, calendar data, or tabular data. The document object model enables a user to create, modify, and delete content regions from an electronic document using an application programming interface from within a computer application program.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07712016",
	"publication_date": "2010-05-04",
	"application_number": "11065754",
	"application_date": "2005-02-25",
	"tags": null,
	"slug": "method-and-apparatus-for-utilizing-an-object-model-for-managing-content-regions-in-an-electronic-document",
	"match_type": "abstract"
},
{
	"name": "Method and system for configuring a timer",
	"summary": "",
	"abstract": "The present invention facilitates access to timers in a computing device. In particular, a timer system facilitates configuring a hardware interrupt timer in a computing device, the timer being guaranteed to expire at a specific time in a non-real-time environment. A calling application passes parameters to a hardware independent application programming interface (API) to the hardware interrupt timer. The hardware independent API validates the parameters and relays them to a hardware dependent API. The hardware dependent API establishes a connection with the timer in accordance with the validated parameters, and executes a service routine associated with the application upon expiration of the timer.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07383460",
	"publication_date": "2008-06-03",
	"application_number": "11089957",
	"application_date": "2005-03-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for displaying transient notifications",
	"summary": "",
	"abstract": "A notification component that is shared between all applications that provides notifications to users without interrupting the task that the user is working and allows users to manage the notifications from one location. The user can globally set preferences as to how the notifications should be rendered. These preferences include enabling or disabling notification classifications, which rendering type they want to use for each notification classification, and priority of notifications within each notification classification. The notification component allows the user to indicate what notifications the user want to sees and how the notifications are rendered. Rendering types include audio, visual, and pager styles. An application uses an application programming interface to send notification using schema based or text based notifications. The system parses the notification and provides the user the notification through notification classifications in accordance with the user preferences.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07155729",
	"publication_date": "2006-12-26",
	"application_number": "09705858",
	"application_date": "2000-11-03",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for network emulation",
	"summary": "",
	"abstract": "A system and method for emulation of a network link include an application programming interface (API) for testing distributed applications by way of a network emulator. According to aspects of the invention, a method and computer program product are disclosed for providing an interface to a user application for configuring a network emulator. According to another aspect of the invention, a system for configuring a network emulator by way of a user application is provided. The API includes exposed functions for creating a virtual channel, creating a virtual link in the virtual channel, deleting the virtual channel, deleting the virtual link, obtaining trace data, obtaining a packet filter for the virtual channel, obtaining a link rule and the number of instances of the virtual link, initializing the emulator, modifying the virtual channel, modifying the virtual link, setting trace information for the emulator, shutting down the emulator, and stopping the emulation.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07555420",
	"publication_date": "2009-06-30",
	"application_number": "10951985",
	"application_date": "2004-09-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for protecting user choices",
	"summary": "",
	"abstract": "A system, method, and computer-accessible medium for protecting user choice settings are provided. The system and method provide an application programming interface that uses a security subsystem to unlock, write, and relock the user choice settings to insure that the user's choices are enforced and respected by the applications that attempt to change them in a manner that is verifiable and transparent to the user. The user is notified whenever a change to their user choice settings is made.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08201230",
	"publication_date": "2012-06-12",
	"application_number": "10783558",
	"application_date": "2004-02-20",
	"tags": null,
	"slug": "method-and-system-for-protecting-user-choices",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing an interface through which an application can access a media stack",
	"summary": "",
	"abstract": "A communications system provides a media sender object and a media receiver object that provide an interface between a media stack and an application. The application can use the media sender object to send content to a source media stack and the media receiver object to receive content from a sink media stack. The application programming interface of the media sender object and the media receiver object provides functions for registering and un-registering buffers for storing and receiving content. When a source media stack is ready to send content, it invokes each registered source to collect content to be sent. When a sink media stack has received content, it invokes each registered sink to provide the received content. An application interfaces with a media sender object and a media receiver object to add content to a channel or to receive content from a channel.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716359",
	"publication_date": "2010-05-11",
	"application_number": "11124902",
	"application_date": "2005-05-09",
	"tags": null,
	"slug": "method-and-system-for-providing-an-interface-through-which-an-application-can-access-a-media-stack",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing service listings in electronic yellow pages",
	"summary": "",
	"abstract": "A method and system for allowing a regional service merchant that is outside of a given geographical boundary, but services inside the geographical boundary, to be included in a result set of a search directed to a location inside the geographical boundary. Text and/or glyphs are returned along with the regional service merchant's business listing so as to explain to a user why a business not physically residing in the search area has been included in the result set. An application programming interface ensures that, if a business is listed as a regional service merchant, then the text and/or glyph is stored in association with the business listing.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "06973448",
	"publication_date": "2005-12-06",
	"application_number": "09651406",
	"application_date": "2000-08-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for providing service listings in electronic yellow pages",
	"summary": "",
	"abstract": "A method and system for allowing a regional service merchant that is outside of a given geographical boundary, but services inside the geographical boundary, to be included in a result set of a search directed to a location inside the geographical boundary. Text and/or glyphs are returned along with the regional service merchant's business listing so as to explain to a user why a business not physically residing in the search area has been included in the result set. An application programming interface ensures that, if a business is listed as a regional service merchant, then the text and/or glyph is stored in association with the business listing.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07437357",
	"publication_date": "2008-10-14",
	"application_number": "11203472",
	"application_date": "2005-08-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method for switching protocols transparently in multi-user applications",
	"summary": "",
	"abstract": "An application programming interface implements a method for transparently switching from one communication protocol to another and for restoring the state of a previous connection. The application programming interface executes on a local, client computer, as well as remote computers. It includes functions that multi-user application programs can call to communicate in a device independent manner with other applications executing on remote computers. To support communication on a variety of different computer communication protocols, the application programming interface accesses programs called service providers that implement the communication protocols and support the message passing model of the interface. The application programming interface can transparently switch the protocol on a remote computer by sending a system message to a compatible version of the interface on the remote computer that includes an identifier of the service provider for the new protocol. In response to the message, the application programming interface loads the new service provider and takes steps to set-up a new connection. The application programming interface can also restore the state of previous connection on a remote computer by sending a system message. In response to this message, the application programming interface on the remote computer retrieves the previous connection state from an MRU stack and loads the service provider for the previous connection.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07197049",
	"publication_date": "2007-03-27",
	"application_number": "10215866",
	"application_date": "2002-08-09",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method of operation of an intelligent transpartent gateway during an ftp session",
	"summary": "",
	"abstract": "A transparent gateway having increased throughput during a file transfer protocol (ftp) session is provided. This increase is enabled through generalized network address translator (gNAT) at the kernel level that is under user-mode proxy control through an application programming interface (API). Initially, the proxy commands the API to generate a dynamic port-redirect in the gNAT for all connection requests for a port twenty-one to itself at the local port to which it is bound. The proxy may then establish a session on the client's behalf with the ftp server, establish a session on the client's behalf with a different ftp server, etc. The proxy then requests that the API command an address translation in the gNAT to open an ftp data session so that data from the ftp server need not pass up to the user-mode, but may be dynamically redirected within the kernel-mode.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07412523",
	"publication_date": "2008-08-12",
	"application_number": "10843280",
	"application_date": "2004-05-11",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and computer program products for providing network quality of service for world wide web applications",
	"summary": "",
	"abstract": "Methods and computer program products are disclosed for providing QoS for Web applications via an internet service application programming interface u201cISAPIu201d) filter running on an internet information server, wherein the ISAPI filter uses a traffic control application programming interface to manage bandwidth for individual HTTP requests. Responses to HTTP requests can be prioritized based on policies defined by the Web application developer, wherein policy decisions may be made based on many different parameters, such as, for example, the IP address of the Web browser making the request, the type of browser being used, HTTP u201ccookies,u201d the uniform resource locator being requested, an authenticated user ID, or any other information that is exposed from the internet information server through server variables. The present invention accomplishes this with no modifications to the internet information server, and u2022with very minimal changes to the Web application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07359986",
	"publication_date": "2008-04-15",
	"application_number": "11627887",
	"application_date": "2007-01-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems for creating and communicating with computer processes",
	"summary": "",
	"abstract": "Disclosed are mechanisms for creating and communicating with computer processes. An application programming interface (API) presents services of the system to applications. The API is usable with all processes, local and remote, and is transparent with respect to the location of processes. A process table stores information about processes created using the system. The process table supports centralized process control and peer-to-peer process communication and synchronization. Each process is assigned a Universally Unique Identifier (UUID) that uniquely identifies the process no matter the computing device on which it runs. A parent UUID and a group UUID may be attached to the process and used for enforcing dependencies (e.g., for halting the process and all of its child processes) and for managing arbitrary, user-defined groups, respectively. A global event is associated with each process. When a process receives this event, it performs a controlled shutdown, cleans up, and reports status.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07089561",
	"publication_date": "2006-08-08",
	"application_number": "09872257",
	"application_date": "2001-06-01",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and systems for creating and communicating with computer processes on remote systems",
	"summary": "",
	"abstract": "An application programming interface (API) presents services of a system to applications. The API is usable with all processes, local and remote, and is transparent with respect to the location of processes. A process table stores information about processes created using the system. The process table supports centralized process control and peer-to-peer process communication and synchronization. Each process is assigned a Universally Unique Identifier (UUID) that uniquely identifies the process no matter the computing device on which it runs. A parent UUID and a group UUID may be attached to the process and used for enforcing dependencies (e.g., for halting the process and all of its child processes) and for managing arbitrary, user-defined groups, respectively. A global event is associated with each process. When a process receives this event, it performs a controlled shutdown, cleans up, and reports status.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07587725",
	"publication_date": "2009-09-08",
	"application_number": "11042853",
	"application_date": "2005-01-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Multipoint processing unit",
	"summary": "",
	"abstract": "A system to provide a multipoint processing terminal and a multicast bridging terminal to provide mixing, switching, and other processing of media streams under the control of H.323 components. Application Programming Interfaces defined for the multipoint processing terminal provide a multipoint control unit with the capability to change the default behavior of the multipoint processing terminal by allowing the multipoint control unit to control the routing audio and video streams in the multipoint processing terminal and control the media formats in a multipoint conference. Multipoint processing acceleration functionality is provided by providing interfaces to allow hardware accelerated implementations of multipoint processing terminals. The multicast bridging terminals enables clients using one type of control signaling and media streaming to join other conferences using different types of control signaling and media streaming by receiving audio or video data from an incoming media stream and performing any processing necessary to transform the media stream from the incoming stream data format to the outgoing stream data format.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07257641",
	"publication_date": "2007-08-14",
	"application_number": "09539026",
	"application_date": "2000-03-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Non-privileged access to data independent of filesystem implementation",
	"summary": "",
	"abstract": "An application programming interface (API) module provides access to data, independent of filesystem implementation in a non-privileged user mode. A discovery volume having a filesystem recognizable by an operating system has cover files which prevent damage to data stored in an unrecognizable primary volume. The discovery volume also includes a data access API available for execution in a non-privileged user mode to render the primary volume accessible by operating systems which would otherwise find the primary volume unrecognizable.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08073886",
	"publication_date": "2011-12-06",
	"application_number": "12390357",
	"application_date": "2009-02-20",
	"tags": null,
	"slug": "nonprivileged-access-to-data-independent-of-filesystem-implementation",
	"match_type": "abstract"
},
{
	"name": "Object model for a user interface",
	"summary": "",
	"abstract": "Various embodiments provide techniques and processes for defining elements of a user interface (UI) using a tree of objects created based on a markup language. In some embodiments, a client application provides markup that defines one or more aspects of a UI to an application programming interface (API). The API parses the markup to determine a namespace and one or more UI elements defined by the namespace. Instances of the UI elements are created, and properties of the UI elements are set on the instances. A user interface may then be displayed that includes the instances of the UI elements.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08245144",
	"publication_date": "2012-08-14",
	"application_number": "12163367",
	"application_date": "2008-06-27",
	"tags": null,
	"slug": "object-model-for-a-user-interface",
	"match_type": "abstract"
},
{
	"name": "Offline synchronization capability for client application",
	"summary": "",
	"abstract": "Application Programming Interfaces (APIs) and UI modifications for existing applications are used to implement efficient methods for taking content offline with full synchronization, incremental synchronization, in the case of document libraries per-folder synchronization, and the like. The APIs provide support for synchronizing changes to attachments, the ability to download a document library's complete contents or only a list of the available documents, and read-only folder hierarchy replication in the case of document libraries. These abilities coupled with corresponding user interface features enable easier browsing and searching of large document library structures, making edits to those documents offline, being able to see an up-to-date version of those documents in a preview mode, and receiving reminders when offline edits remain on the local computer and need to be updated to a server.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07966426",
	"publication_date": "2011-06-21",
	"application_number": "11599206",
	"application_date": "2006-11-14",
	"tags": null,
	"slug": "offline-synchronization-capability-for-client-application",
	"match_type": "abstract"
},
{
	"name": "Operating system managing a linked list of callback dynamic function tables for acquiring exception handling information from a runtime environment",
	"summary": "",
	"abstract": "In an exemplary media implementation, one or more electronically-accessible media include electronically-executable instructions that utilize an application programming interface, the application programming interface facilitating creation of callback-type dynamic function tables; each callback-type dynamic function table including a begin address, an end address, and a callback function, each callback-type dynamic function table corresponding to a code heap that stores code for multiple functions in a runtime environment; wherein interaction between the runtime environment and an operating system is precipitated upon calling the callback function to acquire exception handling and/or unwind information. In another exemplary media implementation, one or more electronically-accessible media include at least part of an operating system that is configured to request from a runtime environment exception handling and/or unwinding information for functions that are managed by the runtime environment.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07634778",
	"publication_date": "2009-12-15",
	"application_number": "10609267",
	"application_date": "2003-06-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Partner sandboxing in a shared multi-tenant billing system",
	"summary": "",
	"abstract": "The present invention relates to a system and methodology for interacting with a Subscription Platform Service (SPS) and providing data security between entities that employ such service. The system includes a component that receives a request to access an object by an entity, and a data store that stores security information on classes of the objects. A verification component employs the security information to determine whether the entity has permission to call an Application Programming Interface (API) for the object and/or operate on the object, wherein the verification component exposes the object if permission exists or masks the object if permission does not exist.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07921299",
	"publication_date": "2011-04-05",
	"application_number": "10729515",
	"application_date": "2003-12-05",
	"tags": null,
	"slug": "partner-sandboxing-in-a-shared-multitenant-billing-system",
	"match_type": "abstract"
},
{
	"name": "Peer-to peer graphing interfaces and methods",
	"summary": "",
	"abstract": "Application programming interfaces and methods that provide graph management in a peer-to-peer (P2P) network are provided. More specifically, new and improved P2P application programming interfaces (APIs) and methods for the creation and access of graphs, the retrieval of node and graph information, the addition, modification, deletion and management of records (data), the importation and exportation of graph data, the direct communication between graph nodes, the addition of a security provider to a graph, the setting and retrieval of presence information, the registering for event notifications, and other utility and support functions are presented. Each of these interfaces utilize various parameters that are passed in from an application program that uses these interfaces to manage and utilize graphs. The interfaces return a value that indicates the success or failure of the function. For failures, the interfaces provide an indication as to the problem resulting in the failure.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07430747",
	"publication_date": "2008-09-30",
	"application_number": "10309865",
	"application_date": "2002-12-04",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Peer-to-peer grouping interfaces and methods",
	"summary": "",
	"abstract": "Application programming interfaces and methods that provide group management in a peer-to-peer (P2P) network are provided. More specifically, new and improved P2P application programming interfaces (APIs) and methods for the creation and access of groups, the retrieval of member and group information, the addition, modification, deletion and management of records (data), the importation and exportation of group data, the direct communication between members, the addition of a security provider to a group, the setting and retrieval of presence information, the registering for event notifications, and other utility and support functions are presented. Each of these interfaces utilize various parameters that are passed in from an application program that uses these interfaces to manage and utilize groups. The interfaces return a value that indicates the success or failure of the function. For failures, the interfaces provide an indication as to the problem resulting in the failure.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07596625",
	"publication_date": "2009-09-29",
	"application_number": "10351905",
	"application_date": "2003-01-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Peer-to-peer identity management managed interfaces and methods",
	"summary": "",
	"abstract": "A set of managed application programming interfaces (APIs) are presented to allow management of a user's name and identity within a peer to peer networking environment. These managed APIs enable a user to successfully create and manage their peer names and identities within this environment. The creation of peer names for the purpose of resolving to a third party is also provided through the managed APIs of the invention. Importing and exporting of peer identities is also provided, as is the ability to delete a peer identity.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07949996",
	"publication_date": "2011-05-24",
	"application_number": "10692199",
	"application_date": "2003-10-23",
	"tags": null,
	"slug": "peertopeer-identity-management-managed-interfaces-and-methods",
	"match_type": "abstract"
},
{
	"name": "Pen data capture and injection",
	"summary": "",
	"abstract": "A tool that allows a user, such as a software developer, to create test data that can consistently be employed to simulate the operation of a hardware pen or stylus. Raw pen data, such as position coordinates, pen angle and pen properties, is captured. This data is then later injected into a system being tested in place of pen data from a device driver. The raw pen data may be captured through an application programming interface invoked by a host application. The captured data can then subsequently be injected through another application programming interface invoked by a host application, such as a software testing application for testing a variety of operations of another software application. Alternately, a stand-alone utility may be used for capturing and then injecting raw pen data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07345681",
	"publication_date": "2008-03-18",
	"application_number": "10778346",
	"application_date": "2004-02-17",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Programmable object model for extensible markup language markup in an application",
	"summary": "",
	"abstract": "A programmable object model allows a user/programmer to programmatically access the Extensible Markup Language (XML) functionality of a software application. The programmable object model is comprised of a plurality of object-oriented message calls or application programming interfaces for allowing a user to access the XML functionality of an application by sending one or more object-oriented message calls or application programming interfaces to the XML functionality of a given application along with any required parameters for customizing or otherwise manipulating XML markup applied to a document.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07404195",
	"publication_date": "2008-07-22",
	"application_number": "10731634",
	"application_date": "2003-12-09",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Programming APIS for an extensible avatar system",
	"summary": "",
	"abstract": "Disclosed is an application programming interface (API) that provides for an extensible avatar system. In one embodiment an API may allow video game applications to retrieve structures of data which represent an avatar. The game can then take those structures and incorporate the data into its own rendering system. In another embodiment an API may allow a video game application to render an avatar to a render target or texture wherein the video game system performs rendering and animation functions.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08446414",
	"publication_date": "2013-05-21",
	"application_number": "12271690",
	"application_date": "2008-11-14",
	"tags": null,
	"slug": "programming-apis-for-an-extensible-avatar-system",
	"match_type": "abstract"
},
{
	"name": "Programming interface for a componentized and extensible workflow model",
	"summary": "",
	"abstract": "Building a componentized workflow model via an application programming interface. Each step of the workflow is modeled as an activity that has metadata to describe design time aspects, compile time aspects, and runtime aspects of the workflow step. A user selects and arranges the activities to create the workflow via the application programming interfaces. The metadata associated with each of the activities in the workflow is collected to create a persistent representation of the workflow. Users extend the workflow model by authoring custom activities. Users also compile the workflow via the application programming interface.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07464366",
	"publication_date": "2008-12-09",
	"application_number": "11063954",
	"application_date": "2005-02-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Proxy direct 3-D device and remote rendering",
	"summary": "",
	"abstract": "Systems, methods and computer readable media are disclosed for an overlaying requester to send graphics commands to a game connected to the overlaying requester via a dummy graphics application programming interface (API) object that the game will render over normal game-play graphics. In addition to allowing the overlaying requester to send graphics commands to the game in general, the dummy graphics API object can also limit the extent of the interaction between the overlaying requester and the computerized gaming system.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08120622",
	"publication_date": "2012-02-21",
	"application_number": "12014691",
	"application_date": "2008-01-15",
	"tags": null,
	"slug": "proxy-direct-3d-device-and-remote-rendering",
	"match_type": "abstract"
},
{
	"name": "Real-time synchronization of XML data between applications",
	"summary": "",
	"abstract": "One or more data stores are maintained separately from a primary presentation storage within a document for storing, relating and for allowing use of arbitrary data that is associated with a computer-generated document between multiple data consumers. The data store exposes application programming interfaces (APIs) to the various pieces of data in the data store for allowing different data consumers to access and operate on one or more of the data pieces in real time. Multiple data consumers may access and edit the same piece of data concurrently, and any conflicting changes to a given piece of data are resolved. Each data consumer may accept or reject the change as well as make additional side-effect changes as a result of the original change. In this way, the data may be synchronized in real time across the data consumers.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07953696",
	"publication_date": "2011-05-31",
	"application_number": "11332468",
	"application_date": "2006-01-13",
	"tags": null,
	"slug": "realtime-synchronization-of-xml-data-between-applications",
	"match_type": "abstract"
},
{
	"name": "Registering and storing dependencies among applications and objects in a computer system and communicating the dependencies to a recovery or backup service",
	"summary": "",
	"abstract": "An application programming interface protocol is provided for making requests to registered applications regarding applications' dependency information so that a table of dependency information relating to a target object can be recursively generated. When all of the applications' dependencies are captured at the same time for given volume(s) or object(s), the entire volume's or object's program and data dependency information may be maintained for the given time. With this dependency information, the computer system advantageously knows not only which files and in which order to freeze or flush files in connection with a backup, such as a snapshot, or restore of given volume(s) or object(s), but also knows which volume(s) or object(s) can be excluded from the freezing process. After a request by a service for application dependency information, the computer system can translate or process dependency information, thereby ordering recovery events over a given set of volumes or objects.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07363633",
	"publication_date": "2008-04-22",
	"application_number": "09557250",
	"application_date": "2000-04-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Resource equalization for inter- and intra- data center operations",
	"summary": "",
	"abstract": "An exemplary component for managing requests for resources in a data center includes a service request module for receiving requests for resources from a plurality of services and a resource module to monitor resources in a data center and to match received requests to resources. Such a component optionally includes an application programming interface (API) that provides for sending information in response to an API call made by a service. Other methods, devices and systems are also disclosed.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08171115",
	"publication_date": "2012-05-01",
	"application_number": "12050783",
	"application_date": "2008-03-18",
	"tags": null,
	"slug": "resource-equalization-for-inter-and-intra-data-center-operations",
	"match_type": "abstract"
},
{
	"name": "Scalable programmable video recorder",
	"summary": "",
	"abstract": "A programmable video recorder (PVR) includes a writer application programming interface (API) and a reader API that operate essentially independently to enable the PVR to be networked to multiple reader applications. The writer API creates a backing store and a shared memory mapped file. The backing store stores streamed data in temporary files. The shared memory mapped file stores state information of the backing store files. The reader API receives requests from reader applications to access the stored streamed data. In response to the requests, the reader API permits the reader applications to access the shared memory mapped file to determine where the stored streamed data is located. Upon locating the stored data, the reader API permits the requesting reader applications to access the stored streamed data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07289716",
	"publication_date": "2007-10-30",
	"application_number": "10172551",
	"application_date": "2002-06-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Scalable programmable video recorder",
	"summary": "",
	"abstract": "A programmable video recorder (PVR) includes a writer application programming interface (API) and a reader API that operate essentially independently to enable the PVR to be networked to multiple reader applications. The writer API creates a backing store and a shared memory mapped file. The backing store stores streamed data in temporary files. The shared memory mapped file stores state information of the backing store files. The reader API receives requests from reader applications to access the stored streamed data. In response to the requests, the reader API permits the reader applications to access the shared memory mapped file to determine where the stored streamed data is located. Upon locating the stored data, the reader API permits the requesting reader applications to access the stored streamed data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07743032",
	"publication_date": "2010-06-22",
	"application_number": "11868160",
	"application_date": "2007-10-05",
	"tags": null,
	"slug": "scalable-programmable-video-recorder",
	"match_type": "abstract"
},
{
	"name": "Service discovery and publication",
	"summary": "",
	"abstract": "A system and methods for service discovery and publication are disclosed. Application programs write requests for service discovery, publication, and subscription to a service discovery application programming interface. The service discovery application programming interface invokes one or more lower-level protocols to satisfy the discovery, publication and/or subscription request. Service information retrieved from lower-layer protocols is formatted into a consistent data model and returned to the client application. In addition, service information may be stored in a persistent data store managed by a discovery persistence service communicatively connected to the service discovery API.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07716357",
	"publication_date": "2010-05-11",
	"application_number": "10693653",
	"application_date": "2003-10-24",
	"tags": null,
	"slug": "service-discovery-and-publication",
	"match_type": "abstract"
},
{
	"name": "Storage management system having abstracted volume providers",
	"summary": "",
	"abstract": "A storage management system in which a volume provider incorporates an application programming interface (API) for receiving storage access information that characterizes high-level input/output (I/O) attributes of the storage volume such as intended access patterns, a desired level of fault handling and optimization preferences. The volume provider and the underlying storage devices conform to the specified attributes as best as possible and resolve any conflicts with the communicated attributes. The volume providers monitor the storage volumes and may reconfigure the storage volumes in order to accomplish the desired attributes.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "06904599",
	"publication_date": "2005-06-07",
	"application_number": "09450364",
	"application_date": "1999-11-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Storage platform for organizing, searching, and sharing data",
	"summary": "",
	"abstract": "Various embodiments of the present invention are directed to a storage platform comprising a database engine, a data store, an application programming interface. The data store is implemented on the database engine for storing data therein, and the data store implements a data model that supports the organization, searching, sharing, synchronization, and security of data stored in the data store. Specific types of data are described in schemas. The application programming interface enables application programs to access services and capabilities of the storage platform and to access the data described in the schemas. The storage platform supports interoperability with existing file systems, enables users and systems to synchronize data stored in different instances of the data store, and provides the ability for application programs to be notified about and to track changes made to the data in the data store.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07349913",
	"publication_date": "2008-03-25",
	"application_number": "10646646",
	"application_date": "2003-08-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for a unified composition engine in a graphics processing system",
	"summary": "",
	"abstract": "The present invention is directed to a system and method for a unified composition engine that, in general, combines previously separate composition services. The unified composition engine provides a composition service used both in-process in conjunction with application programming interfaces (API's) and on the desktop as the desktop compositor.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07012606",
	"publication_date": "2006-03-14",
	"application_number": "10692288",
	"application_date": "2003-10-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for describing and automatically managing resources",
	"summary": "",
	"abstract": "A system and method for automatically allocating resources is provided. The system includes one or more components for automatically allocating one or more resources, based at least in part on data associated with the one or more resources, the data including at least one of, type data, instance data, characteristic data, and dynamically modifiable metadata. An alternative aspect of the system provides one or more components for automatically allocating one or more resources distributed on a plurality of resource allocation servers. The one or more components for automatically allocating the one or more resources can improve utilization of the capacity of the one or more resources. In an alternative embodiment the system includes an Application Programming Interface (API) operable to configure and/or control the one or more components for automatically allocating one or more resources.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07257635",
	"publication_date": "2007-08-14",
	"application_number": "11079422",
	"application_date": "2005-03-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for enabling client applications to interactively obtain and present taxonomy information",
	"summary": "",
	"abstract": "A system and method for enabling UDDI client applications to interactively obtain taxonomy information from a UDDI server and thereby present that information to a user, such as to enable navigation through the taxonomy. An application programming interface is provided by which a client application sends a unique taxonomy identifier and a relationship qualifier (e.g., root, parent and/or child) to a server. The client may also identify a reference node within the taxonomy. The server receives the (e.g., XML) request message, and extracts the data to query a database based on the relationship qualifier (or qualifiers) and the taxonomy/reference node. Based on the query results, the server returns a response that provides relationship information to the client, such as information on root, parent and/or child nodes that satisfy the request. The client interprets the response to present the taxonomy, such as for user navigation through the taxonomy.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07447677",
	"publication_date": "2008-11-04",
	"application_number": "10607812",
	"application_date": "2003-06-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for proactive computer virus protection",
	"summary": "",
	"abstract": "A system, method, and computer readable medium for the proactive detection of malware in operating systems that receive application programming interface (API) calls is provided. A virtual operating environment for simulating the execution of programs and determining if the programs are malware is created. The virtual operating environment confines potential malware so that the systems of the host operating environment will not be adversely effected. During simulation, a behavior signature is generated based on the API calls issued by potential malware. The behavior signature is suitable for analysis to determine whether the simulated executable is malware.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07376970",
	"publication_date": "2008-05-20",
	"application_number": "10783275",
	"application_date": "2004-02-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for proactive computer virus protection",
	"summary": "",
	"abstract": "A system, method, and computer readable medium for the proactive detection of malware in operating systems that receive application programming interface (API) calls is provided. A virtual operating environment for simulating the execution of programs and determining if the programs are malware is created. The virtual operating environment confines potential malware so that the systems of the host operating environment will not be adversely effected. During simulation, a behavior signature is generated based on the API calls issued by potential malware. The behavior signature is suitable for analysis to determine whether the simulated executable is malware.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07877802",
	"publication_date": "2011-01-25",
	"application_number": "12019479",
	"application_date": "2008-01-24",
	"tags": null,
	"slug": "system-and-method-for-proactive-computer-virus-protection",
	"match_type": "abstract"
},
{
	"name": "System for abstracting audio-video codecs",
	"summary": "",
	"abstract": "A game system utilizes a codecs abstraction laver (CAL) to allow the game system to accommodate new and/or modified codecs without requiring the game application code to be modified. The CAL, functioning as an application programming interface (API), operates between media sources and the game application. The game application interacts with the CAL and not the codec. Differences between codecs are transparent to the game application. New codecs can be introduced and used by existing applications without modifying the existing application code. The CAL processes media from a variety of sources such as memory, files, http sources, queues, custom sources, external drives, or game media sources (e.g., XMedia). The CAL determines the source of the media, the type of media being received (e.g., audio, video, image, animation, or game), and the codec used to compress the media. The CAL provides the decoded media to the game application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07634727",
	"publication_date": "2009-12-15",
	"application_number": "11114510",
	"application_date": "2005-04-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Systems and methods for interfacing application programs with an item-based storage platform",
	"summary": "",
	"abstract": "Various embodiments of the present invention are directed to a storage platform comprising: a data store in which data stored therein is defined in terms of items, elements, and relationships, wherein an item is a unit of data storable in the data store and comprises one or more elements, an element is an instance of a type comprising one or more fields, and a relationship is a link between at least two items; a set of schemas that define different types of items, elements, and relationships; and an application programming interface comprising a class for each of the different items, elements, and relationships defined in the set of schemas. Data may also be stored in the data store in the form of an extension to an existing item type, and wherein the application programming interface comprises a class for each different item extension.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08131739",
	"publication_date": "2012-03-06",
	"application_number": "10646575",
	"application_date": "2003-08-21",
	"tags": null,
	"slug": "systems-and-methods-for-interfacing-application-programs-with-an-itembased-storage-platform",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for synchronizing with multiple data stores",
	"summary": "",
	"abstract": "Systems and methods for synchronizing data stores. A framework including a sync runtime enables consistent and manageable synchronization between a data store and multiple, diverse back end data stores. The sync runtime provides services such as change enumeration, conflict detection, metadata management, item ID matching, sync interruptability, and the like that are accessible to configurable adapters over an application programming interface. Each synchronizing data store can uses a sync controller to initialize an adapter that can access the services provided by the sync runtime. The sync controller can use a profile to configure each adapter. The profile can identify conflict resolution policies, synchronization filters, source and destination folders, sync direction, and the like.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07636776",
	"publication_date": "2009-12-22",
	"application_number": "10631264",
	"application_date": "2003-07-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Systems and methods for uniquely and persistently identifying networks",
	"summary": "",
	"abstract": "A service is disclosed that discovers information about the logical networks to which a computer is connected and provides that information to applications. The information is keyed to names constructed by the service. There is a mapping between the names and the logical networks. Applications may rely on the names when selecting a configuration to use with a given logical network. The network name may be correlated with other information, such as physical network interface(s) on the computer through which the logical network is accessible, application programming interfaces of the transport protocols supported by the logical network, and the connectivity type of the logical network. Applications are notified when network information provided to them changes or when new information becomes available.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07043540",
	"publication_date": "2006-05-09",
	"application_number": "11115802",
	"application_date": "2005-04-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Systems, methods, and apparatus for indicating processor hierarchical topology",
	"summary": "",
	"abstract": "The present invention utilizes a topology application programming interface (API) to provide relation information describing processor and platform topology to an executable program via a standardized interface. By providing topology information, the topology API allows the program to optimize its performance based upon the information without having to be explicitly aware of the actual platform architecture. The present invention also provides an expandable topology API that allows for future expansion of information type, without altering the standardized interface. In another instance of the present invention, the topology API collects, processes, and provides topology information about an underlying hardware architecture.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07451459",
	"publication_date": "2008-11-11",
	"application_number": "10429316",
	"application_date": "2003-05-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Template-driven XML digital signature",
	"summary": "",
	"abstract": "An XML digital signature standard is applied to an XML document to sign it. The XML digital signature is an XML fragment with a specified schema that includes (a) data to describe how the signature should be calculated (e.g., digest methods, filters, and data sources) and (b) actual signature data (e.g., digests and signature values). The data describing how the signature should be calculated (i.e., the u201cgroup (a)u201d data) is placed inside an XML digital signature template, which is then used (e.g., by an API (application programming interface)) to create the actual digital signature containing the u201cgroup (b)u201d data.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07340611",
	"publication_date": "2008-03-04",
	"application_number": "10352527",
	"application_date": "2003-01-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Touch sensitive and mechanical user input device",
	"summary": "",
	"abstract": "User interfaces or input devices are provided with both touch-sensitive (e.g., capacitive) and mechanical hardware input portions. Mechanical switches are overlaid with a touch sensitive pad, providing improved versatility of input. An application programming interface (API) enables different modes of input operation for the mechanical and touch sensitive input portions, whereby various combinations and/or permutations of touch sensitive input portions and/or mechanical input portions are enabled or disabled to provide optimal input characteristics for a set of tasks at hand. Visual or audio indicators may be utilized to reveal the mode of operation to the user. The touch sensitive pad may be a capacitive touchpad, a touch sensitive display screen, a conveyor belt or a push pad. Up to 9 mechanical switches may be placed underneath the touch sensitive input portions.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07880727",
	"publication_date": "2011-02-01",
	"application_number": "11399029",
	"application_date": "2006-04-05",
	"tags": null,
	"slug": "touch-sensitive-and-mechanical-user-input-device",
	"match_type": "abstract"
},
{
	"name": "Transformation of componentized and extensible workflow to a declarative format",
	"summary": "",
	"abstract": "Building a componentized workflow model. Each step of the workflow is modeled as an activity that has metadata to describe design time aspects, compile time aspects, and runtime aspects of the workflow step. A user selects and arranges the activities to create the workflow via user interfaces or application programming interfaces. The metadata associated with each of the activities in the workflow is collected to create a persistent representation of the workflow. Users extend the workflow model by authoring custom activities. The workflow may be compiled and executed.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07451432",
	"publication_date": "2008-11-11",
	"application_number": "11047017",
	"application_date": "2005-01-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Triggerless interactive television",
	"summary": "",
	"abstract": "Various technologies and techniques are disclosed that relate to providing interactive television by synchronizing content to live and/or recorded television shows. Content is synchronized without the use of in-band triggers. A broadcast stream is received, and search/action pairs are received from a transmission path, such as from the Internet or user. When the search criteria are found in the broadcast stream, the associated action is performed and the content is synchronized with the show. An application programming interface is used to facilitate synchronization, and includes a set search method, a search function template method, and a clear search method. The set search method initiates searching of the broadcast stream and registers one or more callback methods for performing the associated action when the match is found. The search function template serves as the template for registering the callback methods. The clear search method clears the system resources from the search.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08307403",
	"publication_date": "2012-11-06",
	"application_number": "11292868",
	"application_date": "2005-12-02",
	"tags": null,
	"slug": "triggerless-interactive-television",
	"match_type": "abstract"
},
{
	"name": "Type system",
	"summary": "",
	"abstract": "A data structure and application programming interface for creating and manipulating object model artifacts within a meta-model is provided. The data structure may include higher level abstractions of the type system to provide a set of services to implement software design tools and editors.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07590969",
	"publication_date": "2009-09-15",
	"application_number": "10824253",
	"application_date": "2004-04-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Unified mechanism for presenting and resolving grouped synchronization conflicts",
	"summary": "",
	"abstract": "Conflicts detected during synchronization of replicas are enumerated and resolved according to a specified policy, comprising conditions and actions or simply a specified action. Specified actions may be drawn from a set of standard actions and custom actions may also be composed. The conflicts are enumerated and resolved in logical groups. A logical group is a collection of one or more item envelopes, each comprising entities, such as items, links, and/or extensions. In an example configuration, both constraint-based conflicts, such as a name collision, and non-constraint-based conflicts are handled via the same application programming interface.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07805408",
	"publication_date": "2010-09-28",
	"application_number": "11450664",
	"application_date": "2006-06-09",
	"tags": null,
	"slug": "unified-mechanism-for-presenting-and-resolving-grouped-synchronization-conflicts",
	"match_type": "abstract"
},
{
	"name": "Unified storage for configuring multiple networking technologies",
	"summary": "",
	"abstract": "A network and connection provisioning framework for configuring and provisioning multiple aspects of network connectivity (e.g., multiple networks, media types, and/or connections). The framework may comprise a unified configuration interface that enables an administrator to configure multiple different types of network connectivity. A single configuration file comprising settings for multiple aspects of network connectivity may be generated based on preferences entered by a system administrator, or by exporting current settings from a particular computing device. Global configuration policies or other configuration settings that span multiple types of network connectivity may be also created and stored in one or more configuration files. Stand-alone media managers and/or plug-in modules may implement one or more standardized application programming interface functions so that they may interoperate with the network and connection provisioning framework. The standardized API may be used to ensure that configuration information is handled and stored in a standardized manner by different media managers and/or plug-in modules.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08615570",
	"publication_date": "2013-12-24",
	"application_number": "12276157",
	"application_date": "2008-11-21",
	"tags": null,
	"slug": "unified-storage-for-configuring-multiple-networking-technologies",
	"match_type": "abstract"
},
{
	"name": "Using a mobile phone to remotely control a computer via an overlay network",
	"summary": "",
	"abstract": "Systems and methods are described for using a mobile phone to remotely control a computing device. In one implementation, a communication channel between the mobile phone and the computing device uses an overlay network, such as an instant messaging (IM) service, to exchange communication data packets. An exemplary system includes a flexible layered architectureu2014which allows tailoring the system for remote control of various applications using various network configurations. Based on the overlay protocol used, a transport protocol layer can provide helpful application programming interfaces (APIs). On top of the transport protocol layer, a remote control protocol defines a framework for packet exchange of extensible commands, customizable for remote control of diverse applications. Use of paired-key encryption, IM accounts, and buddy lists ensure that communications between mobile phone and remote computer are secure.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07792924",
	"publication_date": "2010-09-07",
	"application_number": "11290797",
	"application_date": "2005-11-30",
	"tags": null,
	"slug": "using-a-mobile-phone-to-remotely-control-a-computer-via-an-overlay-network",
	"match_type": "abstract"
},
{
	"name": "Virtual magnifying glass system architecture",
	"summary": "",
	"abstract": "A display screen magnifier is controllable by a user to magnify selected portions of a desktop including windows open on the screen. A magnified image is presented within a moveable magnifier frame. The magnified image corresponds to screen content located within a magnification region underlying the magnifier frame, magnified to a set level of magnification. The magnifier is configured to remain on top of the display screen desktop, including open windows, while it is activated. It also passes events of a user input device to windows located beneath the magnifier, and dynamically updates the magnified image to reflect changes in underlying screen content. The display screen magnifier is configured to operate this way through a leveraging of resources made available by application programming interfaces (APIs) of an operating system, namely a windows style, and a second stage screen content compositing engine associated with the windows style.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07949955",
	"publication_date": "2011-05-24",
	"application_number": "11196510",
	"application_date": "2005-08-04",
	"tags": null,
	"slug": "virtual-magnifying-glass-system-architecture",
	"match_type": "abstract"
},
{
	"name": "Visual and scene graph interfaces",
	"summary": "",
	"abstract": "A method and system implemented in an application programming interface (API) and an object model allows program code developers to interface in a consistent manner with a scene graph data structure to output graphics. Via the interfaces, program code writes drawing primitives such as geometry data, image data, animation data and other data to visuals that represent a drawing surface, including validation visual objects, drawing visual objects and surface visual objects. The code can also specify transform, clipping and opacity properties on visuals, and add child visuals to other visuals to build up a hierarchical scene graph. A visual manager traverses the scene graph to provide rich graphics data to lower-level graphics components.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07466315",
	"publication_date": "2008-12-16",
	"application_number": "10693673",
	"application_date": "2003-10-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Visual and scene graph interfaces",
	"summary": "",
	"abstract": "A method and system implemented in an application programming interface (API) and an object model allows program code developers to interface in a consistent manner with a scene graph data structure to output graphics. Via the interfaces, program code writes drawing primitives such as geometry data, image data, animation data and other data to visuals that represent a drawing surface, including validation visual objects, drawing visual objects and surface visual objects. The code can also specify transform, clipping and opacity properties on visuals, and add child visuals to other visuals to build up a hierarchical scene graph. A visual manager traverses the scene graph to provide rich graphics data to lower-level graphics components.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07126606",
	"publication_date": "2006-10-24",
	"application_number": "10402268",
	"application_date": "2003-03-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Web data usage platform",
	"summary": "",
	"abstract": "An application programming interface (API) layer is implemented on a computing device. The API layer allows a local application(s) executing on the computing device to access web data in a data store layer, and further allows a remote application(s) that is executing on some other computing device to access the web data in the data store layer. Additionally, this web data can include web pages, some of which may include structured data and some of which may not include structured data. A web browser is permitted to access the web data store via the object model, and generate a user interface based at least in part on these web pages.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07917507",
	"publication_date": "2011-03-29",
	"application_number": "11705286",
	"application_date": "2007-02-12",
	"tags": null,
	"slug": "web-data-usage-platform",
	"match_type": "abstract"
},
{
	"name": "Word training interface",
	"summary": "",
	"abstract": "A method for exposing speech engine features to one or more independent applications wherein the features relate to word training and/or wherein the method optionally exposes the speech engine features without invoking a user interface. A word training interface to expose speech engine features to one or more independent applications wherein the interface is optionally an application programming interface.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07587317",
	"publication_date": "2009-09-08",
	"application_number": "10076825",
	"application_date": "2002-02-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "XNA relationship management",
	"summary": "",
	"abstract": "A data provider application programming interface (API) is configured for use with a game content editing application. An asset relationship management file, which is generated with the data provider API, includes information such as relationship references and annotations and is updated by the data provider API when a digital asset is edited. The asset relationship management file is then stored in a data store. An asset relationship graph is generated, based on the asset relationship management file in the data store. The asset relationship graph includes asset graph nodes that map dependency relationships between asset files. A graph API is also described. The graph API is configured for accessing the relationship graph through a server process to expose dependency relationships and annotations to a client process, such as an application. Thus, the effect of changes to one asset on other assets can readily be evaluated.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07836055",
	"publication_date": "2010-11-16",
	"application_number": "11343455",
	"application_date": "2006-01-31",
	"tags": null,
	"slug": "xna-relationship-management",
	"match_type": "abstract"
},
{
	"name": "Relevance-weighted navigation in information access, search and retrieval",
	"summary": "",
	"abstract": "In a method for information access, search, and retrieval over a data communication system generally, wherein a query is applied to a set of documents, a result set of the matching documents and query-dependent subsections of the matching documents are identified. The method comprises computing summary information on document scopes, values and associated weights across the result sets and weighting the values with a summary value metric which provides a measure of the probability of a value. In a search engine () capable of supporting and implementing the above method, the search engine comprises as per se known subsystems for performing search and retrieval in the form of one or more core search engines (), a content application programming interface (), a content analysis stage () and a client application programming interface () connected to the core search engine () via query analysis and result analysis stages (). In addition the search engine () for supporting the above method comprises a first module () for specifying summary value metrics (SVMs), second and third modules () for creating scopes and for assigning summary value metrics (SVMs) to the created scopes, and a fourth module () for indexing scopes, values and SVMs.",
	"url": null,
	"owner": "Microsoft International Holdings B.V.",
	"publication_number": "07966305",
	"publication_date": "2011-06-21",
	"application_number": "11979607",
	"application_date": "2007-11-06",
	"tags": null,
	"slug": "relevanceweighted-navigation-in-information-access-search-and-retrieval",
	"match_type": "abstract"
},
{
	"name": "Portable thread environment",
	"summary": "",
	"abstract": "A portable thread environment comprising: an application programming interface configured to support multiple application program tasks with each task comprised of one or more threads; host adaptation logic for communicatively interfacing the tasks and threads with a host processing environment; and a scheduler configured to determine an execution order of the one or more threads based on one or more execution variables.",
	"url": null,
	"owner": "Microtune (San Diego), Inc.",
	"publication_number": "06961934",
	"publication_date": "2005-11-01",
	"application_number": "09792550",
	"application_date": "2001-02-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Priority in a portable thread environment",
	"summary": "",
	"abstract": "A portable thread environment comprising: an application programming interface configured to support multiple application program tasks, wherein each task is either a preemptive task comprised of preemptive threads or a cooperative task comprised of cooperative threads; host adaptation logic for communicatively interfacing said cooperative tasks, preemptive tasks, cooperative threads and preemptive threads with a host processing environment; a scheduler configured to determine an execution order of cooperative threads and preemptive threads based on each cooperative thread's and preemptive thread's priority levels.",
	"url": null,
	"owner": "Microtune (San Diego), Inc.",
	"publication_number": "06904595",
	"publication_date": "2005-06-07",
	"application_number": "09852351",
	"application_date": "2001-05-08",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Centralized polling service",
	"summary": "",
	"abstract": "A centralized polling system is set forth for providing constant time select call functionality to a plurality of polling tasks in an operating system kernel. In one aspect, the CPS registers for and thereby captures events of interest on a continual basis. Polling tasks are supplied with active events thereby eliminating the need to repetitively poll large numbers of inactive sockets. An exemplary embodiment of the CPS includes a system interface to the operating system kernel, a data structure for maintaining a profile for each of the polling tasks, and an application programming interface for registering the polling tasks, receiving the active sockets and corresponding read/write event types via the system interface, updating the profile within the data structure for each of the polling tasks, and returning the current read and write ready sockets to respective ones of the polling tasks.",
	"url": null,
	"owner": "Mitel Networks Corporation",
	"publication_number": "08006005",
	"publication_date": "2011-08-23",
	"application_number": "11903438",
	"application_date": "2007-09-21",
	"tags": null,
	"slug": "centralized-polling-service",
	"match_type": "abstract"
},
{
	"name": "Industrial control with integrated machine vision",
	"summary": "",
	"abstract": "System and method for performing industrial control. A vision engine operable to execute vision functions to control a vision element in response to received asynchronous commands is stored on a vision system. An application programming interface (API) that provides access to the vision engine is stored. The API includes multiple function blocks operable to be included in an industrial control application, and executable to send the asynchronous commands to the vision engine. The application is created, including inserting at least one function block of the API into the application. The application is executed on a programmable controller, including executing the function block to send a corresponding asynchronous command to the vision engine. The vision engine performs a vision function corresponding to the function block in response to the asynchronous command, and sends resultant data to the industrial control application, which stores the resultant data.",
	"url": null,
	"owner": "National Instruments Corporation",
	"publication_number": "08155769",
	"publication_date": "2012-04-10",
	"application_number": "12049772",
	"application_date": "2008-03-17",
	"tags": null,
	"slug": "industrial-control-with-integrated-machine-vision",
	"match_type": "abstract"
},
{
	"name": "Motion controller that supports standard and custom axes",
	"summary": "",
	"abstract": "System and method for developing a motion application. A motion manager component implementing a supervisory control function and at least one trajectory generation algorithm is stored on a motion controller. A first application programming interface (API) for interfacing the motion manager component to a user developed motion control application is displayed. A second API for interfacing the motion manager component to a user developed communication interface component is displayed. A user application executable for sequencing motion operations in the motion system is created using the first API is created in response to user input. A first communication interface component is created using the second API in response to user input, where the communication interface component is operable to interface with the motion manager component using the second API, and where the user developed communication interface component is executable to communicate with a motion element, e.g., a drive or simulation.",
	"url": null,
	"owner": "National Instruments Corporation",
	"publication_number": "08082515",
	"publication_date": "2011-12-20",
	"application_number": "11948421",
	"application_date": "2007-11-30",
	"tags": null,
	"slug": "motion-controller-that-supports-standard-and-custom-axes",
	"match_type": "abstract"
},
{
	"name": "System and method for invoking execution of a sequence of operations that includes motion control, machine vision, and data acquisition (DAQ) functionality",
	"summary": "",
	"abstract": "A user may utilize a prototyping environment to create a sequence of motion control, machine vision, and/or data acquisition (DAQ) operations, e.g., without needing to write or construct code in any programming language. For example, the environment may provide a graphical user interface (GUI) enabling the user to develop/prototype the sequence at a high level, by selecting from and configuring a sequence of operations using the GUI. The prototyping environment may provide an application programming interface (API) which enables an external caller program to invoke execution of a particular sequence by the prototyping environment.",
	"url": null,
	"owner": "National Instruments Corporation",
	"publication_number": "07076332",
	"publication_date": "2006-07-11",
	"application_number": "10051599",
	"application_date": "2002-01-18",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System for dynamic information exchange",
	"summary": "",
	"abstract": "The communication bridge enables trading partner customers to mass customize their interactions with their affiliated trading partners by controlling workflow and data presentation. A method and system allows the integration of standard and proprietary content, such as data and u201clook-and-feelu201d elements, from trading partners to be presented via a standard interface for the purpose of conducting mass customized interactions (transactions, communications). There is a high degree of variability in screen and workflow presentation. A particular Application Programming Interface (API) facilitates the dynamic exchange of information between disparate trading partners and end users.",
	"url": null,
	"owner": "NaviMedix, Inc.",
	"publication_number": "07325076",
	"publication_date": "2008-01-29",
	"application_number": "09711618",
	"application_date": "2000-11-13",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for using geographic data for developing scenes for entertainment features",
	"summary": "",
	"abstract": "A system and method are disclosed for facilitating development of scenes for entertainment features, such as motion pictures or television shows, that depict or represent actual, real world (or imaginary) geographic areas. A source database contains data that represent geographic features in a region including roads in the region. The data in the source database includes attributes suitable for use for providing navigation-related functions. In addition to providing data from the source database for navigation-related functions, data from the source database are also provided for facilitating development of scenes for entertainment features that depict or represent actual, real world (or imaginary) geographic areas. An application programming interface, as well as other tools for handling geographic data, is provided for accessing and processing of the geographic data.",
	"url": null,
	"owner": "Navteq North America, LLC",
	"publication_number": "07921136",
	"publication_date": "2011-04-05",
	"application_number": "10941802",
	"application_date": "2004-09-15",
	"tags": null,
	"slug": "method-and-system-for-using-geographic-data-for-developing-scenes-for-entertainment-features",
	"match_type": "abstract"
},
{
	"name": "Method and system for using geographic data in computer game development",
	"summary": "",
	"abstract": "A system and method are disclosed for facilitating development of computer games that depict or represent actual, real world geographic areas as part of the play scenarios of the games. A source database contains data that represent geographic features in a region including roads in the region. The data in the source database includes attributes suitable for use for providing navigation-related functions. In addition to providing data from the source database for navigation-related functions, data from the source database are also provided for computer game development. An application programming interface, as well as other tools for handling geographic data, is provided for accessing and processing of the geographic data.",
	"url": null,
	"owner": "NAVTEQ North America, LLC",
	"publication_number": "07970749",
	"publication_date": "2011-06-28",
	"application_number": "10798459",
	"application_date": "2004-03-11",
	"tags": null,
	"slug": "method-and-system-for-using-geographic-data-in-computer-game-development",
	"match_type": "abstract"
},
{
	"name": "Architecture and method for operational privacy in business services",
	"summary": "",
	"abstract": "Consent-based application programming interfaces (APIs) are used to provide privacy access controls to operational systems for business services accomplished particularly in an electronic and/or networked environment. An API implementation device or host provides a link between a channel application, configured to provide an interface with a customer, and privacy data as used by operational applications and obtained from databases such as data warehouses. The privacy APIs provide per-customer choice/consent to obtaining and/or retrieval of privacy information/data and per-customer access thereto. In one form, the privacy APIs are used in business initiated self service applications wherein an activity or event triggers business to customer initiation.",
	"url": null,
	"owner": "NCR Corp.",
	"publication_number": "07167842",
	"publication_date": "2007-01-23",
	"application_number": "09604825",
	"application_date": "2000-06-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Data mining assists in a relational database management system",
	"summary": "",
	"abstract": "A method, apparatus, and article of manufacture for performing data mining applications in a relational database management system (). Scalable Data Mining Functions () are performed directly against a relational database () by executing queries dynamically generated by an application programming interface () according to requested parameters.",
	"url": null,
	"owner": "NCR Corporation",
	"publication_number": "07162464",
	"publication_date": "2007-01-09",
	"application_number": "09806743",
	"application_date": "1999-10-01",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System for providing secure access",
	"summary": "",
	"abstract": "A system implementing secure access to management information, the system () comprising: an open management service () including an open management application programming interface (); a managed object () generating management information; and an object interface () for (i) receiving management information from the object, (ii) converting the received management information into a format accessible to the open management service, and (iii) providing the management information to the open management service () in response to a valid request from a client (). The system further comprises an authorization component () for verifying an access code () associated with the request to determine if the client () is authorized to issue the request.",
	"url": null,
	"owner": "NCR Corporation",
	"publication_number": "07546300",
	"publication_date": "2009-06-09",
	"application_number": "11159082",
	"application_date": "2005-06-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Presenting differences in a file system",
	"summary": "",
	"abstract": "An embodiment of the invention provides an apparatus and method for presenting differences in a file system. In an embodiment, an application programming interface receives a request from a host, where the request is for a listing of changes in the file system within a time interval. A comparison unit determines each metadata container that has changed in the file system within the time interval. The application programming interface buffers at least one identifier that corresponds to a metadata container that has changed in the file system within the time interval. The application programming interface packages and transmits the at least one identifier to the host. The at least one identifier is readable on the host.",
	"url": null,
	"owner": "NetApp, Inc.",
	"publication_number": "07904466",
	"publication_date": "2011-03-08",
	"application_number": "11963665",
	"application_date": "2007-12-21",
	"tags": null,
	"slug": "presenting-differences-in-a-file-system",
	"match_type": "abstract"
},
{
	"name": "Server monitoring framework",
	"summary": "",
	"abstract": "A software framework configured to execute in a computer system and adapted to monitor statistics associated with one or more servers coupled to the computer system is disclosed. A data structure is configured to store statistics associated with the one or more servers coupled to the computer system. A server-monitoring thread is configured to update at least some of the statistics stored in the data structure, the server-monitoring thread to execute on a processor of the computer system. An application programming interface (API) responsive to a plurality of software modules executes in the computer system, the API is configured to process requests from the plurality of software modules for (i) adding or removing servers in the data structure or (ii) accessing statistics from the data structure. The computer system may be a network cache.",
	"url": null,
	"owner": "NetApp, Inc.",
	"publication_number": "08028056",
	"publication_date": "2011-09-27",
	"application_number": "12633296",
	"application_date": "2009-12-08",
	"tags": null,
	"slug": "server-monitoring-framework",
	"match_type": "abstract"
},
{
	"name": "Fibonacci heap for use with internet routing protocols",
	"summary": "",
	"abstract": "In accordance with an aspect of the invention, one or more shortest paths is determined through a portion of a computer network, from a source vertex to one or more destination vertices according to a link-state protocol. A graph representation of the network portion is processed. The graph representation includes nodes and edges representing the vertices and connections therebetween. The processing includes operating on the graph representation according to a Djkstra-like algorithm. A subset of the Djkstra-like algorithm processing includes candidate list processing, to maintain and operate upon a candidate list (OSPF, IS-IS) of nodes that have been visited in the Djkstra-like algorithm processing. Finally, the candidate list processing is optimized relative to standard Djkstra algorithm processing for the link-state protocol. The optimized candidate list processing may be, for example, such that the candidate list processing operates on a candidate list of nodes that is stored in a generic format, as a Fibonacci heap of Fibonacci nodes in a generic format that is independent of the link-state protocol. Furthermore, the candidate list processing may be accessible via a generic application programming interface (API). As a result, the candidate list processing is useable for various link-state protocols, including various link-state routing protocols such as OSPF and IS-IS.",
	"url": null,
	"owner": "NextHop Technologies, Inc.",
	"publication_number": "07343424",
	"publication_date": "2008-03-11",
	"application_number": "10506596",
	"application_date": "2003-06-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Multimedia application interface",
	"summary": "",
	"abstract": "An improved application programming interface (API) as described can control media resources in numerous Internet multimedia applications. The API may be independent of the application itself and the media resources underneath. The API may be referred to as a multimedia subsystem (MSS) interface.",
	"url": null,
	"owner": "Nokia Corporation",
	"publication_number": "07917639",
	"publication_date": "2011-03-29",
	"application_number": "10516284",
	"application_date": "2002-05-31",
	"tags": null,
	"slug": "multimedia-application-interface",
	"match_type": "abstract"
},
{
	"name": "Shared landmark user interfaces",
	"summary": "",
	"abstract": "A method, system, and computer program product provide access to user information, such as landmarks, without applications having to implement the needed user interface functionality on their own. In one embodiment, common landmark user interface components are offered with application programming interfaces (APIs) for controlling the user interfaces. By utilizing this kind of common user interface, all applications can utilize landmarks.",
	"url": null,
	"owner": "Nokia Corporation",
	"publication_number": "07814502",
	"publication_date": "2010-10-12",
	"application_number": "10866943",
	"application_date": "2004-06-14",
	"tags": null,
	"slug": "shared-landmark-user-interfaces",
	"match_type": "abstract"
},
{
	"name": "System, apparatus, and method for providing generic internet protocol authentication",
	"summary": "",
	"abstract": "Generic Internet Protocol (IP) authentication is provided by authentication server (). Application Programming Interface (API) () detects the protocol type of an incoming authentication request and invokes one of a number of authentication mechanisms (-) depending on the protocol type detected. A localized repository () is provided to store Subscriber Identity Module (SIM) information and other algorithm data as required to facilitate the authentication session.",
	"url": null,
	"owner": "Nokia Corporation",
	"publication_number": "07421732",
	"publication_date": "2008-09-02",
	"application_number": "10429918",
	"application_date": "2003-05-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Extensible domain name service",
	"summary": "",
	"abstract": "In various embodiments the extensible attribute within the extended DNS is accessed through an application programming interface (API). This API is configured to facilitate input and output of the extended DNS data and to allow an external application to identify and interchange those attribute data that the external application is configured to process.",
	"url": null,
	"owner": "Nominum, Inc.",
	"publication_number": "07761570",
	"publication_date": "2010-07-20",
	"application_number": "10870282",
	"application_date": "2004-06-16",
	"tags": null,
	"slug": "extensible-domain-name-service",
	"match_type": "abstract"
},
{
	"name": "Interface method and system for accessing inner layers of a network protocol",
	"summary": "",
	"abstract": "A method of performing network communications includes receiving a datagram for transmitting information over a network, selecting a layer in a network protocol stack to establish communication over the network using an inner layer application programming interface (IL API), establishing an inner layer socket at the selected network layer using the IL API without accessing other layers in the layered network protocol stack, and transmitting the datagram packet over the selected layer using the inner layer socket.",
	"url": null,
	"owner": "Nortel Networks Limited",
	"publication_number": "06845397",
	"publication_date": "2005-01-18",
	"application_number": "09753019",
	"application_date": "2000-12-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for accessing low-level resources in a network device",
	"summary": "",
	"abstract": "A method and system provides access to information about a resource associated with a network device. The method and system selects a layer for communicating with the requested resource associated with the network device in a network protocol stack having multiple layers, establishes an inner layer socket for communicating at the selected layer using an inner layer application programming interface (IL API) and a socket identifier associated with the requested resource, wherein the inner layer socket communicates using the selected layer and bypasses other layers in the network protocol stack, transmits the request for information about the resource through the inner layer socket and the socket identifier, receives the information about the resource in response to the transmission made through the inner layer socket, and passes the information about the resource through the inner layer socket to the application making the request.",
	"url": null,
	"owner": "Nortel Networks Limited",
	"publication_number": "06976054",
	"publication_date": "2005-12-13",
	"application_number": "09753359",
	"application_date": "2000-12-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Navigation receiver with functional extensibility",
	"summary": "",
	"abstract": "A global navigation satellite system receiver manufacturer provides functional extensibility to a global navigation satellite system receiver. An application programming interface to the receiver is provided. The interface is public, such as using pubically available software or pubically distributed instructions, for loading on applications or other extensions to the core functionality of the GPS receiver. Other programmers than the manufacturer may add applications to the GPS receiver, avoiding separate devices in a vehicle.",
	"url": null,
	"owner": "Novariant, Inc.",
	"publication_number": "07561967",
	"publication_date": "2009-07-14",
	"application_number": "11193644",
	"application_date": "2005-07-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Communication interface for providing accounting support for print services",
	"summary": "",
	"abstract": "An application-to-application communication interface between an accounting service application and a printer agent application resides on a computer network. The interface is embodied as novel application programming interface (API) functions or calls between the applications that provide accounting support for print services, including tracking the production of print jobs and the resources consumed by those jobs. The accounting support services provided by the novel API communication interface facilitate computing of charges by the accounting application for print services and materials used by print clients.",
	"url": null,
	"owner": "Novell, Inc.",
	"publication_number": "07475031",
	"publication_date": "2009-01-06",
	"application_number": "09390954",
	"application_date": "1999-09-07",
	"tags": null,
	"slug": "communication-interface-for-providing-accounting-support-for-print-services",
	"match_type": "abstract"
},
{
	"name": "Information storage and retrieval system for storing and retrieving the visual form of information from an application in a database",
	"summary": "",
	"abstract": "The visual form of data from a computer program is received and stored in a database. The visual form of the data may be received, for example, in response to a print operation by the computer program or by some other operation such as a cut and paste sequence of operations or by sending the data to another application. The visual form of the data may be stored as a vector image that permits scalability. The visual form of the data may be stored with other identifying information or tags in the database to facilitate searching of the database. The data in the database may be encoded in a manner that ensures data integrity and that permits detection of when data has been compromised. In one embodiment, a service layer application is provided to control access to the database by performing encoding and decoding of the data in the database. The service layer may have an application programming interface that permits many applications to have access to the database. Another application may be provided for accessing the visual form of the data from the database and for providing this data to another computer program. Such an application permits a user to create compound documents from data in the database using the other computer program.",
	"url": null,
	"owner": "Nugenesis Technologies Corporation",
	"publication_number": "07143109",
	"publication_date": "2006-11-28",
	"application_number": "09880393",
	"application_date": "2001-06-13",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Integer-based functionality in a graphics shading language",
	"summary": "",
	"abstract": "One embodiment of the present invention sets forth a technique for improving the flexibility and programmability of a graphics pipeline by adding application programming interface (API) extensions to the OpenGL Shading Language (GLSL) that provide native support for integer data types and operations. The integer API extensions span from the API to the hardware execution units within a graphics processing unit (GPU), thereby providing native integer support throughout the graphics pipeline.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08044951",
	"publication_date": "2011-10-25",
	"application_number": "11565543",
	"application_date": "2006-11-30",
	"tags": null,
	"slug": "integerbased-functionality-in-a-graphics-shading-language",
	"match_type": "abstract"
},
{
	"name": "Method and system for enabling a device to support enhanced features",
	"summary": "",
	"abstract": "A method and system for enabling an auxiliary system, such as a WINDOWSu00ae SIDESHOWu2122 device, to support enhanced features is provided. Specifically, one embodiment of the present invention sets forth a method, which includes the steps of emulating a physical communication channel to establish a virtual communication channel, encapsulating data associated with a first function defined by a first Application Programming Interface (API) and utilized to implement an enhanced feature, and sending the encapsulated data through the virtual communication channel for an embedded operation system (OS) to manage hardware resources of the auxiliary system to perform the enhanced feature.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08069449",
	"publication_date": "2011-11-29",
	"application_number": "11965000",
	"application_date": "2007-12-27",
	"tags": null,
	"slug": "method-and-system-for-enabling-a-device-to-support-enhanced-features",
	"match_type": "abstract"
},
{
	"name": "Methods and systems for in-place shader debugging and performance tuning",
	"summary": "",
	"abstract": "One embodiment of the present invention sets forth a system that allows a software developer to perform shader debugging and performance tuning. The system includes an interception layer between the software application and the application programming interface (API). The interception layer is configured to intercept and store source code versions of the original shaders included in the application. For each object in the frame, the interception layer makes shader source code available to the developer, so that the developer can modify the source code as needed, re-compile only the modified shader source code, and run the application. Consequently, shader debugging and performance tuning may be carried out in a manner that is more efficient and effective relative to prior art approaches.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08276129",
	"publication_date": "2012-09-25",
	"application_number": "11838169",
	"application_date": "2007-08-13",
	"tags": null,
	"slug": "methods-and-systems-for-inplace-shader-debugging-and-performance-tuning",
	"match_type": "abstract"
},
{
	"name": "System and method for detecting errors in audio data",
	"summary": "",
	"abstract": "An application programming interface (API) executed by a first processing unit combines audio data samples with error code values generated for those samples. The API then causes a data stream to be opened having sufficient bandwidth to accommodate combined samples made up of audio data samples and corresponding error code values. The combined samples are then transmitted to a decoder and validation unit within a second processing unit that receives the combined data, strips the error code values and validates the audio data based on the error code values. When the error code values indicate that the audio data has been compromised, the second processing unit terminates the output of sound derived from the audio data.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08938661",
	"publication_date": "2015-01-20",
	"application_number": "13564610",
	"application_date": "2012-08-01",
	"tags": null,
	"slug": "system-and-method-for-detecting-errors-in-audio-data",
	"match_type": "abstract"
},
{
	"name": "Method and system for running multiple virtual machines in a single process",
	"summary": "",
	"abstract": "A method and system for running a Java ME application on a computer system are described. The Java ME application is a software program designed for execution on a resource-constrained platform. A first virtual machine is launched in a process, the first virtual machine being is caused to run an application emulator. A second virtual machine is launched in the process, the second virtual machine being caused to run the Java ME application. The application emulator interfaces with application programming interfaces of the second virtual machine to interface with inputs and outputs of the Java ME application and redirect the inputs and outputs to local devices controlled by the application emulator.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "07730492",
	"publication_date": "2010-06-01",
	"application_number": "11744044",
	"application_date": "2007-05-03",
	"tags": null,
	"slug": "method-and-system-for-running-multiple-virtual-machines-in-a-single-process",
	"match_type": "abstract"
},
{
	"name": "System and method for programmatic management of distributed computing resources",
	"summary": "",
	"abstract": "Systems and methods for providing a development and deployment platform for Software as a Service (SaaS) providers are disclosed. The platform may provide an application programming interface (API) through which customers may configure virtualized grids of language-level virtual machines (VMs), networks, and storage resources. A grid may be horizontally scalable and programmatically configurable by a customer and/or customer code. The platform may allow dynamic scaling of resources (up and down) to match changing demands, by allowing customers and/or customer code to programmatically alter their own system level structure at runtime, through the API. The grid may be accessed by both on-grid and off-grid processes, through internal and external connectivity resources provided by the platform. The platform may provide common utilities for end-user services, deployment operations, and development tasks (e.g., debugging), and may include frameworks and macro-components (e.g. web servers). The platform may host long-running Internet-based services and/or one-shot computational services.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "07886021",
	"publication_date": "2011-02-08",
	"application_number": "12110880",
	"application_date": "2008-04-28",
	"tags": null,
	"slug": "system-and-method-for-programmatic-management-of-distributed-computing-resources",
	"match_type": "abstract"
},
{
	"name": "Support vector machines processing system",
	"summary": "",
	"abstract": "An implementation of SVM functionality improves efficiency, time consumption, and data security, reduces the parameter tuning challenges presented to the inexperienced user, and reduces the computational costs of building SVM models. A system for support vector machine processing comprises data stored in the system, a client application programming interface operable to provide an interface to client software, a build unit operable to build a support vector machine model on at least a portion of the data stored in the system, based on a plurality of model-building parameters, a parameter estimation unit operable to estimate values for at least some of the model-building parameters, and an apply unit operable to apply the support vector machine model using the data stored in the system.",
	"url": null,
	"owner": "Oracle Corporation",
	"publication_number": "07490071",
	"publication_date": "2009-02-10",
	"application_number": "10927111",
	"application_date": "2004-08-27",
	"tags": null,
	"slug": "support-vector-machines-processing-system",
	"match_type": "abstract"
},
{
	"name": "Application interface including dynamic transform definitions",
	"summary": "",
	"abstract": "An application programming interface configured to transform data responsive to a transform process definition. The transform process definition is interpreted concurrently with the transformation process. This interpretation dynamically determines navigation within, and processing of, the data to be transformed. Under control of the transform process definition, a transform engine is configured to transform input data using recursive calls to a transformation process. The recursive approach is responsive to data structures within the transform process definition and simplifies operations such as parallel processing, load-balancing of transformation tasks, nesting, un-nesting, filtering, and the like.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07970779",
	"publication_date": "2011-06-28",
	"application_number": "10661167",
	"application_date": "2003-09-12",
	"tags": null,
	"slug": "application-interface-including-dynamic-transform-definitions",
	"match_type": "abstract"
},
{
	"name": "Architecture for a scalable and user-extensible heap dump analysis tool",
	"summary": "",
	"abstract": "A heap analyzer that processes a snapshot of the heap contained in a dump file is described. The heap analyzer tool can be configured to relocate the pointers in the dumped heap and allow developers to examine the heap in web browser by presenting markup for displaying a heap object in the browser and rendering pointers in the object as clickable links. When a link is selected, the pointer is followed to another object and markup is generated for rendering that object with its links. Furthermore, callbacks may be provided through an application programming interface (API) to allow developers to furnish their own code for analyzing and displaying their data structures.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07249235",
	"publication_date": "2007-07-24",
	"application_number": "10872536",
	"application_date": "2004-06-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Lightweight highly available infrastructure to trace program execution",
	"summary": "",
	"abstract": "A portable tracing utility provides trace configuration, trace instrumentation and trace management functionality for single or multithreaded programs. Through various application programming interfaces (u201cAPIsu201d) of the tracing utility, a client may control tracing behavior to setup in-memory data structures for storing trace records that record the program's history of execution or to alter the granularity of execution history being traced. The trace behavior can be modified during the life of a program by using the APIs, either dynamically when the program assumes certain states, or through remote procedure calls issued by, for example, an external interface. Programs are instrumented with these APIs to record the history of execution, which during execution of the program is stored in circular in-memory buffers.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07770154",
	"publication_date": "2010-08-03",
	"application_number": "11173675",
	"application_date": "2005-07-01",
	"tags": null,
	"slug": "lightweight-highly-available-infrastructure-to-trace-program-execution",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for making inter-process procedure calls through shared memory",
	"summary": "",
	"abstract": "One embodiment of the present invention provides a system that facilitates making an inter-process procedure call through a shared memory that is shared between a client process and a server process, wherein the client makes the inter-process procedure call as if the client is making a local procedure call, but the procedure call actually executes on the server. The system operates by providing an Application Programming Interface (API) to allow the client to make an inter-process procedure call. The system then allocates a section of the shared memory for the data structure parameters of the inter-process procedure call.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07779417",
	"publication_date": "2010-08-17",
	"application_number": "11259240",
	"application_date": "2005-10-25",
	"tags": null,
	"slug": "method-and-apparatus-for-making-interprocess-procedure-calls-through-shared-memory",
	"match_type": "abstract"
},
{
	"name": "Object relational mapping layer",
	"summary": "",
	"abstract": "An integration server system for mapping data objects on a database schema offers a strongly-typed model API, complex constraint management, and association balancing. The integration server system also has improved performance through optimized handling of ordered associations of data object and of string-valued attributes. The integration server system comprises a database schema configured to store a set of data object instances. A metadata model represents a configuration of the set of data object instances in the database schema. A model application programming interface provides a client application with access to the set of data object instances, and a metadata application programming interface provides a client application with access to the set of data object instances via the metadata model.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07599948",
	"publication_date": "2009-10-06",
	"application_number": "10684055",
	"application_date": "2003-10-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Object relational mapping layer",
	"summary": "",
	"abstract": "An integration server system for mapping data objects on a database schema offers a strongly-typed model API, complex constraint management, and association balancing. The integration server system also has improved performance through optimized handling of ordered associations of data object and of string-valued attributes. The integration server system comprises a database schema configured to store a set of data object instances. A metadata model represents a configuration of the set of data object instances in the database schema. A model application programming interface provides a client application with access to the set of data object instances, and a metadata application programming interface provides a client application with access to the set of data object instances via the metadata model.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08145685",
	"publication_date": "2012-03-27",
	"application_number": "12192898",
	"application_date": "2008-08-15",
	"tags": null,
	"slug": "object-relational-mapping-layer",
	"match_type": "abstract"
},
{
	"name": "Support Vector Machines in a relational database management system",
	"summary": "",
	"abstract": "An implementation of SVM functionality integrated into a relational database management system (RDBMS) improves efficiency, time consumption, and data security, reduces the parameter tuning challenges presented to the inexperienced user, and reduces the computational costs of building SVM models. A database management system comprises data stored in the database management system and a processing unit comprising a client application programming interface operable to provide an interface to client software, a build unit operable to build a support vector machine model on at least a portion of the data stored in the database management system, and an apply unit operable to apply the support vector machine model using the data stored in the database management system. The database management system may be a relational database management system.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07565370",
	"publication_date": "2009-07-21",
	"application_number": "10927024",
	"application_date": "2004-08-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for online analytical processing",
	"summary": "",
	"abstract": "A system and method for analyzing data is described, in which an application programming interface (API) is provided to permit an online analytical processing (OLAP) application to manipulate data and queries in a model close to the business model the OLAP application was designed to support. A data server is provided to translate between the object-oriented representation and the native database query format. In one embodiment, a multidimensional virtual cursor is implemented to further simplify the logic of the OLAP application.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07010523",
	"publication_date": "2006-03-07",
	"application_number": "10738789",
	"application_date": "2003-12-17",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for providing SPI extensions for content management system",
	"summary": "",
	"abstract": "A virtual content repository (VCR) is a logical representation of one or more individual content repositories. The VCR uses a common Application Programming Interface (API) and a Service Provider Interface (SPI) to provide a single access point to one or more individual content repositories. The API describes how applications can interface with program logic and functionality provided by the content management system and the SPI describes how a content repository can be integrated into the VCR. A SPI adapter can be interposed between the at least one non-compliant repository in the VCR and the SPI. The SPI adapter can map a request to the non-compliant repository and provide content received from the non-compliant repository to originators of the requests.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08316025",
	"publication_date": "2012-11-20",
	"application_number": "13083332",
	"application_date": "2011-04-08",
	"tags": null,
	"slug": "system-and-method-for-providing-spi-extensions-for-content-management-system",
	"match_type": "abstract"
},
{
	"name": "System and method for providing SPI extensions for content management system",
	"summary": "",
	"abstract": "In accordance with embodiments, there are provided mechanisms and methods for providing extensions to a Service Provider Interface (SPI) in a content management system. These mechanisms and methods for providing extensions to a Service Provider Interface (SPI) in a content management system can enable embodiments to integrate one or more of a plurality of content repositories into a virtual content repository (VCR) by mapping requests to access content received via a common Application Programming Interface (API) to at least one JSR-170 compliant repository and at least one SPI compliant repository. The ability of embodiments to provide so integrate disparate content repositories can enable one or more of navigation, CRUD operations (create, read, update, delete), versioning, workflows, and searching operations to operate on a plurality of repositories as though the plurality of repositories were one repository.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07953734",
	"publication_date": "2011-05-31",
	"application_number": "11435163",
	"application_date": "2006-05-16",
	"tags": null,
	"slug": "system-and-method-for-providing-spi-extensions-for-content-management-system",
	"match_type": "abstract"
},
{
	"name": "System and method for utilizing a common framework for portal administration tools",
	"summary": "",
	"abstract": "The present invention relates to systems, methods, and computer readable media for generating custom administrative tools. An administrative framework is provided that abstracts the implementation of certain administrative functions. A management Application Programming Interface (API) receives calls submitted in a preconfigured format from interface components generated by a developer or third party. The management API processes the calls and performs the functions associated with the calls. Multiple implementations are provided, through which an interface component can access the management API.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08065415",
	"publication_date": "2011-11-22",
	"application_number": "10962090",
	"application_date": "2004-10-08",
	"tags": null,
	"slug": "system-and-method-for-utilizing-a-common-framework-for-portal-administration-tools",
	"match_type": "abstract"
},
{
	"name": "Distributed meta data management middleware",
	"summary": "",
	"abstract": "A meta data management system for use with a surveillance system includes a user interface that allows users to define rules to manage meta data from distributed devices. An application programming interface provides an application access to system data and control information. A mechanism allows the application to transparently and seamlessly integrate with different types of databases by transparently allocating and searching the data that are physically distributed at different devices.",
	"url": null,
	"owner": "Panasonic Corporation",
	"publication_number": "07567956",
	"publication_date": "2009-07-28",
	"application_number": "11354774",
	"application_date": "2006-02-15",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Server-side wireless communications link support for mobile handheld devices",
	"summary": "",
	"abstract": "A server-based method for implementing a communications link. The method includes receiving via a communications network a request for a communications link from a client communications component executing on a handheld device and establishing a wireless communications link with the handheld device by using a server communications interface executing on the server. An optimized protocol is automatically implemented between the client communications component and the server based on the wireless communications link type and the handheld device type, wherein the optimized protocol is implemented while maintaining a standardized application programming interface for the server communications interface, and wherein the communications link is established via the communications component functioning with a device API component to configure hardware of the handheld device.",
	"url": null,
	"owner": "Phunware, Inc.",
	"publication_number": "08009619",
	"publication_date": "2011-08-30",
	"application_number": "11977319",
	"application_date": "2007-10-23",
	"tags": null,
	"slug": "serverside-wireless-communications-link-support-for-mobile-handheld-devices",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing remote access to the facilities of a server computer",
	"summary": "",
	"abstract": "A method and system for providing remote access to the facilities of a server computer are provided. A site integration application programming interface at a co-branded Web site. The site integration application programming interface exposes a number of servlets that may be executed in response to requests received from a business partner Web site over a secure communications link. The servlets provide functionality for accessing the user registration and deletion facilities of the co-branded Web site. Moreover, the servlets also provide access to other administrative facilities provided at the co-branded Web site. The servlets also provide functionality for authorizing a user to access the co-branded we site. This servlet may be executed in conjunction with the login facilities of the business partner web site to permit concurrent login at both sites.",
	"url": null,
	"owner": "Punch Networks Corporation",
	"publication_number": "07730089",
	"publication_date": "2010-06-01",
	"application_number": "09927899",
	"application_date": "2001-08-10",
	"tags": null,
	"slug": "method-and-system-for-providing-remote-access-to-the-facilities-of-a-server-computer",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems GmbH & Co. KG",
	"publication_number": "07830372",
	"publication_date": "2010-11-09",
	"application_number": "10928698",
	"application_date": "2004-08-30",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems Limited",
	"publication_number": "08648852",
	"publication_date": "2014-02-11",
	"application_number": "13858506",
	"application_date": "2013-04-08",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Method and system for providing transparent access to hardware graphic layers",
	"summary": "",
	"abstract": "The present invention relates generally to computer graphics, and more specifically to methods of, and systems for, configuring, controlling and accessing multiple hardware graphics layers that are used to compose a single video display. One aspect of the invention is broadly defined as follows: in a computer environment including a software application and an operating system running on a computer, the computer including a graphics card and a video display, the graphics card being operable to render images to the video display, the improvement comprising: the operating system including a universal application programming interface (API) which supports hardware layers on graphics cards; the operating system being operable to: receive draw events via the universal API; determine what hardware layers are available on the graphics card, and what their parameters are; and respond to draw requests from the software application by rendering the draw requests selectively to any of the available hardware layers on the graphics card; whereby the computer environment allows software applications to exploit available hardware layers on the graphics card.",
	"url": null,
	"owner": "QNX Software Systems Limited",
	"publication_number": "08098246",
	"publication_date": "2012-01-17",
	"application_number": "12940162",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "method-and-system-for-providing-transparent-access-to-hardware-graphic-layers",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for supporting broadcast/multicast IP packets through a simplified sockets interface",
	"summary": "",
	"abstract": "A method for configuring an IP address to receive broadcast or multicast data flow which modifies the bind( ) Application Programming Interface (API) to survey available local interfaces to determine their ability to be configured to receive data from a particular IP address, configure a interface to receive the IP address if it is so configurable, bind the IP address to that interface. The modified bind*( ) API may interact with one or more interfaces to see if each interface is capable of being configured to the IP address. Alternatively, the modified bind*( ) API determines the configurability of interfaces by consulting the access control list. Policy based routing rules may be implemented so that the modified bind*( ) operation configures the highest priority interface based upon policy parameters.",
	"url": null,
	"owner": "QUALCOMM Incorporated",
	"publication_number": "08180899",
	"publication_date": "2012-05-15",
	"application_number": "11835001",
	"application_date": "2007-08-07",
	"tags": null,
	"slug": "apparatus-and-method-for-supporting-broadcastmulticast-ip-packets-through-a-simplified-sockets-interface",
	"match_type": "abstract"
},
{
	"name": "Providing transparent CDMA short message service using non-CDMA mobile devices, smart cards and networks",
	"summary": "",
	"abstract": "Methods and systems for sending, receiving, storing, and reading CDMA type SMS messages on wireless non-CDMA or multimode mobile devices include embedding a CDMA SMS message in a non-CDMA SMS host message. Such a host message may be created, transmitted, received, or otherwise processed by a mobile device, such as one operating in a GSM or UMTS mode. Similarly a CDMA SMS message may be stored in a SIM/USIM module using similar techniques. An embodiment provides a software application programming interface (API) which transparently processes SMS messages regardless of whether they are CDMA or non-CDMA and regardless of the operating mode of the mobile device.",
	"url": null,
	"owner": "QUALCOMM Incorporated",
	"publication_number": "08249629",
	"publication_date": "2012-08-21",
	"application_number": "11963990",
	"application_date": "2007-12-24",
	"tags": null,
	"slug": "providing-transparent-cdma-short-message-service-using-noncdma-mobile-devices-smart-cards-and-networks",
	"match_type": "abstract"
},
{
	"name": "Wireless communication device having dynamically escalated media transmission handling",
	"summary": "",
	"abstract": "A wireless communication device that dynamically escalates media transmission handling on the resident computer platform operating system through passing priority data bundles that include media directly from an application programming interface to the wireless communication interface. The application programming interface generates an outgoing priority data bundle including media, and a media handler directs the outgoing priority data bundle directly to the wireless communication interface for transmission without handling of the outgoing priority data bundle by other software layers of the operating system. The same priority handling can be done with incoming data bundles received at the wireless communication interface and being sent to an application programming interface.",
	"url": null,
	"owner": "Qualcomm Incorporated",
	"publication_number": "08023982",
	"publication_date": "2011-09-20",
	"application_number": "12119049",
	"application_date": "2008-05-12",
	"tags": null,
	"slug": "wireless-communication-device-having-dynamically-escalated-media-transmission-handling",
	"match_type": "abstract"
},
{
	"name": "Backup systems and methods for a virtual computing environment",
	"summary": "",
	"abstract": "Improved backup and storage operations are disclosed for virtual computing environments using a backup proxy server to perform storage operations on one or more virtual machine disks. The proxy server can include a module that intercepts application programming interface (API) calls, for writing backup data to a first location, prior to the data arriving on the proxy disk. During the intercept process, the data can be compressed in memory pages of the proxy server and redirected to an alternative backup disk location. The proxy server can also include a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently, only blocks with non-matching signatures are processed for backup.",
	"url": null,
	"owner": "Quest Software, Inc.",
	"publication_number": "08060476",
	"publication_date": "2011-11-15",
	"application_number": "12502052",
	"application_date": "2009-07-13",
	"tags": null,
	"slug": "backup-systems-and-methods-for-a-virtual-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Virus detection in mobile devices having insufficient resources to execute virus detection software",
	"summary": "",
	"abstract": "A virus scanning system which scans a mobile device/mobile device for files containing viruses even if the files are not executable on the mobile device. Corrective actions such as removing the files can be performed once the viruses are detected. As a result, viruses which are not executable (as being designed for other mobile device types) can also be detected and removed from mobile devices. According to another aspect, a common interface is provided when a virus scanning program requests data from mobile devices, and the computer is provided with different remote application programming interfaces suited to retrieve the specified data from the corresponding mobile devices. As a result, the computer can be extended to integrate scanning of new device types easily. According to one more aspect, a scanning program retrieves only data portions required for continuing the scan operation. According to yet another aspect, the program modules and virus definitions for scanning are received from a server on a network.",
	"url": null,
	"owner": "Quick Heal Technologies Private Limited",
	"publication_number": "07945955",
	"publication_date": "2011-05-17",
	"application_number": "11853071",
	"application_date": "2007-09-11",
	"tags": null,
	"slug": "virus-detection-in-mobile-devices-having-insufficient-resources-to-execute-virus-detection-software",
	"match_type": "abstract"
},
{
	"name": "Information viewing stem",
	"summary": "",
	"abstract": "According to one embodiment, an information viewing system includes an ontology viewing engine coupled to a client and a knowledge store that stores records organized according to a domain ontology. The ontology viewing engine receives requests for records from the client, filters the domain ontology according to a display ontology, generates a graphical user interface (GUI) according to the display ontology including the requested records, and transmits the GUI to the client through an application programming interface of the GUI.",
	"url": null,
	"owner": "Raytheon Company",
	"publication_number": "08219540",
	"publication_date": "2012-07-10",
	"application_number": "12712852",
	"application_date": "2010-02-25",
	"tags": null,
	"slug": "information-viewing-stem",
	"match_type": "abstract"
},
{
	"name": "Application reporting library",
	"summary": "",
	"abstract": "An apparatus and a method for detecting and reporting malfunctions in computer programs is described. A reporting library of an Application Programming Interface (API) is configured to direct a report of software malfunction to a specified server. The API is implemented in an application to be executed on a computer system. The application implementing the API is to report software malfunction of the application to the specified server.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08245082",
	"publication_date": "2012-08-14",
	"application_number": "12713009",
	"application_date": "2010-02-25",
	"tags": null,
	"slug": "application-reporting-library",
	"match_type": "abstract"
},
{
	"name": "Combined join and state transfer",
	"summary": "",
	"abstract": "A method and apparatus for processing messages is described. In one embodiment, an application programming interface provides for a flush protocol to force members of a group to send all of their pending messages prior to a predetermined event. A client sends a request to a coordinator of the group to join the group and to transfer a state of the group to the client. The application programming interface performs a single flush operation on the group in response to the request.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08312084",
	"publication_date": "2012-11-13",
	"application_number": "12074089",
	"application_date": "2008-02-28",
	"tags": null,
	"slug": "combined-join-and-state-transfer",
	"match_type": "abstract"
},
{
	"name": "Concurrent stack",
	"summary": "",
	"abstract": "A method and apparatus for processing message is described. In one embodiment, an application programming interface is configured for receiving and sending messages. A building block layer is coupled to the application programming interface. A channel layer is coupled to the building block layer. A transport protocol stack is coupled to the channel layer for implementing properties specified by the channel layer. The transport protocol stack has a concurrent stack consisting of an out of band thread pool and a regular thread pool. The transport protocol layer is to process messages from each sender in parallel with the corresponding channel for each sender.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "07921227",
	"publication_date": "2011-04-05",
	"application_number": "11809225",
	"application_date": "2007-05-30",
	"tags": null,
	"slug": "concurrent-stack",
	"match_type": "abstract"
},
{
	"name": "Methods for determining battery statistics using a system-wide daemon",
	"summary": "",
	"abstract": "Techniques for determining battery statistics using a system-wide daemon are described herein. According to one embodiment, a power management daemon is configured to collect operating status data of a battery of a data processing system by accessing at least one of firmware and hardware coupled to the battery. The power management daemon is a single system-wide component within the data processing system to provide the operating status data of the battery to multiple clients. The power management daemon is also configured to compute battery statistics based on the collected operating status data of the battery. In response to a query received from one of the clients via an application programming interface (API), the power management daemon is configured to return the battery statistics to the client to enable the client to determine remaining time of the battery until being recharged. Other methods and apparatuses are also described.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08375236",
	"publication_date": "2013-02-12",
	"application_number": "12535139",
	"application_date": "2009-08-04",
	"tags": null,
	"slug": "methods-for-determining-battery-statistics-using-a-systemwide-daemon",
	"match_type": "abstract"
},
{
	"name": "Methods for managing process activity data using a system-wide daemon",
	"summary": "",
	"abstract": "Techniques for managing process activity statistics using a system-wide daemon are described herein. A power management daemon retrieves process activity status data from a system monitoring file stored within a data processing system, in response to a request received from a session client via an application programming interface (API). The power management daemon is a single system-wide component within the data processing system to provide the process activity status data to a plurality of session clients. The retrieved process activity status data is returned to the client via the API, where the system monitoring file requires a predetermined accessing privilege for accessing. Thus, through the power management daemon, the session client does not have to satisfy the predetermined accessing privilege in order to access the process activity status data stored in the system monitoring file.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08307230",
	"publication_date": "2012-11-06",
	"application_number": "12551158",
	"application_date": "2009-08-31",
	"tags": null,
	"slug": "methods-for-managing-process-activity-data-using-a-systemwide-daemon",
	"match_type": "abstract"
},
{
	"name": "Multiplex transport",
	"summary": "",
	"abstract": "A remoting client and a remoting server are described. In one embodiment, the remoting client has a client remote access application comprising an application programming interface (API), and a client invoker coupled to the client remote access application, the socket invoker comprising a multiplex invoker. The multiplex invoker is to form a socket on the remoting client, to bind the socket to a port of the remoting client, to couple the socket to a socket of a remoting server, to form a plurality of virtual sockets on the remoting client, and to associate the plurality of virtual sockets with the socket of the remoting client. The plurality of virtual sockets share the socket and the port of the remoting client.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08260934",
	"publication_date": "2012-09-04",
	"application_number": "11897563",
	"application_date": "2007-08-31",
	"tags": null,
	"slug": "multiplex-transport",
	"match_type": "abstract"
},
{
	"name": "Out of band messages",
	"summary": "",
	"abstract": "A method and apparatus for processing message is described. In one embodiment, an application programming interface is configured for receiving and sending messages. A building block layer is coupled to the application programming interface. A channel layer is coupled to the building block layer. A transport protocol stack is coupled to the channel layer for implementing properties specified by the channel layer. The transport protocol stack has a concurrent stack consisting of an out of band thread pool and a regular thread pool. The regular thread pool forms one thread for every messages from a sender. The out of band thread pool to form one thread for messages marked as out of band from the sender. Messages processed with the thread from the out of band thread pool are processed before messages processed with the regular thread pool.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "07733863",
	"publication_date": "2010-06-08",
	"application_number": "11809076",
	"application_date": "2007-05-30",
	"tags": null,
	"slug": "out-of-band-messages",
	"match_type": "abstract"
},
{
	"name": "Method and system for distributing and executing service logic",
	"summary": "",
	"abstract": "A method of distributing and executing service logic across private and public networks for the generation and provision of telecommunication services is disclosed. The functionality and capabilities associated with both Intelligent Network (IN) and non-IN compliant elements of a public telecommunications system are abstracted using a set of control and informational parameters and variables which are associated with a given network element or network element category. A service creation and execution application programming interface provides access to a service creation and execution environment which is distributed in public network gateways, private network gateways, and in compatible software platforms. The distributed service creation and execution environment enable the generation, provisioning, and execution of applications across private and public telecommunication networks in order to provide novel telecommunication services via the serial or concurrent invocation of one or more distributed applications.",
	"url": null,
	"owner": "Redknee Inc.",
	"publication_number": "07277444",
	"publication_date": "2007-10-02",
	"application_number": "10066745",
	"application_date": "2002-02-06",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method for distributing and executing service logic",
	"summary": "",
	"abstract": "A method of distributing and executing service logic across private and public networks for the generation and provision of telecommunication services is disclosed. The functionality and capabilities associated with both Intelligent Network (IN) and non-IN compliant elements of a public telecommunications system are abstracted using a set of control and informational parameters and variables which are associated with a given network element or network element category. A service creation and execution application programming interface provides access to a service creation and execution environment which is distributed in public network gateways, private network gateways, and in compatible software platforms. The distributed service creation and execution environment enable the generation, provisioning, and execution of applications across private and public telecommunication networks in order to provide novel telecommunication services via the serial or concurrent invocation of one or more distributed applications.",
	"url": null,
	"owner": "Redknee Inc.",
	"publication_number": "07881286",
	"publication_date": "2011-02-01",
	"application_number": "11617047",
	"application_date": "2006-12-28",
	"tags": null,
	"slug": "method-for-distributing-and-executing-service-logic",
	"match_type": "abstract"
},
{
	"name": "Method and system for coordinating client and host security modules",
	"summary": "",
	"abstract": "A system and methods for coordinating the operation of a client security module and a host security module on a mobile electronic device. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, the client security module instructs the host security module when to lock and unlock the device, and the host security module alerts the client security module to attempts by the user to lock or unlock the device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07996908",
	"publication_date": "2011-08-09",
	"application_number": "10984822",
	"application_date": "2004-11-10",
	"tags": null,
	"slug": "method-and-system-for-coordinating-client-and-host-security-modules",
	"match_type": "abstract"
},
{
	"name": "Method and system for managing delayed user authentication",
	"summary": "",
	"abstract": "A system and methods for coordinating the operation of a client security module and a host security module on a mobile electronic device. The modules communicate with each other through a platform abstraction layer using application programming interfaces to coordinate their activities. In particular, on start-up of the device, the host security module obtains user authorization input from a user and passes the input to a client operating system for validation. Once validated, the host security module unlocks the host-side of the device. At the same time, the client operating system sends a notice or request to the client-side virtual machine requesting that the client-side be unlocked. Once the virtual machine is initialized and available it launches the client security module and unlocks the client-side. During the delay while the virtual machine loads, the user is given access only to the host applications.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "08250371",
	"publication_date": "2012-08-21",
	"application_number": "12843924",
	"application_date": "2010-07-27",
	"tags": null,
	"slug": "method-and-system-for-managing-delayed-user-authentication",
	"match_type": "abstract"
},
{
	"name": "Method of processing notifications provided by a routine, and associated handheld electronic device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. Certain predetermined criteria that have been established for a particular routine on the handheld electronic device are employed to ignore certain of the notifications in appropriate circumstances in order to conserve computing and power resources.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "08146101",
	"publication_date": "2012-03-27",
	"application_number": "11414710",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-processing-notifications-provided-by-a-routine-and-associated-handheld-electronic-device",
	"match_type": "abstract"
},
{
	"name": "Method of reflecting on another device a change to a browser cache on a handheld electronic device, and associated device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. The handheld electronic device provides an improved method of employing the notifications to enable another device to reflect a change to a browser cache on the handheld electronic device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07937361",
	"publication_date": "2011-05-03",
	"application_number": "11414785",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-reflecting-on-another-device-a-change-to-a-browser-cache-on-a-handheld-electronic-device-and-associated-device",
	"match_type": "abstract"
},
{
	"name": "Method of reflecting on another device an addition to a browser cache on a handheld electronic device, and associated device",
	"summary": "",
	"abstract": "An improved handheld electronic device includes an Application Programming Interface (API) that generates various notifications in certain circumstances. The handheld electronic device provides an improved method of employing the notifications to enable another device to reflect an addition to a browser cache on the handheld electronic device.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07644149",
	"publication_date": "2010-01-05",
	"application_number": "11414779",
	"application_date": "2006-04-28",
	"tags": null,
	"slug": "method-of-reflecting-on-another-device-an-addition-to-a-browser-cache-on-a-handheld-electronic-device-and-associated-device",
	"match_type": "abstract"
},
{
	"name": "System and method of presenting entities of standard device applications in wireless devices",
	"summary": "",
	"abstract": "A data entity presentation system and method of presenting data entities of standard device applications in wireless devices are provided. The data entity presentation system comprises an application runtime environment module for hosting component-based applications on a device, an integrated development environment for hosting component definitions and a device repository for storing device data and device-specific application programming interfaces. The method comprises the steps of hosting component-based applications on a device, hosting component definitions and storing device data and device-specific application programming interfaces.",
	"url": null,
	"owner": "Research In Motion Limited",
	"publication_number": "07835726",
	"publication_date": "2010-11-16",
	"application_number": "11405510",
	"application_date": "2006-04-18",
	"tags": null,
	"slug": "system-and-method-of-presenting-entities-of-standard-device-applications-in-wireless-devices",
	"match_type": "abstract"
},
{
	"name": "System and method for implementing a retransmission bridge",
	"summary": "",
	"abstract": "A method of and apparatus for implementing a radio retransmission bridge is disclosed. The method and apparatus includes devices and operations for creating a retransmission bridge software object with a base class application programming interface (API). The method and apparatus also includes devices and operations for creating waveforms with APIs inherited from the base class retransmission bridge API. The method and apparatus also includes devices and operations for identifying crossbanding waveforms being requested. Further, the method and apparatus include devices and operations for determining a location in a data stack in which to instantiate the retransmission bridge API, and instantiating the retransmission bridge API.",
	"url": null,
	"owner": "Rockwell Collins, Inc.",
	"publication_number": "07177590",
	"publication_date": "2007-02-13",
	"application_number": "10315402",
	"application_date": "2002-12-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Application programs for motion control devices including access limitations",
	"summary": "",
	"abstract": "A security system for controlling access to motion control systems. The security system limits access to application programming interface (API) functions. The limitations on API functions can be implemented as a denial of access to certain restricted functions and/or as a limitation on certain controlled parameters employed by certain restricted functions. The security system may allow or disallow access based on users or accounts. The security system may also be programmed to prevent access to certain functions arbitrarily as determined by a system administrator or on criteria such as the status of the system.",
	"url": null,
	"owner": "Roy-G-Biv Corporation",
	"publication_number": "06859671",
	"publication_date": "2005-02-22",
	"application_number": "10447185",
	"application_date": "2003-05-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Motion control systems",
	"summary": "",
	"abstract": "A motion control system comprising an application program, a plurality of motion controllers, a set of software drivers, and a motion component. Each software driver exposes a service provider interface comprising a set of driver functions. Driver code of at least one software driver associates at least one driver function with at least one control command. The motion component exposes an application programming interface comprising a set of component functions and component code associates at least one of the component functions with at least one of the driver functions. The at least one selected software driver generates at least one control code from the motion controller language associated with the at least one selected motion controller based on the at least one component function called by the application program, the component code, and the driver code of the at least one selectable software driver.",
	"url": null,
	"owner": "ROY-G-BIV Corporation",
	"publication_number": "08073557",
	"publication_date": "2011-12-06",
	"application_number": "12406921",
	"application_date": "2009-03-18",
	"tags": null,
	"slug": "motion-control-systems",
	"match_type": "abstract"
},
{
	"name": "Apparatus for providing inter-processor communication using TCP/IP in communication system",
	"summary": "",
	"abstract": "An apparatus for providing inter-processor communication (IPC) using transmission control protocol/Internet protocol (TCP/IP) in a communication system, including: an Ethernet interface module for providing an interface between an Ethernet device driver and an interprocessor communication (IPC) module, determining a type of a received message, transmitting the received message to a message process module if the type of the received message is non-frame data, and queuing the received message in a corresponding mailbox corresponding to frame data if the type of the received message is the frame data; a message process module for queuing the non-frame data received through the Ethernet interface module in a corresponding mailbox; and a common application programming interface (API) module for providing an interface for basically performing data transmission and reception through the message process module, mailbox management, interprocessor communication (IPC) buffer management and an interprocessor communication (IPC) control function.",
	"url": null,
	"owner": "Samsung Electronics Co., Ltd.",
	"publication_number": "07774507",
	"publication_date": "2010-08-10",
	"application_number": "10645522",
	"application_date": "2003-08-22",
	"tags": null,
	"slug": "apparatus-for-providing-interprocessor-communication-using-tcpip-in-communication-system",
	"match_type": "abstract"
},
{
	"name": "End-to-end QoS interoperation apparatus and method in heterogeneous network environment",
	"summary": "",
	"abstract": "An end-to-end quality-of-service (QoS) interoperation apparatus and method in a heterogeneous network environment are provided. A Next Steps In Signaling (NSIS) Application Programming Interface (NAPI) block handles an NSIS API at the request of an upper layer. An NSIS entity handles an NSIS protocol stack at the request of the NAPI block. An Internet Protocol Bearer Service (IP BS) manager manages an IP BS. A translation block translates parameters of a 3GPP_CLASS object and a UMTS QoS class predefined in an NSIS message according to a predetermined mapping configuration. A memory stores a software application including a Universal Mobile Telecommunication System Bearer Service (UMTS BS) manager for managing a UMTS BS. A processor combined with the memory, controls the software application.",
	"url": null,
	"owner": "Samsung Electronics Co., Ltd.",
	"publication_number": "07944833",
	"publication_date": "2011-05-17",
	"application_number": "11434785",
	"application_date": "2006-05-17",
	"tags": null,
	"slug": "endtoend-qos-interoperation-apparatus-and-method-in-heterogeneous-network-environment",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for integrating variable subsidiary information with main office information in an enterprise system",
	"summary": "",
	"abstract": "The present invention pertains to an enterprise-wide enterprise resource planning (ERP) system, and in particular, to methods and systems for interfacing the enterprise-wide ERP system with ERP systems at subsidiary organizations. In accordance with an embodiment of the present invention, a method includes connecting to an enterprise data management system through a data base server, a web service and a data interface application programming interface (API) in a remote data system and through a data mapping component and an intermediate documents (IDOC) adapter in a data exchange interface using simple object address protocol (SOAP) messages and extensible markup language (XML) messages.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07590987",
	"publication_date": "2009-09-15",
	"application_number": "10453527",
	"application_date": "2003-06-04",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Bidirectional update of client-server objects",
	"summary": "",
	"abstract": "Methods and apparatus, including computer program products, for updating data. In one aspect, a system that has a server operating on a structure of server data objects and a client operating on a structure of client data objects, the data objects and the structure of the server data objects and the structure of the client data objects being managed through an implementation of a predefined application programming interface that implements at least two types of data object update commands, the data object update commands being operable to perform bidirectional updates between the server data objects and the client data objects. The two types of data object update commands are: an object level update type that is operable to update one or more specified data objects; and a sub-structure level update type that is operable to update a sub-structure of the data objects.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07574456",
	"publication_date": "2009-08-11",
	"application_number": "11015613",
	"application_date": "2004-12-16",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Filtered unified logging service",
	"summary": "",
	"abstract": "Apparatus, methods, and systems for provision of filtered unified logging interfaces or services, for example, employed within application servers. In one embodiment of the invention, a filtered unified logging application programming interface (API) provides unified configuration and/or viewing for both tracing and logging. Use of filters provides a finer granularity of log controller or log output, for example, when compared with only utilizing severity. A method of providing filtered unified logging includes receiving a message, the message having a predefined severity; dropping the message if the message severity does not reach a threshold severity; applying one or more filters to the message if the message severity reaches the threshold severity; and sending the message to a destination if the message is not filtered out.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07475401",
	"publication_date": "2009-01-06",
	"application_number": "10748012",
	"application_date": "2003-12-30",
	"tags": null,
	"slug": "filtered-unified-logging-service",
	"match_type": "abstract"
},
{
	"name": "Meta Object Facility compliant interface enabling",
	"summary": "",
	"abstract": "Systems and methods for enabling a Meta Object Facility (MOF) compliant service for a metadata resource. The systems and methods employ a connector adapted to receive metadata from the metadata resource via a resource-specific application programming interface, and a metamodel repository storing one or more MOF models. The systems and methods further employ a persistence interface between the connector and metamodel repository. The persistence interface is configured to instantiate at least one MOF compliant service for the connector based on one of the MOF models in the metamodel repository.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07426523",
	"publication_date": "2008-09-16",
	"application_number": "10799364",
	"application_date": "2004-03-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for monitoring runtime of persistence applications",
	"summary": "",
	"abstract": "A monitoring method and apparatus monitors a runtime application to collect and display static and dynamic data concerning software entities and database operations in a runtime environment. In one embodiment, monitoring classes are used to collect monitoring data from at least one PersistenceUnit (PU) and at least one PersistenceContext (PC) associated with the PU of an application the uses an in implementation of a Java Persistence Application Programming Interface (JPA). A Java Management Extension (JMX) MBean communicates with the monitoring classes to expose monitoring data outside the runtime environment.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08356288",
	"publication_date": "2013-01-15",
	"application_number": "12267828",
	"application_date": "2008-11-10",
	"tags": null,
	"slug": "method-and-apparatus-for-monitoring-runtime-of-persistence-applications",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for persistent object tool",
	"summary": "",
	"abstract": "A method and an apparatus that execute executable codes to install a persistent object from a storage into an application server to access remote services in an EIS are described. The executable codes are based on relational properties for mapping an API (Application Programming Interface) function of an EIS to an object of a cross-platform connection framework coupling the EIS with the application server. The application server is enabled to access the API function of the EIS via the persistent object as part of the cross-platform connection framework.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08438535",
	"publication_date": "2013-05-07",
	"application_number": "11633851",
	"application_date": "2006-12-04",
	"tags": null,
	"slug": "method-and-apparatus-for-persistent-object-tool",
	"match_type": "abstract"
},
{
	"name": "Method for using a business model user interface",
	"summary": "",
	"abstract": "Method and apparatus for providing a user interface application programming interface (API) for providing extended access to the database by third-party and user software products. In accordance with one embodiment, a method for accessing a business database includes instantiating a company object as an instance of a company class conforming to a component object model standard, setting a server property of the company object to a database server name, setting a company database name property of the company object to the name of a company, setting a user name property of the company object to the name of a user, setting a password property of the company object to a password of the user, setting a language property of the company object to a desired language of the user; and invoking a connect method within the company object, the connect method opening a software connection to a database identified by the company database name property.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07213235",
	"publication_date": "2007-05-01",
	"application_number": "10630729",
	"application_date": "2003-07-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Object storage and synchronization hooks for occasionally-connected devices",
	"summary": "",
	"abstract": "A system may include an application programming interface (API) layer, a cache layer, and an object storage/access layer. The API layer may expose an interface to store a business object and an interface to retrieve the business object, and may transmit a request to store the business object and a request to retrieve the business object, and the cache layer may cache the business object and transmit the request to store the business object and the request to retrieve the business object. The object storage/access layer may receive the request to store the business object and, in response to the request to store the business object, to invoke a serialization method exposed by the business object to store the data associated with the object in a data structure. The object storage/access layer may also receive the request to retrieve the business object and, in response to the request to retrieve the business object, to invoke a deserialization method of the business object to deserialize the data associated with the business object in the data structure.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07565365",
	"publication_date": "2009-07-21",
	"application_number": "11215870",
	"application_date": "2005-08-31",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Portable business information content and management system",
	"summary": "",
	"abstract": "A system and method for generating business content portable across multiple software applications is described. In one embodiment, a universal object model (UOM) is employed to art as an abstraction layer between business content and the application used to create the business content. The UOM generates portable business content from objects and operations uncovered by a descriptive language such as extendable mark-up language (XML). The UOM objects and/or properties are mapped to an application object model (AOM) which is capable of extending the properties and/or operations of the original business application. The portable business content is mapped from the AOM to another application in accordance to the applications application programming interface (API). The business content created by the UOM may be configured for other applications without rewriting the business content by modifying the AOM.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07434227",
	"publication_date": "2008-10-07",
	"application_number": "10260092",
	"application_date": "2002-09-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Shared resource discovery, configuration, and consumption for networked solutions",
	"summary": "",
	"abstract": "A networked solution offering a software-based service via a networked architecture having a system landscape can discover a shared resource within the system landscape, for example by accessing a landscape directory comprising information about a plurality of shared resources available in the system landscape. The information about the discovered shared resource can include a second networked solution within the system landscape that has previously configured the discovered shared resource. Configuration settings can be retrieved for the discovered shared resource from the second networked solution. Using the retrieved configuration settings, a shared resource-specific communication channel can be determined for the networked solution to access the discovered shared resource in a peer-to-peer manner. A resource type-specific application programming interface can be provided to the software-based service to enable consumption of the discovered shared resource by the software-based service. Related methods, systems, and articles of manufacture are described.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08375130",
	"publication_date": "2013-02-12",
	"application_number": "12970873",
	"application_date": "2010-12-16",
	"tags": null,
	"slug": "shared-resource-discovery-configuration-and-consumption-for-networked-solutions",
	"match_type": "abstract"
},
{
	"name": "System and method for providing access to an application through a common interface for application extensions",
	"summary": "",
	"abstract": "A method and system to permit externally created business objects to access a business management application database without using direct database language statements. An add-on framework includes an add-on extension manager to start an add-on application, register a form from the add-on application, and receive and route an event from the business management application to the add-on application through a user interface application programming interface component object model interface. A persistency layer provides a set of programming language classes and interface definitions to develop a persistent business object in the add-on extension, and connect the persistent business object to a database through a data interface application programming interface component object model interface to read and write data from the database associated with the business management application.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "07860890",
	"publication_date": "2010-12-28",
	"application_number": "11959572",
	"application_date": "2007-12-19",
	"tags": null,
	"slug": "system-and-method-for-providing-access-to-an-application-through-a-common-interface-for-application-extensions",
	"match_type": "abstract"
},
{
	"name": "Generating a knowledge base",
	"summary": "",
	"abstract": "A method to automatically generate a new knowledge base includes receiving a signal that defines content that is to be included in the new knowledge base. Tables within an existing database are searched to identify at least one candidate table that is associated with data that may be relevant to the defined content that is to be included in the new knowledge base. At least one candidate application programming interface (API) is determined for each candidate table. Combinations of the identified at least one candidate table and the determined at least one candidate API are assessed to select from those combinations a master table and a master API for the new knowledge base. The new knowledge base is accessible by more than one application program within an integrated system. A non-expert user may automatically generate a new knowledge base and associated API with a single mouse click.",
	"url": null,
	"owner": "SAP Aktiengesellschaft",
	"publication_number": "07225177",
	"publication_date": "2007-05-29",
	"application_number": "10782576",
	"application_date": "2004-02-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Computer-implemented knowledge repository interface system and method",
	"summary": "",
	"abstract": "A computer-implemented knowledge repository data interface system and method for use by client applications to interact with a plurality of knowledge repositories. The knowledge repositories contain analytical models of interest to the client applications. A request handling module receives requests regarding the models from one of the client applications over a network. Knowledge repository application programming interfaces (APIs) are used to retrieve data about the models in the knowledge repositories based upon the received requests.",
	"url": null,
	"owner": "SAS Institute Inc.",
	"publication_number": "07039622",
	"publication_date": "2006-05-02",
	"application_number": "09954278",
	"application_date": "2001-09-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for oilfield data repository",
	"summary": "",
	"abstract": "The invention relates to a method for performing operations of an oilfield having at least one wellsite, a surface network, and a process facility, each wellsite having a wellbore penetrating a subterranean formation for extracting fluid from an underground reservoir therein. The method includes storing oilfield data associated with a plurality of oilfield entities in a first data repository, obtaining a first target metamodel comprising structural description of a first plurality of data entities of the first data repository, obtaining a domain metamodel interleaved with a first mapping specification, the domain metamodel comprising structural description of a domain model for representing the plurality of oilfield entities in an application programming interface, obtaining a mapping specification associating the first target metamodel with the domain metamodel and forming the application programming interface based on the domain metamodel, the first target metamodel, and the first mapping specification using a computer implemented method.",
	"url": null,
	"owner": "Schlumberger Technology Corp.",
	"publication_number": "07895241",
	"publication_date": "2011-02-22",
	"application_number": "11873366",
	"application_date": "2007-10-16",
	"tags": null,
	"slug": "method-and-apparatus-for-oilfield-data-repository",
	"match_type": "abstract"
},
{
	"name": "Method of and system for watermarking application modules",
	"summary": "",
	"abstract": "A method of creating and using a software application module includes coding, by a developer, a software application module for extending a functionality of a main software application. The software application module is adapted to interface with the main software application using an application programming interface (API). The method further includes compiling the software application module to produce an executable software application module, determining if the developer is authorized to use the API, and embedding a watermark in the executable software application module if it is determined that the developer is authorized to use the API. The method still further includes executing the main software application, reading the watermark from a executable software application module, verifying if the watermark is correct, and executing the software application module if the watermark is verified as correct.",
	"url": null,
	"owner": "Schlumberger Technology Corporation",
	"publication_number": "08024571",
	"publication_date": "2011-09-20",
	"application_number": "11644932",
	"application_date": "2006-12-22",
	"tags": null,
	"slug": "method-of-and-system-for-watermarking-application-modules",
	"match_type": "abstract"
},
{
	"name": "Apparatus and methods for providing communication between systems having different protocol versions",
	"summary": "",
	"abstract": "A system for enabling an IPv4 (Internet Protocol version 4) application to communicate across a computer network with an IPv6 (Internet Protocol version 6) system. The system includes a computing device and executable instructions. Executable instructions are configured to make a function call to an IPv4 socket Application Programming Interface (API). The instructions translate the function call to a translated function call wherein the translated function call uses raw sockets. Another function call is made to the IPv4 socket API for the translated function call that uses raw sockets. A packet is passed to an IPv4 stack.",
	"url": null,
	"owner": "Sharp Laboratories of America, Inc.",
	"publication_number": "07340746",
	"publication_date": "2008-03-04",
	"application_number": "10637408",
	"application_date": "2003-08-07",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Acceptance of inputs from various interfaces to a telephony system",
	"summary": "",
	"abstract": "A telephony system that accepts inputs, such as account codes, from a variety of devices and interfaces. The system includes a server with a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a control module, a call status module, an endpoint interface module, a storage interface module, a call transfer module, a TAPI interface module, a configuration module, and an extension library module. A server is capable of prompting several devices for an input and then accepting an input from any of the devices. Thus, a server enables a user to initiate a phone call on one device and then input information using a different device.",
	"url": null,
	"owner": "Shoretel, Inc.",
	"publication_number": "07450703",
	"publication_date": "2008-11-11",
	"application_number": "10807967",
	"application_date": "2004-03-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Acceptance of inputs from various interfaces to a telephony system",
	"summary": "",
	"abstract": "A telephony system that accepts inputs, such as account codes, from a variety of devices and interfaces. The system includes a server with a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a control module, a call status module, an endpoint interface module, a storage interface module, a call transfer module, a TAPI interface module, a configuration module, and an extension library module. A server is capable of prompting several devices for an input and then accepting an input from any of the devices. Thus, a server enables a user to initiate a phone call on one device and then input information using a different device.",
	"url": null,
	"owner": "ShoreTel, Inc.",
	"publication_number": "08284910",
	"publication_date": "2012-10-09",
	"application_number": "12247789",
	"application_date": "2008-10-08",
	"tags": null,
	"slug": "acceptance-of-inputs-from-various-interfaces-to-a-telephony-system",
	"match_type": "abstract"
},
{
	"name": "Directory features in a distributed telephony system",
	"summary": "",
	"abstract": "A telephony system is presented that enables a phone to access a directory and use the directory in conjunction with other phone functions. The system includes a server with a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a control module, a function module, a filter module, a presentation module, a phone interface module, and a storage interface module. A server sends a signal to a phone regarding the contents of a directory. A server also enables a user to navigate through the directory, filter the directory, and perform call functions on phone numbers associated with directory entries.",
	"url": null,
	"owner": "ShoreTel, Inc.",
	"publication_number": "08670544",
	"publication_date": "2014-03-11",
	"application_number": "11110293",
	"application_date": "2005-04-19",
	"tags": null,
	"slug": "directory-features-in-a-distributed-telephony-system",
	"match_type": "abstract"
},
{
	"name": "Server with backup capability for distributed IP telephony systems",
	"summary": "",
	"abstract": "A system for providing voice mail backup on a secondary server including two or more distributed voice mail servers. Each distributed voice mail server includes a telephony management software (TMS) unit, a telephony application programming interface (TAPI) unit, and an application unit. The application unit includes a voice mail control module, a call status module, a call transfer module, a voice mail migration module, a storage module, an audio encoding/decoding module, a configuration module, an extension library module, and a telephony application programming interface (TAPI) interface module. Each server is capable of storing a voice message for an extension serviced by a remote server if the remote server is unavailable.",
	"url": null,
	"owner": "Shortel, Inc.",
	"publication_number": "07379540",
	"publication_date": "2008-05-27",
	"application_number": "10671269",
	"application_date": "2003-09-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for enabling connectivity to a data system",
	"summary": "",
	"abstract": "A method and system that provides filtered data from a data system. In one embodiment the system includes an API (application programming interface) and associated software modules to enable third party applications to access an enterprise data system. Administrators are enabled to select specific user interface (UI) objects, such as screens, views, applets, columns and fields to voice or pass-through enable via a GUI that presents a tree depicting a hierarchy of the UI objects within a user interface of an application. An XSLT style sheet is then automatically generated to filter out data pertaining to UI objects that were not voice or pass-through enabled. In response to a request for data, unfiltered data are retrieved from the data system and a specified style sheet is applied to the unfiltered data to return filtered data pertaining to only those fields and columns that are voice or pass-through enabled.",
	"url": null,
	"owner": "Siebel Systems, Inc.",
	"publication_number": "07058890",
	"publication_date": "2006-06-06",
	"application_number": "10131368",
	"application_date": "2002-04-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and apparatuses to cancel query",
	"summary": "",
	"abstract": "Methods and apparatuses to cancel database queries from a web application user interface in a networked database application. In one embodiment, the method includes receiving a user request to cancel a query previously sent to a database and calling an application programming interface (API) provided by the database to terminate one or more statements running on the database, the one or more statements being related to the query.",
	"url": null,
	"owner": "Siebel Systems, Inc.",
	"publication_number": "07584176",
	"publication_date": "2009-09-01",
	"application_number": "11048837",
	"application_date": "2005-02-01",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for improving performance of a manufacturing execution system",
	"summary": "",
	"abstract": "A manufacturing execution system contains a depicting device for depicting at least a part of a productive process to a hierarchically structured set of entities and an application programming interface for managing data in a data base and for inputting a tree into the application programming interface. The tree representing a hierarchical relationship between at least two entities of the hierarchically structured set of entities. A program device provides a method accessible by the application programming interface. The method is adapted to manipulate the hierarchically structured set of entities. A manipulating device is provided for manipulating the entities of the tree according to the method.",
	"url": null,
	"owner": "Siemens Aktiengesellschaft",
	"publication_number": "08452810",
	"publication_date": "2013-05-28",
	"application_number": "12838128",
	"application_date": "2010-07-16",
	"tags": null,
	"slug": "method-and-system-for-improving-performance-of-a-manufacturing-execution-system",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for extending a telephone's capabilities",
	"summary": "",
	"abstract": "An application programming interface (API) enables a telephone to utilize the hardware resources of a computer that is connected to the telephone in a master/slave relationship that causes the computer to function in the manner of a peripheral to the telephone. Specifically, the telephone attached to the computer can utilize the relatively large memory capacity of the attached computer to store excess telephone-specific data and can utilize the relatively high sophistication of the processing capability of the connected computer to perform intensive data processing operations. The API allows the functionality of the telephone to be extended without requiring a telephony-equipped computer.",
	"url": null,
	"owner": "Siemens Communications Inc.",
	"publication_number": "07042991",
	"publication_date": "2006-05-09",
	"application_number": "11045172",
	"application_date": "2005-01-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for extending a telephone's capabilities",
	"summary": "",
	"abstract": "An application programming interface (API) enables a telephone to utilize the hardware resources of a computer that is connected to the telephone in a master/slave relationship that causes the computer to function in the manner of a peripheral to the telephone. Specifically, the telephone attached to the computer can utilize the relatively large memory capacity of the attached computer to store excess telephone-specific data and can utilize the relatively high sophistication of the processing capability of the connected computer to perform intensive data processing operations. The API allows the functionality of the telephone to be extended without requiring a telephony-equipped computer.",
	"url": null,
	"owner": "Siemens Communications, Inc.",
	"publication_number": "06862347",
	"publication_date": "2005-03-01",
	"application_number": "09239414",
	"application_date": "1999-01-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Global pointers for scalable parallel applications",
	"summary": "",
	"abstract": "Mapping of cacheable memory pages from other processes in a parallel job provides a very efficient mechanism for inter-process communication. A trivial address computation can then be used to look up a virtual address that allows the use of cacheable loads and stores to directly access or update the memory of other processes in the job for communication purposes. When an interconnection network permits the cacheable access of one host's memory from another host in the cluster, kernel and library software can map memory from processes on other hosts, in addition to the memory on the same host. This mapping can be done at the start of a parallel job using a system library interface. A function in an application programming interface provides a user-level, fast lookup of a virtual address that references data regions residing on all of the processes in a parallel job running across multiple hosts.",
	"url": null,
	"owner": "Silicon Graphics, Inc.",
	"publication_number": "07451278",
	"publication_date": "2008-11-11",
	"application_number": "10365658",
	"application_date": "2003-02-13",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Handover between an IEEE 802.16 WiBro network and a UMTS network using media independent handover function",
	"summary": "",
	"abstract": "A wireless transmit/receive unit (WTRU) may include an IEEE 802.16 modem, a universal mobile telecommunication system (UMTS) modem and a media independent handover (MIH) entity. Software application programming interfaces provide the MIH entity with mechanisms to receive information about IEEE 802.16 and UMTS links, control IEEE 802.16 and UMTS modems for handover, discover an MIH server and IP multimedia system nodes, trigger mobile IP handover, etc. If an IEEE 802.16 link has been successfully established, the MIH entity starts an MIH session. When the IEEE 802.16 modem indicates that a connection is going to be terminated, the MIH entity activates the UMTS modem for handover. If the IEEE 802.16 modem indicates that a link parameter has crossed a threshold, the MIH entity sends IEEE 802.16 and WCDMA signal measurements to an MIH server. After receiving an MIH switch request, the MIH entity initiates handover to the UMTS network.",
	"url": null,
	"owner": "SK Telecom, Co. Ltd.",
	"publication_number": "07894400",
	"publication_date": "2011-02-22",
	"application_number": "11862963",
	"application_date": "2007-09-27",
	"tags": null,
	"slug": "handover-between-an-ieee-80216-wibro-network-and-a-umts-network-using-media-independent-handover-function",
	"match_type": "abstract"
},
{
	"name": "Image mastering API",
	"summary": "",
	"abstract": "Methods and apparatus for the recording of data to an optical media are provided. In one example, a method includes the selection of data to be recorded by a client application. After interface with an image mastering application programming interface, the selection of an optical media format, and the selection of an optical media recording device, the selected data is sent to a stash file. A task list of operations to be performed in the recording of the selected data is created, and the data is recorded by executing the task list from Kernel Mode of an operating system. In another example, an image mastering application programming interface is provided. The image mastering application programming interface is a collection of COM objects including a disk master, a stash file, a disk recorder, and a burn engine. In another example, a computer readable media having program instructions for the recording of data to an optical media is provided. The program instructions enable the selection of data, sending the data to a stash file, creating a task list for the recording of the data, and executing the task list from Kernel Mode of an operating system.",
	"url": null,
	"owner": "Sonic Solutions, Inc.",
	"publication_number": "06882795",
	"publication_date": "2005-04-19",
	"application_number": "09703167",
	"application_date": "2000-10-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Image mastering API",
	"summary": "",
	"abstract": "When recording data to optical media, data to be recorded is selected using a client application. An image mastering application programming interface is provided which is comprised of a collection of COM objects and integrated into the operating system. The plurality of COM objects includes a disc master, a file, a disc recorder, and a burn engine. The data selected for recording is sent through an application format interface to the file that is part of the image mastering application interface. The selected data in the file is recorded to optical media directly from Kernel Mode of the operating system.",
	"url": null,
	"owner": "Sonic Solutions, Inc.",
	"publication_number": "07359626",
	"publication_date": "2008-04-15",
	"application_number": "11083647",
	"application_date": "2005-03-17",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for a database to monitor and analyze performance of an electronic design",
	"summary": "",
	"abstract": "Various methods and apparatuses are described that provide instrumentation and analysis of an electronic design having one or more bus interconnects. A relational database may have defined tables designed for interconnect analysis of transactions occurring between initiator intellectual property (IP) cores and target IP cores of the electronic design. A query tool may be configured to format input data to be stored in the defined tables, and have application programming interfaces to retrieve data from the defined tables based on performing a query. The query tool executes an algorithm based on the query to provide the interconnect analysis.",
	"url": null,
	"owner": "Sonics, Inc.",
	"publication_number": "08073820",
	"publication_date": "2011-12-06",
	"application_number": "12098614",
	"application_date": "2008-04-07",
	"tags": null,
	"slug": "method-and-system-for-a-database-to-monitor-and-analyze-performance-of-an-electronic-design",
	"match_type": "abstract"
},
{
	"name": "Unified onscreen advertisement system for CE devices",
	"summary": "",
	"abstract": "A client-server architecture allows consumer electronics (CE) devices to obtain advertisements, including TV and network content recommendations, via a unified application programming interface (API). A gateway server between online advertisement providers and CE devices prioritizes and personalizes the advertisements and recommendations for a requesting CE device. This architecture scales over time and evolves more functionality without requiring CE device software updates.",
	"url": null,
	"owner": "Sony Corporation",
	"publication_number": "08438057",
	"publication_date": "2013-05-07",
	"application_number": "13073146",
	"application_date": "2011-03-28",
	"tags": null,
	"slug": "unified-onscreen-advertisement-system-for-ce-devices",
	"match_type": "abstract"
},
{
	"name": "Method and system for managing access to add-on data files",
	"summary": "",
	"abstract": "A method and system for managing access to add-on data files having an add-on data file attribute, which is used by a software application. The method: monitors input/output commands of the software application to an application programming interface of a code layer to determine whether an access to a data file with the add-on data file attribute is requested by the software application; checks whether an access code for the add-on data file is present in an access code list related to the software application if at least one of the monitored input/output commands request access to the add-on data file, if the access code is not present in the access control list; retrieves the access code from an external source outside of the access control list; and provides access to the add-on data file if the access code is present.",
	"url": null,
	"owner": "SONY DADC Austria AG",
	"publication_number": "08185918",
	"publication_date": "2012-05-22",
	"application_number": "12440728",
	"application_date": "2007-08-29",
	"tags": null,
	"slug": "method-and-system-for-managing-access-to-addon-data-files",
	"match_type": "abstract"
},
{
	"name": "High-level interface for QoS-based mobile multimedia applications",
	"summary": "",
	"abstract": "The present invention generally relates to the field of mobile multimedia middleware, quality-of-service, shared resource reservation mechanisms, distributed processing systems, handheld computers, computer networking and wireless communication. Particularly, the present invention describes a processing system and pieces of software for one or more communication networks, with middleware comprising an application programming interface () cast over a data model describing quality-of-service contracts and quality-of-service adaptation paths specified by quality-of-service aware mobile multimedia applications () using said programming interface, in order to manage quality-of-service and mobility-aware for managing network connections with other applications. The present invention hereby relates to a corresponding data model as well as the necessary architecture.",
	"url": null,
	"owner": "Sony Deutschland GmbH",
	"publication_number": "07814184",
	"publication_date": "2010-10-12",
	"application_number": "10006067",
	"application_date": "2001-12-06",
	"tags": null,
	"slug": "highlevel-interface-for-qosbased-mobile-multimedia-applications",
	"match_type": "abstract"
},
{
	"name": "Method and an apparatus for the integration of IP devices into a HAVi network",
	"summary": "",
	"abstract": "A method and an apparatus for integrating IP devices into a HAVi network An Internet Protocol (IP) and HAVi compliant device acts as a controller in the HAVi network and communicates with at least on HAVi compliant device using HAVi application programming interfaces (APIs). A server on the controller communicates with at least one IP device having a proxy and an IP and HAVi API. The server includes at least one IP device device control module (IP device DCM) corresponding to the IP device. The IP device providing API support to translate and relay calls between the proxy and the server so that at least one HAVi compliant device can communicate with the IP device.",
	"url": null,
	"owner": "Sony Electronics Inc.",
	"publication_number": "07343427",
	"publication_date": "2008-03-11",
	"application_number": "09875670",
	"application_date": "2001-06-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for multi-directional positioning of projected images",
	"summary": "",
	"abstract": "A system and method of multi-directional projection in which the optical output from a projector is modified in response to characteristics of nearby surfaces, upon which projection can be directed. The multi-directional projection system can provide beneficial output as a primary indicator or a secondary indicating device that can be controlled by itself or synchronously with other devices, such as output from a computer monitor. One implementation incorporates an optical sensor coupled to the projector for registering object characteristics (e.g., distance, reflectance, texture, color, and ambient lighting), such as during a mapping operation performed across the pan and tilt range of the projector. The projection system preferably incorporates a focusing assembly and may include other controllable optical elements such as zoom. Control is preferably provided through commands within an application programming interface (API), such as executing on a personal computer or other form of computer device.",
	"url": null,
	"owner": "Sony Electronics, Inc.",
	"publication_number": "07794094",
	"publication_date": "2010-09-14",
	"application_number": "11441974",
	"application_date": "2006-05-26",
	"tags": null,
	"slug": "system-and-method-for-multidirectional-positioning-of-projected-images",
	"match_type": "abstract"
},
{
	"name": "Computer software method for administering batch jobs",
	"summary": "",
	"abstract": "The present invention discloses a method for processing batch jobs. A batch job is wrapped to create an application programming interface for communication with a batch framework. The batch framework comprises a batch dispatcher class, and the batch dispatcher class further comprises a method to execute the batch job. The batch framework is invoked according to a predetermined schedule. The batch job may reside locally with the batch framework remotely from the batch framework. In a preferred embodiment, the batch framework is invoked by a scheduling service, preferably the AutoSys scheduling service on Unix platform. The AutoSys scheduling service further executes a command line parameter, either a Unix shell script or a Windows NT batch file.",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "07353514",
	"publication_date": "2008-04-01",
	"application_number": "09698729",
	"application_date": "2000-10-27",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Interface and method for extending a target application over an instant message link of a communication network",
	"summary": "",
	"abstract": "An instant message (IM) interface configured to extend a target application over an IM link of a communication network is provided according to the invention. The IM interface includes a communication interface configured to transfer a reply IM to an originating application. The IM interface further includes a processing system configured to obtain data from the target application and provide an output form to a messaging Application Programming Interface (messaging API). The output form is provided from a set of Forms Definition Language (FDL) forms. The messaging API is substantially protocol-dependent and the set of FDL forms is protocol-independent. The processing system is further configured to generate the reply IM in an originating application protocol using the data, the output form, and one or more protocol-specific libraries of the messaging API. The reply IM is an originating application protocol-specific IM.",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "07310659",
	"publication_date": "2007-12-18",
	"application_number": "10696099",
	"application_date": "2003-10-29",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Telecommunications provider agent",
	"summary": "",
	"abstract": "The invention is a provider agent product and method that operates as a software interface between a telephony card and a session manager in an advanced communications network. The provider agent receives event messages from the telephony card indicating on-hook events, off-hook events, and digit events. The provider agent instructs the telephony card to provide dial tone, ring current, ringback, and busy signals to the telephones. The provider agent also exchanges messages with a session manager in the network. These messages include: invite messages, reply messages, join messages, and terminate messages. In response to the above processing, the provider agent instructs the telephony card to interwork telephony signals on a telephony channel with ATM signals on an ATM virtual channel. The provider agent is comprised of a plurality of software objects that are stored on a software storage medium and that include: a controller object, port objects, and event objects. The provider agent objects are executed by a multithreaded processing system and each object has a separate processing thread. The provider agent and the telephony card communicate through an application programming interface that is specified in an Interface Definition Language (IDL) of a Common Object Request Broker Architecture (CORBA).",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "07729338",
	"publication_date": "2010-06-01",
	"application_number": "10153237",
	"application_date": "2002-05-21",
	"tags": null,
	"slug": "telecommunications-provider-agent",
	"match_type": "abstract"
},
{
	"name": "Telecommunications provider agent",
	"summary": "",
	"abstract": "The invention is a provider agent product and method that operates as a software interface between a telephony card and a session manager in an advanced communications network. The provider agent receives event messages from the telephony card indicating on-hook events, off-hook events, and digit events. The provider agent instructs the telephony card to provide dial tone, ring current, ringback, and busy signals to the telephones. The provider agent also exchanges messages with a session manager in the network. These messages include: invite messages, reply messages, join messages, and terminate messages. In response to the above processing, the provider agent instructs the telephony card to interwork telephony signals on a telephony channel with ATM signals on an ATM virtual channel. The provider agent is comprised of a plurality of software objects that are stored on a software storage medium and that include: a controller object, port objects, and event objects. The provider agent objects are executed by a multithreaded processing system and each object has a separate processing thread. The provider agent and the telephony card communicate through an application programming interface that is specified in an Interface Definition Language (IDL) of a Common Object Request Broker Architecture (CORBA).",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "06870832",
	"publication_date": "2005-03-22",
	"application_number": "09803842",
	"application_date": "2001-03-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Data backup system including a data protection component",
	"summary": "",
	"abstract": "A data backup system is provided for backing up data files from a data source and for securing those data files against accidental modification or deletion. The system comprises storage and a data protection component that includes an application programming interface defining a command set. The system can also comprise a backup application that is configured to use the commands of the command set. The data protection component allows applications that use the commands of the command set, such as the backup application, to access the storage of the system. The data protection component prevents operating systems and applications that do not use the commands of the command set from accessing the storage. The data protection function of the data protection component can optionally be disabled to allow open access to the storage.",
	"url": null,
	"owner": "Storage Appliance Corporation",
	"publication_number": "08195445",
	"publication_date": "2012-06-05",
	"application_number": "13016996",
	"application_date": "2011-01-29",
	"tags": null,
	"slug": "data-backup-system-including-a-data-protection-component",
	"match_type": "abstract"
},
{
	"name": "Data backup system including a data protection component",
	"summary": "",
	"abstract": "A data backup system is provided for backing up data files from a data source and for securing those data files against accidental modification or deletion. The system comprises storage and a data protection component that includes an application programming interface defining a command set. The system can also comprise a backup application that is configured to use the commands of the command set. The data protection component allows applications that use the commands of the command set, such as the backup application, to access the storage of the system. The data protection component prevents operating systems and applications that do not use the commands of the command set from accessing the storage. The data protection function of the data protection component can optionally be disabled to allow open access to the storage.",
	"url": null,
	"owner": "Storage Appliance Corporation",
	"publication_number": "07899662",
	"publication_date": "2011-03-01",
	"application_number": "11605770",
	"application_date": "2006-11-28",
	"tags": null,
	"slug": "data-backup-system-including-a-data-protection-component",
	"match_type": "abstract"
},
{
	"name": "Generating standalone MIDlets from a testing harness",
	"summary": "",
	"abstract": "A testing harness for a design-under-test is modified to include a standalone implementation of an application programming interface used in developing the design-under-test. The standalone implementation is adapted to a target device, and is packaged with an executable application or MIDlet, together with any needed resource files. Either the package, or optionally a JAR and JAD file, is downloaded to a remote user for execution on the target device. Using the application programming interface and the other downloaded files, the remote user can test the target device, analyze the results, and even modify the test conditions without recourse to the testing harness. The arrangement provides a capability for a party who is not privileged to know details of the testing harness to practically evaluate and modify the design-under-test using a standalone testing application.",
	"url": null,
	"owner": "Sun Microsystems Inc.",
	"publication_number": "07143310",
	"publication_date": "2006-11-28",
	"application_number": "10347748",
	"application_date": "2003-01-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "API representation enabling submerged hierarchy",
	"summary": "",
	"abstract": "A method for representing an application programming interface (API) for an object-oriented library includes creating a list of public elements in the library and storing the list. Each public element in the list includes a sublist of all public related elements for the element. According to one aspect, the public elements include classes and interfaces, the public related elements include public superclasses and public superinterfaces, and the library is a Javau2122 package. According to one aspect, a method for determining a program hierarchy includes receiving an API definition file for an object-oriented library and indicating a first public element is a direct parent of a second public element when the first public element is represented in the sublist for the second public element and the first public element is not represented in the sublist for any other public element listed in the sublist for the second public element. According to another aspect, a method for detecting changes to a program hierarchy includes comparing a first program hierarchy reconstructed from a first API definition file with a second program hierarchy reconstructed form a second API definition file and indicating an error when the first program hierarchy is inconsistent with the second program hierarchy.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07158993",
	"publication_date": "2007-01-02",
	"application_number": "09662258",
	"application_date": "2000-09-14",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Compliance testing communication protocols implemented on resource-constrained computing devices",
	"summary": "",
	"abstract": "One embodiment of the present invention provides a system that supports compatibility testing of functionality provided through an Application Programming Interface (API) on a computing device. During operation, the system loads a client testing module on the computing device. The system also loads a remote testing module on a server. Once the client testing module and the remote testing module have been loaded, the system identifies a communication protocol that is available between the computing device and the server, and configures a communication-protocol-specific portion of the client testing module to communicate with the remote testing module through the available communication protocol. The system then compatibility tests the functionality provided through the API on the computing device. During this compatibility testing, certain portions of the test execute within the client testing module while other portions of the test execute within the remote testing module. Hence, the client testing module and the remote testing module work together in a distributed manner to compatibility test the computing device.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07155639",
	"publication_date": "2006-12-26",
	"application_number": "10226522",
	"application_date": "2002-08-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Database store for a virtual heap",
	"summary": "",
	"abstract": "A database store method and system for a virtual persistent heap may include an Application Programming Interface (API) that provides a mechanism to cache portions of the virtual heap into an in-memory heap for use by an application. The virtual heap may be stored in a persistent store that may include one or more virtual persistent heaps, with one virtual persistent heap for each application running in the virtual machine. Each virtual persistent heap may be subdivided into cache lines. The store API may provide atomicity on the store transaction to substantially guarantee the consistency of the information stored in the database. The database store API provides several calls to manage the virtual persistent heap in the store. The calls may include, but are not limited to: opening the store, closing the store, atomic read transaction, atomic write transaction, and atomic delete transaction.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "06957237",
	"publication_date": "2005-10-18",
	"application_number": "09587076",
	"application_date": "2000-06-02",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "File system with distributed components",
	"summary": "",
	"abstract": "A distributed file system is disclosed which may include one or more input/output (I/O) nodes and one or more compute nodes. The I/O nodes and the compute nodes may be communicably coupled through an interconnect. Each compute node may include applications to perform specific functions and perform I/O functions through libraries and file system call handlers. The file system call handlers may be capable of providing application programming interfaces (APIs) to facilitate communication between the plurality of I/O nodes and the applications. The file system call handlers may use a message port system to communicate with other compute nodes.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07933875",
	"publication_date": "2011-04-26",
	"application_number": "11510108",
	"application_date": "2006-08-24",
	"tags": null,
	"slug": "file-system-with-distributed-components",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for associating metadata attributes with program elements",
	"summary": "",
	"abstract": "One embodiment of the present invention provides a system for associating metadata attributes with program elements. During operation, the system receives source code containing syntactic elements that specify metadata attributes for program elements, wherein the metadata attributes do not affect program execution. The system then parses the source code to obtain the metadata attributes. Next, the system associates the metadata attributes with corresponding program elements and determines values associated with the metadata attributes. Finally, the system incorporates the metadata attributes, including identifiers for the associated values and the associated program elements, into object code for the program, thereby allowing the metadata attributes to be accessed from the object code. Another embodiment of the present invention provides a system for accessing metadata attributes for program elements from object code through an application programming interface (API).",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07013458",
	"publication_date": "2006-03-14",
	"application_number": "10237886",
	"application_date": "2002-09-09",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for centralized management of a storage virtualization engine and data services",
	"summary": "",
	"abstract": "SVE management software uses management software running at a central service processor to control storage virtualization engines operating in a plurality application programming interface (API) that allows a consistent control of all SVE facilities by means of a set of API commands. The management software controls a dispatch module that translates the commands into appropriate instructions for the SVE nodes and communicates with the remote SVE nodes by a plurality of node client-node server pairs that transfer instructions from the dispatch module to the remote nodes and transfer requested information back from the remote nodes to the dispatch module. Various interfaces, such as a command line interpreter and a CIM provider can be built using the API commands.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07158973",
	"publication_date": "2007-01-02",
	"application_number": "10317903",
	"application_date": "2002-12-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for hardware implementation independent verification of network layers",
	"summary": "",
	"abstract": "A verification mechanism monitors incoming and outgoing traffic between a channel adapter and a switch fabric in an InfiniBand system in order to verify that the InfiniBand protocol is correctly followed by the channel adapter. The verification mechanism uses a simple hardware-independent interface to query the channel adapter hardware for specific values and completion queue, queue pair and work queue element attributes that are required for verification. The verification mechanism creates a plurality of verification components that monitor incoming and outgoing messages and verify that each of the channel adapter elements correctly follows the protocol. The verification mechanism is controlled by a verification application programming interface (API) that allows different test benches and tests to incorporate InfiniBand protocol verification in any test system for use with any hardware.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07290051",
	"publication_date": "2007-10-30",
	"application_number": "10338987",
	"application_date": "2003-01-09",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for marking software code",
	"summary": "",
	"abstract": "A method to instrument software code may comprise marking one or more blocks of code in an application program to provide a marked code. The marking may comprise inserting a marker at each of the one or more blocks according to a marking application programming interface (API). The one or more of the blocks of code marked according to the marking API may be transformed so that one or more functions are performed for the marked blocks. The one or more functions may not be part of the application program. The method may include executing the application program and performing the one or more functions for the marked blocks.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07603664",
	"publication_date": "2009-10-13",
	"application_number": "10277542",
	"application_date": "2002-10-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method including a merging driver for accessing multiple data sources",
	"summary": "",
	"abstract": "A method enables access of a plurality of data sources by a single access operation where each data source in the plurality of data sources requires a different driver to access the data source so that there is a plurality of different drivers. The method includes using an application programming interface (API) for each driver in the plurality of different drivers. The API is substantially identical for each of the drivers in the plurality of different drivers. A merging driver receives the single access operation, and in response to the single access operation, the merging driver accesses the plurality of different drivers through the API.",
	"url": null,
	"owner": "Sun Microsystems, Inc.",
	"publication_number": "07406697",
	"publication_date": "2008-07-29",
	"application_number": "09738464",
	"application_date": "2000-12-13",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for providing search engine-based rewards",
	"summary": "",
	"abstract": "A system for enhancing search engine-based search results comprises an application programming interface configured to add value to selected search engine-based web search, a tag indicative of the value-added capacity that is appended to one or more links; a client that accepts a search request and enables an integrated view responsive to the request; and a web server for fetching the integrated web data upon receiving a request for selected search-engine-based web search. The enhanced search engine-based web search system further comprises a content manager that is configured to store and calculate the added value in a personal account of a web user. The added value is retrievable by the user. Search engine-based online search enhancing system and methods also are described.",
	"url": null,
	"owner": "SurfJar, Inc.",
	"publication_number": "07908262",
	"publication_date": "2011-03-15",
	"application_number": "12070656",
	"application_date": "2008-02-19",
	"tags": null,
	"slug": "system-and-method-for-providing-search-enginebased-rewards",
	"match_type": "abstract"
},
{
	"name": "Method for invoking UOML instructions",
	"summary": "",
	"abstract": "Embodiments of the present invention disclose a method for encapsulating Unstructured Operation Markup Language (UOML) into an Application Programming Interface (API), including: mapping an object of an UOML operation to a data type of a programming language, mapping the UOML operation to an API function prototype in the programming language, wherein an attribute or sub element of the UOML operation is mapped to a parameter of the API function prototype; wherein, when an API function is invoked, the API function issues a corresponding UOML operation instruction to a docbase management system according to the mapping relations; after an operation defined by the UOML operation instruction is executed by the docbase management system, the return result from the docbase management system is converted into a data type of the programming language by the API function. In this way, API functions in different programming languages, which correspond to the UOML, can be implemented, and the application developers of the programming languages may invoke suitable API functions directly to implement applications on the docbase management system, thus the development efficiency can be improved.",
	"url": null,
	"owner": "Sursen Corp.",
	"publication_number": "08316379",
	"publication_date": "2012-11-20",
	"application_number": "12415643",
	"application_date": "2009-03-31",
	"tags": null,
	"slug": "method-for-invoking-uoml-instructions",
	"match_type": "abstract"
},
{
	"name": "Apparatus and method for weighted and aging spam filtering rules",
	"summary": "",
	"abstract": "A server is disclosed for filtering e-mail messages. The server receives requests to retrieve e-mail messages on behalf of a client and then retrieves e-mail messages from a mail server on behalf of the client. The server then filters the e-mail messages based on one or more rules and transfers the filtered e-mail messages to the client. In addition, the server continues to filter the e-mail messages after the client has disconnected from the server. In one embodiment of the invention the e-mail message recipient is sent a notification by the server indicating that messages have been filtered. The recipient is then able to scan the filtered messages and insure that the messages have been filtered correctly. In another embodiment, a third party scans the e-mail messages on behalf of the e-mail user to make this determination. Also disclosed is an e-mail filter comprising an application programming interface and a plurality of dynamically loaded rule modules adapted to interface with the API. The rule modules are activated and deactivated based on usage. Specifically, rule modules which have not been used for a predetermined period of time are deactivated. In addition, different rule modules are assigned different weighted values based on the probability that the rule module will accurately filter e-mail messages and/or on the content of the e-mail messages.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07882193",
	"publication_date": "2011-02-01",
	"application_number": "10117065",
	"application_date": "2002-04-04",
	"tags": null,
	"slug": "apparatus-and-method-for-weighted-and-aging-spam-filtering-rules",
	"match_type": "abstract"
},
{
	"name": "Executing unmanaged content in a managed execution environment",
	"summary": "",
	"abstract": "A legacy application program contains unmanaged code. Application definitions for common unmanaged applications are established. An application definition includes a manifest that describes the unmanaged code and an execution wrapper that projects the unmanaged code as a managed assembly to the execution environment. An application definition can also specify other modifications to the unmanaged code, such as modifications to cause the unmanaged code to call managed application programming interfaces (APIs). The application definition is utilized to transform the unmanaged code into a managed assembly. The manifest and wrapper are added to the managed assembly and the unmanaged code is maintained as a resource. The managed execution environment uses the manifest to compute a permissions set for the unmanaged code, and the wrapper invokes the unmanaged code. The unmanaged code uses the managed APIs, and the managed execution environment can therefore manage execution of the code.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07752242",
	"publication_date": "2010-07-06",
	"application_number": "11231681",
	"application_date": "2005-09-20",
	"tags": null,
	"slug": "executing-unmanaged-content-in-a-managed-execution-environment",
	"match_type": "abstract"
},
{
	"name": "Kernel validation layer",
	"summary": "",
	"abstract": "Systems and method of computer security are provided. In one implementation, a method is provided. The method includes monitoring incoming kernel mode calls and identifying a kernel mode call to verify using a predetermined criterion. The method also includes validating the identified kernel mode call, and processing the kernel mode call in accordance with the results of the validation of the kernel mode call. In another implementation a kernel application programming interface validation device is provided. The kernel application programming interface validation device includes a monitoring engine for monitoring incoming kernel mode calls, an analysis engine operable to examiner kernel mode calls, a validation engine operable to determine if a kernel mode call is valid using the results of the analysis engine, and a processing engine.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07587724",
	"publication_date": "2009-09-08",
	"application_number": "11181365",
	"application_date": "2005-07-13",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for filtering E-mail",
	"summary": "",
	"abstract": "A server is disclosed for filtering e-mail messages. The server receives requests to retrieve e-mail messages on behalf of a client and then retrieves e-mail messages from a mail server on behalf of the client. The server then filters the e-mail messages based on one or more rules and transfers the filtered e-mail messages to the client. In addition, the server continues to filter the e-mail messages after the client has disconnected from the server. In one embodiment of the invention the e-mail message recipient is sent a notification by the server indicating that messages have been filtered. The recipient is then able to scan the filtered messages and insure that the messages have been filtered correctly. In another embodiment, a third party scans the e-mail messages on behalf of the e-mail user to make this determination. Also disclosed is an e-mail filter comprising an application programming interface and a plurality of dynamically loaded rule modules adapted to interface with the API. The rule modules are activated and deactivated based on usage. Specifically, rule modules which have not been used for a predetermined period of time are deactivated. In addition, different rule modules are assigned different weighted values based on the probability that the rule module will accurately filter e-mail messages and/or on the content of the e-mail messages.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "RE041940",
	"publication_date": "2010-11-16",
	"application_number": "12697288",
	"application_date": "2010-01-31",
	"tags": null,
	"slug": "method-and-apparatus-for-filtering-email",
	"match_type": "abstract"
},
{
	"name": "Preventing malware from abusing application data",
	"summary": "",
	"abstract": "An attempted exploit of a vulnerability of an application executed by a computer is detected. The exploit attempts to call an application programming interface (API) and abuse application data through a malicious parameter of the call. The API of the application is hooked and monitored for a call made to the hooked API. A parameter of the call is analyzed to determine whether the parameter has a malicious characteristic indicating an attempt to use data within an address space of the application to execute malicious software. A remediation action is taken responsive to determining that the parameter has a malicious characteristic.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "08499354",
	"publication_date": "2013-07-30",
	"application_number": "13048810",
	"application_date": "2011-03-15",
	"tags": null,
	"slug": "preventing-malware-from-abusing-application-data",
	"match_type": "abstract"
},
{
	"name": "Masterless locks in a multi-node environment",
	"summary": "",
	"abstract": "A method, system, application programming interface, computer system, and computer program product to provide locks for controlling access to data by nodes in a multi-node environment while minimizing messages sent between nodes. Based upon knowledge of lock usage in the multi-node environment, a multi-node knowledge agent can determine when no other node is accessing data protected by a given lock, as well as when an event has occurred that precedes a request by another node to access data protected by the given lock. When no other node is accessing data and no such event has occurred, the multi-node knowledge agent can designate that given lock as u201cmasterless.u201d A lock agent on the node hosting the multi-node knowledge agent is authorized to subsequently grant access to the data protected by the masterless lock to clients on that node without communicating with a lock master, which may reside at another node.",
	"url": null,
	"owner": "Symantec Operating Corporation",
	"publication_number": "07340743",
	"publication_date": "2008-03-04",
	"application_number": "10423146",
	"application_date": "2003-04-25",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system to offload archiving process to a secondary system",
	"summary": "",
	"abstract": "Procedures and systems may be used for archiving data from a secondary data set that is a stable copy of a primary data set. In one implementation, the secondary data set is a continuous data protection (CDP) copy of the primary data set. One implementation of a method includes receiving an application programming interface (API) request for archive-eligible data, gathering application data from a secondary data set, obtaining archive-eligible data from the gathered application data, and responding to the request instruction with the archive-eligible data. The gathering is performed by a gathering circuit configured to obtain information from a plurality of types of secondary data sets. The method also includes receiving API modification instructions related to the archive-eligible data, and causing the modification instruction to be performed on the primary data set.",
	"url": null,
	"owner": "Symantec Operating Corporation",
	"publication_number": "07680843",
	"publication_date": "2010-03-16",
	"application_number": "11527027",
	"application_date": "2006-09-26",
	"tags": null,
	"slug": "method-and-system-to-offload-archiving-process-to-a-secondary-system",
	"match_type": "abstract"
},
{
	"name": "System and method for a WPAN firewall",
	"summary": "",
	"abstract": "Systems and methodologies for implementing Wireless Personal Area Network (WPAN) security are provided herein. As disclosed herein, firewall functionality can be implemented for a WPAN-capable device to control access to resources of the device over a WPAN. In one example, a WPAN protocol can be extended to include low-level access control measures that enable analysis of communication requests to and/or from a device prior to acting on the requests. As described herein, a WPAN firewall associated with a device can be configured to block, monitor, and/or log respective resource accesses to and/or from a WPAN. WPAN firewall functionality as described herein can be configured using mechanisms such as an Application Programming Interface (API) and/or a user control interface. Additionally, lateral regulation of security policies for a WPAN and one or more other networks utilized by a device can be provided.",
	"url": null,
	"owner": "Symbol Technologies, Inc.",
	"publication_number": "08156544",
	"publication_date": "2012-04-10",
	"application_number": "12195085",
	"application_date": "2008-08-20",
	"tags": null,
	"slug": "system-and-method-for-a-wpan-firewall",
	"match_type": "abstract"
},
{
	"name": "Touch screen with user interface enhancement",
	"summary": "",
	"abstract": "The present invention is a graphical user interface in a computing device having a processor running an operating system and a display. The graphical user interface comprises a touch screen and a driver coupling the touch screen to the operating system. The driver can display a plurality of icons on the touch screen, or a plurality of screen images having at least one icon, with each of the icons associated with operations on the display and/or the touch screen. Other embodiments include the touch screen having unactivated and activated states, as well as the presence of an application programming interface that enables an application to display at least one image on the touch screen.",
	"url": null,
	"owner": "Synaptics Incorporated",
	"publication_number": "07730401",
	"publication_date": "2010-06-01",
	"application_number": "10125066",
	"application_date": "2002-04-17",
	"tags": null,
	"slug": "touch-screen-with-user-interface-enhancement",
	"match_type": "abstract"
},
{
	"name": "Method for enabling a compiler or interpreter to use identifiers found at run time in a map container object in a manner similar or identical to identifiers declared at compile time",
	"summary": "",
	"abstract": "A method for enabling a compiler or interpreter to use identifiers found at run time in a map container object in a manner similar or identical to identifiers declared at compile time is presented. More specifically, names defined in a map container object during the execution of a program are treated in a manner similar or identical to names defined in a programming namespace at compilation (or interpretation) time. The map container is applied to encapsulate a non-programming namespace application programming interface (API), so that names defined in a non-programming namespace can be treated in a manner similar or identical to names defined in a programming namespace at compilation (or interpretation) time.",
	"url": null,
	"owner": "Tajen Corporation",
	"publication_number": "06993744",
	"publication_date": "2006-01-31",
	"application_number": "09741201",
	"application_date": "2000-12-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method for digitally notifying customers of a utility",
	"summary": "",
	"abstract": "A method for digitally notifying customers of a utility. The method includes receiving real time digital user data from a utility using an application programming interface in communication with a processor and a network, and storing the real time digital user data in a dynamic information database in communication with the processor. At least one message is transmit from the utility through the application programming interface to a first group of user contact devices before transmitting the message to a second group of user contact devices. Response information is received from each user contact device.",
	"url": null,
	"owner": "Techradium, Inc.",
	"publication_number": "07624171",
	"publication_date": "2009-11-24",
	"application_number": "11960373",
	"application_date": "2007-12-19",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for implementing standard applications on an intelligent network service control point through an open services gateway",
	"summary": "",
	"abstract": "Telecommunications service providers are increasingly relying on third party applications developed in accordance with industry standard application programming interfaces (API's). In order to decouple the connection between the standard API's and the telecommunications network, the present invention creates a translation layer or open services gateway (OSG). The open services gateway enables an application written to conform to an industry standard API to be used despite changes in the underlying network. The OSG encapsulates the commands from the API's in a TCP/IP packet which is formatted in accordance with a generic data interface specification for an intelligent network services control point. In this manner there is no hard-coded coupling between open standard API's and the telecommunications network. Additionally, the intelligent network services control point can perform important interference monitoring functions.",
	"url": null,
	"owner": "Telcordia Technologies, Inc.",
	"publication_number": "07272133",
	"publication_date": "2007-09-18",
	"application_number": "10216943",
	"application_date": "2002-08-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "IP link establishment across a data network",
	"summary": "",
	"abstract": "Methods of establishing an IP link between first and second applications running at respective first and second nodes are provided. The first and second applications are arranged to initiate link establishment over a transport layer by issuing a call to their respective operating system socket Application Programming Interfaces. The methods include at said first node, intercepting a socket call generated by said first application and redirecting the socket call to a SIP-based application resident at said first node; and initiating an IP session with said second node using the SIP protocol.",
	"url": null,
	"owner": "Telefonaktiebolaget L M Ericsson (Publ)",
	"publication_number": "08069253",
	"publication_date": "2011-11-29",
	"application_number": "12667616",
	"application_date": "2007-07-04",
	"tags": null,
	"slug": "ip-link-establishment-across-a-data-network",
	"match_type": "abstract"
},
{
	"name": "Method for specification and integration of reusable IP constraints",
	"summary": "",
	"abstract": "A hardware-block constraint specification method includes defining a plurality of hardware-block constraint categories according to at least one of type of constraint and constraint operating mode and defining a plurality of hardware-block constraint commands. Each of the plurality of hardware-block constraint commands is categorized into one of the plurality of hardware-block constraint categories. The method also includes encapsulating the plurality of hardware-block constraint commands within a plurality of modules usable, via an application programming interface, in a stand-alone mode or an integrated mode.",
	"url": null,
	"owner": "Telefonaktiebolaget L M Ericsson (Publ)",
	"publication_number": "07526745",
	"publication_date": "2009-04-28",
	"application_number": "11294653",
	"application_date": "2005-12-05",
	"tags": null,
	"slug": "method-for-specification-and-integration-of-reusable-ip-constraints",
	"match_type": "abstract"
},
{
	"name": "Middleware services layer for platform system for mobile terminals",
	"summary": "",
	"abstract": "A middleware services layer for a platform system for a mobile terminal for a wireless telecommunications system, the platform system including a mobile terminal platform assembly having a software services component, and application software loaded, installed and run in said mobile terminal platform assembly. The middleware services layer comprises at least one application programming interface (API) for providing access to the mobile terminal platform assembly for loading, installing and running application software in said mobile terminal platform assembly; and, at the same time, isolates the platform assembly from the applications via the at least one API.",
	"url": null,
	"owner": "Telefonaktiebolaget L M Ericsson (PUBL)",
	"publication_number": "07415270",
	"publication_date": "2008-08-19",
	"application_number": "10359772",
	"application_date": "2003-02-07",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Mobile device with local server",
	"summary": "",
	"abstract": "A method for operating a mobile computing device includes running a platform-independent application program using a virtual machine operating on the mobile computing device. A server program runs on the mobile computing device so as to access a native function of the mobile computing device that is not supported by the virtual machine. The native function is invoked from the application program by opening a communication connection to the server program using a communication application programming interface (API) of the virtual machine, and sending a message to the server program via the communication connection, so as to cause the server program to access the native function.",
	"url": null,
	"owner": "Telmap Ltd",
	"publication_number": "07568203",
	"publication_date": "2009-07-28",
	"application_number": "10871954",
	"application_date": "2004-06-18",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Dynamic control and regulation of critical database resources using a virtual memory table interface",
	"summary": "",
	"abstract": "A computer-implemented apparatus, method, and article of manufacture provide the ability to manage a plurality of database systems. A domain contains the database systems, and a database in one of the systems has segmented global memory partitions. A virtual monitor partition provides logon access to the segmented global memory partitions in a form of a virtual database. Open application programming interfaces (API) enable logon access to the virtual monitor partition to access data in the virtual database. A multi-system regulator manages the domain and utilizes the open APIs to access data in the virtual data base.",
	"url": null,
	"owner": "Teradata US, Inc.",
	"publication_number": "08082273",
	"publication_date": "2011-12-20",
	"application_number": "11985911",
	"application_date": "2007-11-19",
	"tags": null,
	"slug": "dynamic-control-and-regulation-of-critical-database-resources-using-a-virtual-memory-table-interface",
	"match_type": "abstract"
},
{
	"name": "Embedded garbage collection",
	"summary": "",
	"abstract": "An electronic system comprises a processor, memory coupled to the processor, and an application programming interface that causes an embedded garbage collection object to be active. The memory stores one or more objects that selectively have references from root objects. The embedded garbage collection object preferably uses control data to cause objects to be removed from said memory, the removed objects comprise those objects that were created while an embedded garbage collection object was active and that do not have references from root objects.",
	"url": null,
	"owner": "Texas Instruments Incorporated",
	"publication_number": "07565385",
	"publication_date": "2009-07-21",
	"application_number": "10831387",
	"application_date": "2004-04-22",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Management of co-processor information by integrating non-program information with program information",
	"summary": "",
	"abstract": "A system including a host processor () operating in combination with one or more co-processors () is disclosed. In this system, a file storage facility () stores executable files () that are called by a server () in the host processor () by way of an application programming interface (API) (). In the disclosed system, the executable files () include both a program (obj 2) together with information (obj 2 attrs) indicative of a condition needed for execution of the program. Based on the condition information, the program (obj 2) is downloaded () to the co-processor (), and executed by the co-processor () if the the condition is satisfied.",
	"url": null,
	"owner": "Texas Instruments Incorporated",
	"publication_number": "06922735",
	"publication_date": "2005-07-26",
	"application_number": "09822753",
	"application_date": "2001-03-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and system for visual linker",
	"summary": "",
	"abstract": "The present invention provides a visual linker. The visual linker includes a link server that implements linking instructions for sections to a memory. The visual linker also includes a graphical user interface that receives said instructions and displays said sections within said memory. The visual linker also includes an application programming interface that receives said instructions and reports the results of said linking instruction and said sections within said memory. The visual linker also includes an incomplete link comprising sections not allocated to said memory. The visual linker also includes a link recipe comprising said instructions implemented by said link server.",
	"url": null,
	"owner": "Texas Instruments Incorporated",
	"publication_number": "06883167",
	"publication_date": "2005-04-19",
	"application_number": "09604112",
	"application_date": "2000-06-26",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Business object document mapper",
	"summary": "",
	"abstract": "In accordance with an embodiment, an architecture for directly interfacing Business Object Documents (BODs) may include a BOD mapper which employs the BOD for input and output. A model object definable by class is created corresponding to the data contained in the BOD. System logic for the local domain is provided with communication with the BOD mapper through a BOD mapper application programming interface. The logic operates on the model object and a mapping configuration is provided for relating elements of the BOD to the model object. An addressing element communicates with the BOD mapper to define the mapping configuration for the BODs operated on by the BOD Mapper for input/output and mapping for a map call and parsing for a list call is accomplished for the contents from the BOD to the model object as defined by the BOD mapping configuration.",
	"url": null,
	"owner": "The Boeing Company",
	"publication_number": "07873679",
	"publication_date": "2011-01-18",
	"application_number": "11862082",
	"application_date": "2007-09-26",
	"tags": null,
	"slug": "business-object-document-mapper",
	"match_type": "abstract"
},
{
	"name": "System and method for an open autonomy kernel (oak)",
	"summary": "",
	"abstract": "The Open Autonomy Kernel (OAK) addresses critical infrastructure requirements for next generation autonomous and semi-autonomous systems (), including performance tracking, anomaly detection, diagnosis, fault recovery, and plant u201csafingu201d. OAK combines technologies in automated planning and scheduling, control agent-based systems (), and model based reasoning to form a portable software architecture (), knowledge-base, and open Application Programming Interface (API) to enable integrated auxiliary subsystem autonomy.",
	"url": null,
	"owner": "The John Hopkins University",
	"publication_number": "07574497",
	"publication_date": "2009-08-11",
	"application_number": "10344876",
	"application_date": "2002-05-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Abstract interface for unified communications with dynamic models",
	"summary": "",
	"abstract": "The present invention provides a method and system for interfacing with a model regardless of model type. An abstract interface is provided for interfacing a model. The abstract interface is compatible with a plurality of model types. A call can then be made to a dynamic model via a method specified by the abstract interface. Data is then received from the dynamic model in response to the call. In certain embodiments the abstract interface is an application programming interface (API).",
	"url": null,
	"owner": "The MathWorks, Inc.",
	"publication_number": "08127311",
	"publication_date": "2012-02-28",
	"application_number": "11270221",
	"application_date": "2005-11-09",
	"tags": null,
	"slug": "abstract-interface-for-unified-communications-with-dynamic-models",
	"match_type": "abstract"
},
{
	"name": "Generating code for data references",
	"summary": "",
	"abstract": "A method includes specifying a model, the model including data having internal pre-defined data storage classes and external custom data storage classes and generating software source code for the model with a code generator using the internal predefined data storage classes and the external custom data storage classes. A system includes an application programming interface (API), the API adapted to receive user input for generating an external custom data storage class and an interpreted programming language process, the interpreted programming language process generating a set of instructions from the user input to an automatic code generator to generate code corresponding to data declared as the external custom data storage class in the automatic code generator.",
	"url": null,
	"owner": "The MathWorks, Inc.",
	"publication_number": "07367012",
	"publication_date": "2008-04-29",
	"application_number": "09876487",
	"application_date": "2001-06-07",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System and method for using stream objects to perform stream processing in a text-based computing environment",
	"summary": "",
	"abstract": "A mechanism for using stream objects in stream processing operations is provided. A definition of a class of stream objects used in stream processing algorithms can define output and update operations included in instances of the stream objects and the API (application programming interface) through which they may be called. The class definition may further include the type of state information to be held by the instantiated stream objects. An instance of the stream object may be instantiated in a text-based computing environment and the operations may be used to process streams of data.",
	"url": null,
	"owner": "The MathWorks, Inc.",
	"publication_number": "08234623",
	"publication_date": "2012-07-31",
	"application_number": "11519255",
	"application_date": "2006-09-11",
	"tags": null,
	"slug": "system-and-method-for-using-stream-objects-to-perform-stream-processing-in-a-textbased-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Global visualization process for personal computer platforms (GVP+)",
	"summary": "",
	"abstract": "A system and process that incorporates hardware and software as elements to be combined with procedures and processes to obtain, format, store, combine, control, display, record, and visualize dynamic scenarios by interacting with accurate, realistic models and actual events within, on, and above a three-dimensional surface to be observed or modeled. The present invention software and process is capable of displaying extremely high resolution terrain models and imagery in real time over the entire surface of the planet, as well as a large number of moving entities and their associated graphical models. These features, combined with a network application programming interface (API), make the present invention suitable for flight simulation out-the-window displays, command and control scenarios, and mission review or rehearsal.",
	"url": null,
	"owner": "The United States of America as represented by the Secretary of the Navy",
	"publication_number": "07564455",
	"publication_date": "2009-07-21",
	"application_number": "11296723",
	"application_date": "2005-12-06",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System specification language for resource management architecture and corresponding programs therefore",
	"summary": "",
	"abstract": "A method for distributing application, system and network specification information to functional elements controlling a plurality of hosts in a distributed environment, including steps for preparing specification files in a language providing a syntax adapted to describe application, system and network specification information, compiling the specification files to thereby generate specification objects, and providing an application programming interface (API) permitting the functional elements to access the specification information using API calls.",
	"url": null,
	"owner": "The United States of America as represented by the Secretary of the Navy",
	"publication_number": "07171654",
	"publication_date": "2007-01-30",
	"application_number": "09864829",
	"application_date": "2001-05-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System, method and software for creating, maintaining, navigating or manipulating complex data objects and their data relationships",
	"summary": "",
	"abstract": "The invention provides systems, methods and software for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores. In one aspect, the invention also provides an application programming interface (u201cAPIu201d) useful for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores as a CDOG model.",
	"url": null,
	"owner": "Thought, Inc.",
	"publication_number": "07043481",
	"publication_date": "2006-05-09",
	"application_number": "10158672",
	"application_date": "2002-05-30",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method of providing continuous feedback",
	"summary": "",
	"abstract": "A feedback component which adds on to a spooler and utilizes the spooler's connectivity with the network clients for communications. The network clients connect to the feedback component through the spooler's application programming interface (API) by making a request to register for feedback. Once the request is received, the feedback component continuously provides the network components with status of jobs in readable text and codes as the jobs progress in the underlying printing system. These status messages are not limited to just print status messages like printing, paused, printed, etc., but may include customized status messages for any device in the printing system such as scheduled, dialing, sending-fax, etc. In addition, a time delay may be introduced between messages in order to prevent excessive traffic being sent during times of heavy traffic.",
	"url": null,
	"owner": "Toshiba Tec Kabushiki Kaisha",
	"publication_number": "07460260",
	"publication_date": "2008-12-02",
	"application_number": "10626378",
	"application_date": "2003-07-24",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Computer apparatus and method for non-intrusive inspection of program behavior",
	"summary": "",
	"abstract": "A computer-implemented method for malicious code detection. An emulator is initialized, and import dynamic link libraries are processed. Instructions of a target program are emulated using the emulator. Select application programming interface calls are intercepted using an intercept list during the program emulation.",
	"url": null,
	"owner": "Trend Micro Incorporated",
	"publication_number": "08407787",
	"publication_date": "2013-03-26",
	"application_number": "12357979",
	"application_date": "2009-01-22",
	"tags": null,
	"slug": "computer-apparatus-and-method-for-nonintrusive-inspection-of-program-behavior",
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for performing antivirus tasks in a mobile wireless device",
	"summary": "",
	"abstract": "Disclosed are techniques for performing an antivirus task in a mobile wireless device running an embedded operating system. In one embodiment, calls intended for an application programming interface (API) function code is redirected to an antivirus function code. The redirection to the antivirus function code may be performed by modifying a kernel structure to point to a modified entry list instead of an API entry list. The redirection to the antivirus function code may also be performed by modifying the API function code to allow the antivirus function code to execute before the API function code. The kernel structure or the API function code may be properly restored back to its original form. Software implementations of these techniques may be readily loaded and unloaded, and may not require re-installation of the embedded operating system.",
	"url": null,
	"owner": "Trend Micro Incorporated",
	"publication_number": "07735138",
	"publication_date": "2010-06-08",
	"application_number": "11126476",
	"application_date": "2005-05-10",
	"tags": null,
	"slug": "method-and-apparatus-for-performing-antivirus-tasks-in-a-mobile-wireless-device",
	"match_type": "abstract"
},
{
	"name": "Application behavior based malware detection",
	"summary": "",
	"abstract": "An executable file is loaded into a virtual machine arranged to emulate the instructions of said executable file. The virtual machine keeps track of application programming interfaces (APIs) used by the executable file during emulation. The executable file is scanned to determine names of (APIs) used. Behavior flags are set if certain conditions occur within the executable file. The APIs determined during emulation and during scanning are compared with a set of known behaviors. A match of the APIs and the known behaviors indicates a high risk of malware. A determination of malware being present is based upon any matches and any behavior flags that are set.",
	"url": null,
	"owner": "Trend Micro, Inc.",
	"publication_number": "07779472",
	"publication_date": "2010-08-17",
	"application_number": "11247349",
	"application_date": "2005-10-11",
	"tags": null,
	"slug": "application-behavior-based-malware-detection",
	"match_type": "abstract"
},
{
	"name": "Web client data conversion for synthetic environment interaction",
	"summary": "",
	"abstract": "Web client data conversion for synthetic environment interaction is described, including receiving a message at a synthetic environment server indicating occurrence of an event on a web client by a web application server configured to generate a transformed message from a first protocol format to a second protocol format, sending the transformed message from the web application server to a message bus using the second protocol format, translating the transformed message into a translated message, the transformed message being translated from the second protocol to a third protocol using a property class, sending the translated message from the message bus to the synthetic environment server according to the property class, and updating the synthetic environment using data included in the translated message, wherein the synthetic environment is updated in substantially real-time. In some embodiments, a method can include an implementing an application programming interface associated with a transactional server.",
	"url": null,
	"owner": "Trion Worlds, Inc.",
	"publication_number": "08214515",
	"publication_date": "2012-07-03",
	"application_number": "12791773",
	"application_date": "2010-06-01",
	"tags": null,
	"slug": "web-client-data-conversion-for-synthetic-environment-interaction",
	"match_type": "abstract"
},
{
	"name": "Adaptive termination",
	"summary": "",
	"abstract": "An apparatus for consolidated data services comprising a plurality of devices, a plurality of data services and a content application programming interface (API). A user API provides user identification for each of the plurality of devices. A feedback API configured to receive data from each of the plurality of devices. A device API configured to provide a client system to one or more of the plurality of devices using one or more of a plurality of device API methods. An update API configured to provide an updated client system to one or more of the plurality of devices using one more of a plurality of update API methods. A web service consolidator configured to control interactions between the content API, the user API, the feedback API, the device API, the update API, a plurality of data services and the plurality of devices.",
	"url": null,
	"owner": "Triune Systems, LLC",
	"publication_number": "08373436",
	"publication_date": "2013-02-12",
	"application_number": "13072462",
	"application_date": "2011-03-25",
	"tags": null,
	"slug": "adaptive-termination",
	"match_type": "abstract"
},
{
	"name": "System and method for processing telephony sessions",
	"summary": "",
	"abstract": "In one embodiment, the method of processing telephony sessions includes: communicating with an application server using an application layer protocol; processing telephony instructions with a call router; and creating call router resources accessible through a call router Application Programming Interface (API). In another embodiment, the system for processing telephony sessions includes: a call router, a URI for an application server, a telephony instruction executed by the call router, and a call router API resource.",
	"url": null,
	"owner": "Twilio, Inc.",
	"publication_number": "08755376",
	"publication_date": "2014-06-17",
	"application_number": "13743078",
	"application_date": "2013-01-16",
	"tags": null,
	"slug": "system-and-method-for-processing-telephony-sessions",
	"match_type": "abstract"
},
{
	"name": "System and method for processing telephony sessions",
	"summary": "",
	"abstract": "In one embodiment, the method of processing telephony sessions includes: communicating with an application server using an application layer protocol; processing telephony instructions with a call router; and creating call router resources accessible through a call router Application Programming Interface (API). In another embodiment, the system for processing telephony sessions includes: a call router, a URI for an application server, a telephony instruction executed by the call router, and a call router API resource.",
	"url": null,
	"owner": "Twilio, Inc.",
	"publication_number": "08306021",
	"publication_date": "2012-11-06",
	"application_number": "12417630",
	"application_date": "2009-04-02",
	"tags": null,
	"slug": "system-and-method-for-processing-telephony-sessions",
	"match_type": "abstract"
},
{
	"name": "Personal video recorder systems and methods",
	"summary": "",
	"abstract": "Systems and methods are disclosed for providing an interactive television system for recording television programming. The interactive television system may include components for providing personal video recorder (PVR) functionality, such as an interactive television program guide (IPG), PVR extensions, PVR application programming interfaces (APIs), a PVR device, any suitable hardware or software, or a combination thereof. These components may be implemented in, for example, an arrangement having an integrated PVR-compliant device with a PVR device, or in an arrangement having a PVR-compliant device (e.g., a set-top box) coupled to PVR equipment (e.g., a remote PVR server or a PVR sidecar) with a PVR device. The PVR-compliant device may include software and hardware configured to implement the IPG. The PVR APIs may be a library of intelligent vendor-specific and vendor-independent APIs able to determine the type of PVR device being used. The PVR extensions and PVR APIs may be configured to provide a seamless integration of functionality associated with the PVR-compliant device and the PVR device. A full port of the IPG may be implemented in both the PVR-compliant device and the PVR device.",
	"url": null,
	"owner": "United Video Properties, Inc.",
	"publication_number": "08281345",
	"publication_date": "2012-10-02",
	"application_number": "12818876",
	"application_date": "2010-06-18",
	"tags": null,
	"slug": "personal-video-recorder-systems-and-methods",
	"match_type": "abstract"
},
{
	"name": "Personal video recorder systems and methods",
	"summary": "",
	"abstract": "Systems and methods are disclosed for providing an interactive television system for recording television programming. The interactive television system may include components for providing personal video recorder (PVR) functionality, such as an interactive television program guide (IPG), PVR extensions, PVR application programming interfaces (APIs), a PVR device, any suitable hardware or software, or a combination thereof. These components may be implemented in, for example, an arrangement having an integrated PVR-compliant device with a PVR device, or in an arrangement having a PVR-compliant device (e.g., a set-top box) coupled to PVR equipment (e.g., a remote PVR server or a PVR sidecar) with a PVR device. The PVR-compliant device may include software and hardware configured to implement the IPG. The PVR APIs may be a library of intelligent vendor-specific and vendor-independent APIs able to determine the type of PVR device being used. The PVR extensions and PVR APIs may be configured to provide a seamless integration of functionality associated with the PVR-compliant device and the PVR device. A full port of the IPG may be implemented in both the PVR-compliant device and the PVR device.",
	"url": null,
	"owner": "United Video Properties, Inc.",
	"publication_number": "08156528",
	"publication_date": "2012-04-10",
	"application_number": "10105082",
	"application_date": "2002-03-21",
	"tags": null,
	"slug": "personal-video-recorder-systems-and-methods",
	"match_type": "abstract"
},
{
	"name": "System level applications of adaptive computing (SLAAC) technology",
	"summary": "",
	"abstract": "An API (Application Programming Interface) for an adaptive computing system (ACS) may be used to create a system for performing an application on different types of ACS platforms. The API may be used to generate a system object including a host and a number of nodes and channels. A system data structure is created which describes the nodes, which may be FPGA (Field Programmable Gate Array)-based ACS accelerator boards. The API may enable source-code porting and scaling from small research platforms to larger field-deployable platforms.",
	"url": null,
	"owner": "University of Southern California",
	"publication_number": "06915502",
	"publication_date": "2005-07-05",
	"application_number": "10038063",
	"application_date": "2002-01-03",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "System level applications of adaptive computing (SLAAC) technology",
	"summary": "",
	"abstract": "An API (Application Programming Interface) for an adaptive computing system (ACS) may be used to create a system for performing an application on different types of ACS platforms. The API may be used to generate a system object including a host and a number of nodes and channels. A system data structure is created which describes the nodes, which may be FPGA (Field Programmable Gate Array)-based ACS accelerator boards. The API may enable source-code porting and scaling from small research platforms to larger field-deployable platforms.",
	"url": null,
	"owner": "University of Southern California",
	"publication_number": "07404170",
	"publication_date": "2008-07-22",
	"application_number": "11175993",
	"application_date": "2005-07-05",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and apparatus for using AIN techniques to facilitate servicing of calls by a group of users",
	"summary": "",
	"abstract": "AIN based call routing, transfer and conferencing methods and apparatus are disclosed. In various embodiments initial call routing is based on the availability of a party to service a call as determined from a computer system associated with the party selected to service the call. The party's computer system supports a telephone application programming interface (TAPI) which allows a telephone network server to determine the availability of the party selected to service the call from, in part, TAPI obtained telephone line status information. The network server supplies call related data to the computer system of the party assigned to service the call. Call transfer and conferencing operations along with the transfer of call related data are also supported. AIN mid-call triggers are used in some embodiments to support call transfer and conferencing operations.",
	"url": null,
	"owner": "Verizon Services Corp.",
	"publication_number": "06947537",
	"publication_date": "2005-09-20",
	"application_number": "09812487",
	"application_date": "2001-03-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Intelligent configurable graphics bandwidth modulator",
	"summary": "",
	"abstract": "An apparatus and method to dynamically regulate system bandwidth in a graphics system includes receiving vertex data from an application by way of an application programming interface. The rate that the vertex data is received from the application is then determined. In the event the rate is greater than a selected threshold, the graphics system is configured to operate in immediate mode, wherein vertex data is rendered immediately upon reception. In the event the rate is less than the selected threshold, the graphics system is configured to operate in retained mode, wherein vertex data is stored prior to being rendered. The apparatus and method switches between each of the modes on-the-fly in a manner that is transparent to the application.",
	"url": null,
	"owner": "Vivante Corporation",
	"publication_number": "08031194",
	"publication_date": "2011-10-04",
	"application_number": "11938214",
	"application_date": "2007-11-09",
	"tags": null,
	"slug": "intelligent-configurable-graphics-bandwidth-modulator",
	"match_type": "abstract"
},
{
	"name": "Backup systems and methods for a virtual computing environment",
	"summary": "",
	"abstract": "Improved backup and storage operations are disclosed for virtual computing environments using a backup proxy server to perform storage operations on one or more virtual machine disks. The proxy server can include a module that intercepts application programming interface (API) calls, for writing backup data to a first location, prior to the data arriving on the proxy disk. During the intercept process, the data can be compressed in memory pages of the proxy server and redirected to an alternative backup disk location. The proxy server can also include a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently, only blocks with non-matching signatures are processed for backup.",
	"url": null,
	"owner": "Vizioncore, Inc.",
	"publication_number": "08375003",
	"publication_date": "2013-02-12",
	"application_number": "13244187",
	"application_date": "2011-09-23",
	"tags": null,
	"slug": "backup-systems-and-methods-for-a-virtual-computing-environment",
	"match_type": "abstract"
},
{
	"name": "Information storage and retrieval system for storing and retrieving the visual form of information from an application in a database",
	"summary": "",
	"abstract": "The visual form of data from a computer program is received and stored in a database. The visual form of the data may be received, for example, in response to a print operation by the computer program or by some other operation such as a cut and paste sequence of operations or by sending the data to another application. The visual form of the data may be stored as a vector image that permits scalability. The visual form of the data may be stored with other identifying information or tags in the database to facilitate searching of the database. The data in the database may be encoded in a manner that ensures data integrity and that permits detection of when data has been compromised. In one embodiment, a service layer application is provided to control access to the database by performing encoding and decoding of the data in the database. The service layer may have an application programming interface that permits many applications to have access to the database. Another application may be provided for accessing the visual form of the data from the database and for providing this data to another computer program. Such an application permits a user to create compound documents from data in the database using the other computer program.",
	"url": null,
	"owner": "Waters Technologies Corporation",
	"publication_number": "07587413",
	"publication_date": "2009-09-08",
	"application_number": "11584384",
	"application_date": "2006-10-20",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Methods and computer program products for providing network quality of service for World Wide Web applications",
	"summary": "",
	"abstract": "Methods and computer program products are disclosed for providing Qos for Web applications via an internet service application programming interface (u201cISAPIu201d) filter running on an internet information server, wherein the ISAPI filter uses a traffic control application programming interface to manage bandwidth for individual HTTP requests. Responses to HTTP requests can be prioritized based on policies defined by the Web application developer, wherein policy decisions may be made based on many different parameters, such as, for example, the IP address of the Web browser making the request, the type of browser being used, HTTP u201ccookies,u201d the uniform resource locator being requested, an authenticated user ID, or any other information that is exposed from the internet information server through server variables. The present invention accomplishes this with no modifications to the internet information server, and with very minimal changes to the Web application.",
	"url": null,
	"owner": "WebTV Networks, Inc.",
	"publication_number": "07188188",
	"publication_date": "2007-03-06",
	"application_number": "09570329",
	"application_date": "2000-05-12",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Platform independent randomness accumulator for network applications",
	"summary": "",
	"abstract": "A random number generator includes one or more pseudorandom data sources that generate pseudorandom data, a randomness accumulation facility that receives pseudorandom data from the one or more pseudorandom data sources, a storage facility that stores a random value generated by the randomness accumulation facility, and an application programming interface (u201cAPIu201d), operating independently from the operation of the randomness accumulation facility, that retrieves, upon request by a software application, the random value currently stored in the storage facility and provides a random number to the software application. The pseudorandom data is hashed with a previously-stored random value and a first counter value and may be encrypted before storing in the storage facility. Likewise, the API hashes the current random value with a second counter value before outputting the random number thus generated, decrypting the current value first if necessary.",
	"url": null,
	"owner": "Wells Fargo Bank, N.A.",
	"publication_number": "07546327",
	"publication_date": "2009-06-09",
	"application_number": "11018806",
	"application_date": "2004-12-21",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Configuring and controlling wagering game compatibility",
	"summary": "",
	"abstract": "A wagering game system and its operations are described herein. In some embodiments, the operations can include determining that a secondary wagering game application is compatible with a primary wagering game application, wherein compatibility is based in-part on an ability of the primary wagering game application to provide wagering game information to the secondary wagering game application via an application programming interface. The operations can also include enabling the secondary wagering game to present a secondary wagering game in connection with a primary wagering game controlled by the primary wagering game application.",
	"url": null,
	"owner": "WMS Gaming, Inc.",
	"publication_number": "08926418",
	"publication_date": "2015-01-06",
	"application_number": "13744892",
	"application_date": "2013-01-18",
	"tags": null,
	"slug": "configuring-and-controlling-wagering-game-compatibility",
	"match_type": "abstract"
},
{
	"name": "Customizable remote order entry system and method",
	"summary": "",
	"abstract": "A system for generating a requisition comprises a client computer system and a server computer system connected via a network. The client computer is configured to allow a plurality of users to access the server computer system. The system further includes a server application comprising a user interface running on the server computer system and having a multi-tier architecture. The multi-tier architecture includes a first tier of client application code for initiating processing by the server application in response to input by a user of the client computer system, a middle tier of object-oriented server application code, and a third tier of shared access and data code. An application programming interface is configured to allow a user, such as a system administrator or the like, to customize the user interface. In a further aspect, a method of customizing a server application is also provided.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "07127677",
	"publication_date": "2006-10-24",
	"application_number": "09768148",
	"application_date": "2001-01-23",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Open class noun classification",
	"summary": "",
	"abstract": "A method of semantically classifying a data set of open class nouns and a system for executing the method. The method includes loading, by a processing device, a data set comprising one or more open class nouns from a computer readable medium operably connected to the processing device; extracting, by the processing device, the one or more open class nouns from the data set; for each open class noun, querying, by the processing device, one or more application programming interfaces (APIs) to produce one or more results; deriving, by the processing device, a confidence score for the data set based upon the one or more results; and determining, by the processing device, a classification for the data set based upon the derived confidence score.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "08195458",
	"publication_date": "2012-06-05",
	"application_number": "12858168",
	"application_date": "2010-08-17",
	"tags": null,
	"slug": "open-class-noun-classification",
	"match_type": "abstract"
},
{
	"name": "Partial print provider",
	"summary": "",
	"abstract": "A partial print provider in the form of a Dynamically Linked Library (DLL) that implements a portion of a commercial spooler Application Programming Interface (API). The print provider translates between printer and job properties under the commercial spooler to and from printer and job properties under a proprietary spooler. This permits a third party proprietary print spooler to interface with the commercial print spooler, allowing greater control and management of print jobs by network clients than is available under the commercial spooler. The partial print provider allows the proprietary spooler to leverage off of the commercial print system's print services, protocols and network technologies, obviating the need to replace all commercial spooler and print services with custom code and reducing costs substantially.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "07511837",
	"publication_date": "2009-03-31",
	"application_number": "09726233",
	"application_date": "2000-11-29",
	"tags": null,
	"slug": "partial-print-provider",
	"match_type": "abstract"
},
{
	"name": "System and method for managing digital certificates on a remote device",
	"summary": "",
	"abstract": "A system and method for managing a digital certificate associated with a remote device is provided. The method includes providing a Web Service Application Programming Interface (API) and communicating digitally between the Web Service API and a remote device, including one of requesting the remote device to perform a task associated with managing digital certificates, and responding to a request from the remote device for performing a task associated with managing digital certificates.",
	"url": null,
	"owner": "Xerox Corporation",
	"publication_number": "08261080",
	"publication_date": "2012-09-04",
	"application_number": "11786660",
	"application_date": "2007-04-12",
	"tags": null,
	"slug": "system-and-method-for-managing-digital-certificates-on-a-remote-device",
	"match_type": "abstract"
},
{
	"name": "Core template package for creating run-time reconfigurable cores",
	"summary": "",
	"abstract": "A method and apparatus for creating run-time reconfigurable cores using a core template package. The core template package provides an object-oriented application programming interface for specifying run-time reconfigurable (RTR) electronic circuit designs in a RTR application program. A run-time parameterizable (RTP) core library includes a plurality of predefined RTP core classes that implement selected functions in an electronic circuit design when invoked from an RTR application program. An RTP core template package includes a plurality of template classes. Each template class has a predefined set of method interfaces and fields. The RTP core template package further includes an RTP core template class that includes methods for building, connecting and traversing a hierarchy of RTP core objects based on the template classes and the predefined RTP core classes.",
	"url": null,
	"owner": "Xilinx, Inc.",
	"publication_number": "07143418",
	"publication_date": "2006-11-28",
	"application_number": "10013764",
	"application_date": "2001-12-10",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Method and apparatus for designing an embedded system for a programmable logic device",
	"summary": "",
	"abstract": "Method and apparatus for designing an embedded system for a programmable logic device (PLD) is described. Parameters specific to the embedded system are obtained. Source code files that use the parameters to define configurable attributes of the base platform are generated. A software definition and a hardware definition are obtained. The software and hardware definitions each use an application programming interface (API) of the base platform to define communication between software and hardware of the embedded system. An implementation of the embedded system is automatically built for the PLD using the source code files, the software definition, and the hardware definition.",
	"url": null,
	"owner": "Xilinx, Inc.",
	"publication_number": "07917876",
	"publication_date": "2011-03-29",
	"application_number": "11729206",
	"application_date": "2007-03-27",
	"tags": null,
	"slug": "method-and-apparatus-for-designing-an-embedded-system-for-a-programmable-logic-device",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for communicating documents via an autonomous multiple-function peripheral device",
	"summary": "",
	"abstract": "A multiple-function peripheral device includes a packet-switched network interface and an autonomous application programming interface. The application programming interface requests image information from a remote server via the packet-switched network interface in a first mode of operation. The application programming interface sends image information to a remote device via the packet-switched network interface in a second mode of operation.",
	"url": null,
	"owner": "Xpedite Systems, LLC",
	"publication_number": "07804823",
	"publication_date": "2010-09-28",
	"application_number": "12207310",
	"application_date": "2008-09-09",
	"tags": null,
	"slug": "systems-and-methods-for-communicating-documents-via-an-autonomous-multiplefunction-peripheral-device",
	"match_type": "abstract"
},
{
	"name": "Systems and methods for communicating documents via an autonomous multiple-function peripheral device",
	"summary": "",
	"abstract": "A multiple-function peripheral device includes a packet-switched network interface and an autonomous application programming interface. The application programming interface requests image information from a remote server via the packet-switched network interface in a first mode of operation. The application programming interface sends image information to a remote device via the packet-switched network interface in a second mode of operation.",
	"url": null,
	"owner": "Xpedite Systems, LLC",
	"publication_number": "08116303",
	"publication_date": "2012-02-14",
	"application_number": "12860899",
	"application_date": "2010-08-22",
	"tags": null,
	"slug": "systems-and-methods-for-communicating-documents-via-an-autonomous-multiplefunction-peripheral-device",
	"match_type": "abstract"
},
{
	"name": "Centralized location broker",
	"summary": "",
	"abstract": "A centralized location system includes a location update application programming interface (API) to receive varying types of location inputs for a user from at least one location-providing application. A memory stores a location of the user and the location inputs, wherein the location update API periodically updates in the memory the location inputs when location updates are received from the at least one location-providing application. A location export API, upon request from a location-based service application, processes the location inputs to estimate a location of the user, which location estimate replaces the stored location in memory and is sent to the location-based service application. A user interface enables the user to specify a location granularity for at least one of the at least one location-providing application and the location-based service application.",
	"url": null,
	"owner": "Yahoo! Inc.",
	"publication_number": "08045995",
	"publication_date": "2011-10-25",
	"application_number": "11755998",
	"application_date": "2007-05-31",
	"tags": null,
	"slug": "centralized-location-broker",
	"match_type": "abstract"
},
{
	"name": "Formal language and translator for parallel processing of data",
	"summary": "",
	"abstract": "The present invention, in an example embodiment, provides a special-purpose formal language and translator for the parallel processing of large databases in a distributed system. The special-purpose language has features of both a declarative programming language and a procedural programming language and supports the co-grouping of tables, each with an arbitrary alignment function, and the specification of procedural operations to be performed on the resulting co-groups. The language's translator translates a program in the language into optimized structured calls to an application programming interface for implementations of functionality related to the parallel processing of tasks over a distributed system. In an example embodiment, the application programming interface includes interfaces for MapReduce functionality, whose implementations are supplemented by the embodiment.",
	"url": null,
	"owner": "Yahoo! Inc.",
	"publication_number": "07921416",
	"publication_date": "2011-04-05",
	"application_number": "11551336",
	"application_date": "2006-10-20",
	"tags": null,
	"slug": "formal-language-and-translator-for-parallel-processing-of-data",
	"match_type": "abstract"
},
{
	"name": "Method and a communication platform for packet communication between a service provider in a first network and a radio communication device in a second network",
	"summary": "",
	"abstract": "The present invention relates to a communication platform for packet communication between at least one service provider in a first network and a radio communication device in a second network, the second network comprises a first network node provided to, at least partly, handle communication between the radio communication device and a gateway located in the second network. The gateway is provided to handle communication between the second network and the communication platform, and the communication platform comprises an application programming interface provided to handle two-way communication between the service provider and the radio communication device.",
	"url": null,
	"owner": "YAHOO! Inc.",
	"publication_number": "07848233",
	"publication_date": "2010-12-07",
	"application_number": "11571391",
	"application_date": "2005-06-15",
	"tags": null,
	"slug": "method-and-a-communication-platform-for-packet-communication-between-a-service-provider-in-a-first-network-and-a-radio-communication-device-in-a-second-network",
	"match_type": "abstract"
},
{
	"name": "System and method for improving online search engine results",
	"summary": "",
	"abstract": "System and method for improving online search engine results. In one embodiment, a search system queries one or more servers of a destination site to obtain detailed and relevant information. In one embodiment, this query is in the form of an application programming interface call. Based on the content received in response to the aforementioned queries, a plurality of content pages may then be used to build one or more search databases against which user searches may be made during some future time period.",
	"url": null,
	"owner": "Yahoo! Inc.",
	"publication_number": "07599966",
	"publication_date": "2009-10-06",
	"application_number": "11046501",
	"application_date": "2005-01-28",
	"tags": null,
	"slug": null,
	"match_type": "abstract"
},
{
	"name": "Recording and publishing content on social media websites",
	"summary": "",
	"abstract": "Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for recording and publishing content on social networking websites and other websites include providing an imbedded link on a social networking webpage to media recorder software stored on an external server system, invoking the media recorder software within a displayed instance of the social networking webpage through an application programming interface for the social networking webpage, receiving a video stream defining video captured using the media recorder software at the external video management server system, generating and storing a video file using the received video stream at the external server system, selecting the stored video file for distribution via one or more communication networks, and providing the stored video file for display within displayed instances of webpages hosted on external web server systems.",
	"url": null,
	"owner": "Youtoo Technologies, LLC",
	"publication_number": "08311382",
	"publication_date": "2012-11-13",
	"application_number": "13475765",
	"application_date": "2012-05-18",
	"tags": null,
	"slug": "recording-and-publishing-content-on-social-media-websites",
	"match_type": "abstract"
},
{
	"name": "Apparatuses, methods and systems for a distributed object renderer",
	"summary": "",
	"abstract": "Software on a server receives a render request from a queue database. The software determines the render process requirements for the render request. The software queries a user profile database for render data based on the render process requirements. The software transmits a request to provide render data to a client device, if render data is not available in the user profile database. The software receives a response from the client device, including the requested render data. The software generates the rendered image, using the rendered data. The software creates a publishing element from the rendered data and a publishing template. And the software publishes the publishing element to the a newsfeed using an application programming interface (API).",
	"url": null,
	"owner": "Zynga Inc.",
	"publication_number": "08754905",
	"publication_date": "2014-06-17",
	"application_number": "13244694",
	"application_date": "2011-09-26",
	"tags": null,
	"slug": "apparatuses-methods-and-systems-for-a-distributed-object-renderer",
	"match_type": "abstract"
},
{
	"name": "Cross-promotion API",
	"summary": "",
	"abstract": "A system and computer-implemented method for promoting an electronic game of electronic games is provided. A user interface module is configured to receive an input from a user relating to playing a first and second electronic game. A processor-implemented association engine, operatively coupled to the user interface, is configured to associate user attributes of the first and second electronic games to the user based on the input. An application programming interface (API) is configured to associate a user attribute of a third electronic game different from the first and second electronic games, the API configured to associate based, at least in part, on rule engine implemented by the API and at least one of the user attributes of the first and second electronic games and game data of the third electronic game.",
	"url": null,
	"owner": "Zynga Inc.",
	"publication_number": "08814703",
	"publication_date": "2014-08-26",
	"application_number": "13793712",
	"application_date": "2013-03-11",
	"tags": null,
	"slug": "crosspromotion-api",
	"match_type": "abstract"
}]