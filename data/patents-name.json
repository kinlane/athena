
[{
	"name": "Apparatus, system, and method for facilitating data flow between a first application programming interface and a second application programming interface",
	"summary": "",
	"abstract": "An apparatus, system, and method are disclosed for facilitating data flow between a first application programming interface (u201cAPIu201d) and a second API. The function receiving module receives a first function call from a calling application. The first function call is directed at one or more files comprising an API signature according to the first API. The function converting module converts the first function call according to the first API into a second function call according to a second API. The sending module sends the second function call to a processing application. The result receiving module receives a first data result from the processing application according to the second API. The result converting module converts the first data result according to the second API to a second data result according to the first API. The returning module returns the second data result to the calling application.",
	"url": null,
	"owner": "",
	"publication_number": "08200742",
	"publication_date": "2012-06-12",
	"application_number": "12371502",
	"application_date": "2009-02-13",
	"tags": null,
	"slug": "apparatus-system-and-method-for-facilitating-data-flow-between-a-first-application-programming-interface-and-a-second-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Open API video system and method of making and using same",
	"summary": "",
	"abstract": "A video player unit, system and method, and a video hierarchy. Included are at least one memory device, a plurality of communication access points for receiving at least one program play, an open application programming interface associated with the at least one memory device, wherein a plurality of applications correspondent to the open application programming interface allow a user to manipulate metadata associated with ones of the programs plays, wherein the metadata relates to interframe interactivity with detailed aspects of the ones of the program plays, and at least one correlation engine in communication with the open application programming interface, wherein the at least one correlation engine provides for correlation among at least the interframes of the program play to ones of the interframes of other ones of the program plays.",
	"url": null,
	"owner": "",
	"publication_number": "08122467",
	"publication_date": "2012-02-21",
	"application_number": "11981763",
	"application_date": "2007-10-31",
	"tags": null,
	"slug": "open-api-video-system-and-method-of-making-and-using-same",
	"match_type": "name"
},
{
	"name": "Method and apparatus for reverse patching of application programming interface calls in a sandbox environment",
	"summary": "",
	"abstract": "A computer implemented method comprising: identifying an API function call directed to a broker process, wherein a plurality of information requested by an originator is directly relevant to a sandbox process; trapping an API function call directed to a broker process using a computer, wherein the API function call references the broker process, wherein the broker process is a process that executes one or more operations on the behalf of a sandbox process, and wherein the sandbox process has an insufficient permission level to execute the one or more operations; passing the trapped API function call to the sandbox process using the computer; executing the trapped API function call within the sandbox process to generate a result in reference to the sandbox process using the computer; passing the result from the sandbox process to the broker process using the computer; and passing the result from the broker process to an originator using the computer.",
	"url": null,
	"owner": "Adobe Systems Incorporated",
	"publication_number": "08438640",
	"publication_date": "2013-05-07",
	"application_number": "12974934",
	"application_date": "2010-12-21",
	"tags": null,
	"slug": "method-and-apparatus-for-reverse-patching-of-application-programming-interface-calls-in-a-sandbox-environment",
	"match_type": "name"
},
{
	"name": "Method and apparatus for operating an open API network having a proxy",
	"summary": "",
	"abstract": "A telecommunication system, method, apparatus, and computer readable media that implements an open application program interface (API) system in which open API servers pass and receive API commands to applications through a novel proxy. The proxy assists implementing various management functions, such as assigning open API servers to application and monitoring the overall system, and service contract control, all beneficially in a transparent manner. The proxy enables the telecommunication system to handle geographically diverse applications and open API servers. All API command can, but need not, pass through the proxy.",
	"url": null,
	"owner": "Alcatel Lucent",
	"publication_number": "08001555",
	"publication_date": "2011-08-16",
	"application_number": "12170584",
	"application_date": "2008-07-10",
	"tags": null,
	"slug": "method-and-apparatus-for-operating-an-open-api-network-having-a-proxy",
	"match_type": "name"
},
{
	"name": "Application programming interface, system, and method for collaborative online applications",
	"summary": "",
	"abstract": "An application framework including different application programming interfaces (APIs) is described which performs a variety of mobile device functions in response to API calls from applications. For example, in response to relatively simple API calls made by applications the application framework manages the complex tasks associated with invitations and matchmaking. By way of example, the details of complex transactions such as establishing peer-to-peer connections between mobile devices may be transparent to the application developer, thereby simplifying the application design process. The application framework may include an application daemon for communicating with a first set of services and an applications services module for communicating with a separate set of services. The application framework may also include a cache for caching data for each of the services based on different cache management policies driven by each of the services. The cache may be updated by push notification cache updates sent from each of the services.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08438294",
	"publication_date": "2013-05-07",
	"application_number": "12832025",
	"application_date": "2010-07-07",
	"tags": null,
	"slug": "application-programming-interface-system-and-method-for-collaborative-online-applications",
	"match_type": "name"
},
{
	"name": "Application programming interfaces for data parallel computing on multiple processors",
	"summary": "",
	"abstract": "A method and an apparatus for a parallel computing program calling APIs (application programming interfaces) in a host processor to perform a data processing task in parallel among compute units are described. The compute units are coupled to the host processor including central processing units (CPUs) and graphic processing units (GPUs). A program object corresponding to a source code for the data processing task is generated in a memory coupled to the host processor according to the API calls. Executable codes for the compute units are generated from the program object according to the API calls to be loaded for concurrent execution among the compute units to perform the data processing task.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "08286198",
	"publication_date": "2012-10-09",
	"application_number": "12264896",
	"application_date": "2008-11-04",
	"tags": null,
	"slug": "application-programming-interfaces-for-data-parallel-computing-on-multiple-processors",
	"match_type": "name"
},
{
	"name": "Application programming interfaces for scrolling operations",
	"summary": "",
	"abstract": "At least certain embodiments of the present disclosure include an environment with user interface software interacting with a software application. A method for operating through an application programming interface (API) in this environment includes transferring a set bounce call. The method further includes setting at least one of maximum and minimum bounce values. The set bounce call causes a bounce of a scrolled region in an opposite direction of a scroll based on a region past an edge of the scrolled region being visible in a display region at the end of the scroll.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07844915",
	"publication_date": "2010-11-30",
	"application_number": "11620717",
	"application_date": "2007-01-07",
	"tags": null,
	"slug": "application-programming-interfaces-for-scrolling-operations",
	"match_type": "name"
},
{
	"name": "Application programming interfaces for synchronization",
	"summary": "",
	"abstract": "The application programming interface operates in an environment with user interface software interacting with multiple software applications or processes in order to synchronize animations associated with multiple views or windows of a display of a device. The method for synchronizing the animations includes setting attributes of views independently with each view being associated with a process. The method further includes transferring a synchronization call to synchronize animations for the multiple views of the display. In one embodiment the synchronization call includes the identification and the number of processes that are requesting animation. The method further includes transferring a synchronization confirmation message when a synchronization flag is enabled. The method further includes updating the attributes of the views from a first state to a second state independently. The method further includes transferring a start animation call to draw the requested animations when both processes have updated attributes.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07872652",
	"publication_date": "2011-01-18",
	"application_number": "11620709",
	"application_date": "2007-01-07",
	"tags": null,
	"slug": "application-programming-interfaces-for-synchronization",
	"match_type": "name"
},
{
	"name": "System and method for interfacing index based and iterator based application programming interfaces",
	"summary": "",
	"abstract": "A system and method for interfacing index based and iterator based file management routines. In general, the disclosed system maintains an iterator cache having multiple iterators. Each active iterator is associated with a most recently used directory entry. Upon receiving an index based request, the iterator closest to the index based request is identified. If the index based request is closer to the top of the directory than it is to the closest active iterator, the directory entries are sequentially examined beginning at the top of the directory with the first entry. Otherwise, the system deternines whether the index based request is located above or below the closest iterator. If the index based request is above the closest iterator, the system steps backward beginning with the directory entry associated with the closest iterator until the directory entry associated with the index based request is located. If the closest iterator is located below the closest iterator, the system steps forward through the directory entries beginning with the directory entry associated with the closest iterator until the requested directory entry is located.",
	"url": null,
	"owner": "Apple Inc.",
	"publication_number": "07769785",
	"publication_date": "2010-08-03",
	"application_number": "11172077",
	"application_date": "2005-06-29",
	"tags": null,
	"slug": "system-and-method-for-interfacing-index-based-and-iterator-based-application-programming-interfaces",
	"match_type": "name"
},
{
	"name": "System and method for managing long names in an application programming interface",
	"summary": "",
	"abstract": "Software managing long names in an application programming interface receives a request to perform a requested operation on one or more fields, the application comprising a first operation operable to perform the requested operation on at least one field type. The software determines whether the field type of any of the fields is incompatible with the first operation. If the field types of the one or more fields are compatible with the first operation, then the software performs the requested operation on the one or more fields using the first operation. If the software determines that the field type of at least one of the fields is incompatible with the first operation, then it converts the request into a call for a second operation operable to perform the requested operation on the one or more fields and performs the requested operation using the second operation.",
	"url": null,
	"owner": "CA, Inc.",
	"publication_number": "08286148",
	"publication_date": "2012-10-09",
	"application_number": "12698620",
	"application_date": "2010-02-02",
	"tags": null,
	"slug": "system-and-method-for-managing-long-names-in-an-application-programming-interface",
	"match_type": "name"
},
{
	"name": "System and method for managing long names in an application programming interface",
	"summary": "",
	"abstract": "Software managing long names in an application programming interface receives a request to perform a requested operation on one or more fields, the application comprising a first operation operable to perform the requested operation on at least one field type. The software determines whether the field type of any of the fields is incompatible with the first operation. If the field types of the one or more fields are compatible with the first operation, then the software performs the requested operation on the one or more fields using the first operation. If the software determines that the field type of at least one of the fields is incompatible with the first operation, then it converts the request into a call for a second operation operable to perform the requested operation on the one or more fields and performs the requested operation using the second operation.",
	"url": null,
	"owner": "Computer Associates Think, Inc.",
	"publication_number": "07676797",
	"publication_date": "2010-03-09",
	"application_number": "11047101",
	"application_date": "2005-01-31",
	"tags": null,
	"slug": "system-and-method-for-managing-long-names-in-an-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Secure expandable advertisements using an API and cross-domain communications",
	"summary": "",
	"abstract": "A system to present secure expandable advertisements using an API and cross-domain communication. A content publishing system that hosts a website can implement an expandable advertisement using IFRAMEs that are expanded upon receiving an API call from a third party rich media vendor that hosts the expandable advertisement when the content publishing system and the third party media vendor are of differing domains.",
	"url": null,
	"owner": "eBay Inc.",
	"publication_number": "08452710",
	"publication_date": "2013-05-28",
	"application_number": "12716022",
	"application_date": "2010-03-02",
	"tags": null,
	"slug": "secure-expandable-advertisements-using-an-api-and-crossdomain-communications",
	"match_type": "name"
},
{
	"name": "System and method for application programming interfaces for keyword extraction and contextual advertisement generation",
	"summary": "",
	"abstract": "A computer-implemented system and method for keyword extraction and contextual advertisement generation are disclosed. The system in an example embodiment includes a keyword extraction service to receive from a consumer application a request for activation of a keyword extraction service via an application programming interface, the request including an identity of a content source, the request further including an identification of a particular extraction process to be used by the keyword extraction service on the identified content source; determine if the keyword extraction service has already processed the identified content source and retained extracted keywords in a data store; extract keywords from the identified content source using the particular extraction process identified in the request; and make the extracted keywords accessible to the consumer application.",
	"url": null,
	"owner": "eBay Inc.",
	"publication_number": "08200662",
	"publication_date": "2012-06-12",
	"application_number": "12940715",
	"application_date": "2010-11-05",
	"tags": null,
	"slug": "system-and-method-for-application-programming-interfaces-for-keyword-extraction-and-contextual-advertisement-generation",
	"match_type": "name"
},
{
	"name": "System and method for application programming interfaces for keyword extraction and contextual advertisement generation",
	"summary": "",
	"abstract": "A computer-implemented system and method for keyword extraction and contextual advertisement generation are disclosed. The system in an example embodiment includes a keyword extraction service to receive from a consumer application a request for activation of a keyword extraction service via an application programming interface, the request including an identity of a content source, the request further including an identification of a particular extraction process to be used by the keyword extraction service on the identified content source; determine if the keyword extraction service has already processed the identified content source and retained extracted keywords in a data store; extract keywords from the identified content source using the particular extraction process identified in the request; and make the extracted keywords accessible to the consumer application.",
	"url": null,
	"owner": "eBay Inc.",
	"publication_number": "07831586",
	"publication_date": "2010-11-09",
	"application_number": "11645946",
	"application_date": "2006-12-27",
	"tags": null,
	"slug": "system-and-method-for-application-programming-interfaces-for-keyword-extraction-and-contextual-advertisement-generation",
	"match_type": "name"
},
{
	"name": "N-port virtualization driver-based application programming interface and split driver implementation",
	"summary": "",
	"abstract": "An API in an NPIV-compatible SAN is disclosed that includes functions for creating a vlink, replicating driver software for managing the vlink, monitoring resources in an HBA, or removing a target so that resources can be freed up for other vlinks. The API is part of a driver that communicates with a host OS and also communicates with an HBA to establish the vlinks between the host OS and FC devices. To create vlinks, an u201caddu201d function in the API is called by the OS. In addition, when a new vlink is created, a single version of an HBA interface function block is maintained in the driver, but a discovery function block, SCSI bus function block, and I/O function block are all duplicated, forming one logical vlink driver for each vlink. To obtain HBA resource information, a resource monitoring functions in the API may be called by the OS.",
	"url": null,
	"owner": "Emulex Design & Manufacturing Corporation",
	"publication_number": "07921431",
	"publication_date": "2011-04-05",
	"application_number": "11336032",
	"application_date": "2006-01-20",
	"tags": null,
	"slug": "nport-virtualization-driverbased-application-programming-interface-and-split-driver-implementation",
	"match_type": "name"
},
{
	"name": "Hypermedia browser API simulation to enable use of browser plug-ins and applets as embedded widgets in script-language-based interactive programs",
	"summary": "",
	"abstract": "A system is described which provides the capability for high-level extensible scripting language interpreters to incorporate and employ Web browser plug-ins as components within script-based programs. A script interpreter extension is described which simulates the plug-in API interface of a Web browser, from the point of view of the browser plug-in, to allow program scripts to cause browser plug-ins to be launched and manipulated, in a manner similar to the scripting platform's native widgets, from within the executing program script. This system allows embedded external program objects to be used to display and enable interactive processing of embedded data objects.",
	"url": null,
	"owner": "Eolas Technlogies, Inc.",
	"publication_number": "07814157",
	"publication_date": "2010-10-12",
	"application_number": "11058436",
	"application_date": "2005-02-14",
	"tags": null,
	"slug": "hypermedia-browser-api-simulation-to-enable-use-of-browser-plugins-and-applets-as-embedded-widgets-in-scriptlanguagebased-interactive-programs",
	"match_type": "name"
},
{
	"name": "Internet-phone or smart phone with applications for managing and playing digital content, and a mobile device operating system supporting application programming interface",
	"summary": "",
	"abstract": "An Internet-Phone as a smart phone may include a touch sensitive screen, an operating system, a graphical user interface, an image acquisition application, a messaging application, a document application, an e-mail application, an Internet browsing application, and an application for playing audio content. The Internet-Phone may provide an application programming interface (API) to support applications. A user of the Internet-Phone can install additional applications. The Internet-Phone may further include one or more wireless communication units with a radio frequency controller compatible to IEEE802.11 and Bluetoothu00ae standards. In some examples, the Internet- Phone may include wireless synchronization of data or software with other wireless devices on a common network. In other examples, the Internet-Phone may include streaming or transferring of digital content to a wireless controller box, a wireless TV, or a wireless printer over the air. Still other examples include connecting the Internet-Phone to a Bluetoothu00ae or IEEE802.11 audio output device.",
	"url": null,
	"owner": "Flexiworld Technologies, Inc.",
	"publication_number": "08285802",
	"publication_date": "2012-10-09",
	"application_number": "12907865",
	"application_date": "2010-10-19",
	"tags": null,
	"slug": "internetphone-or-smart-phone-with-applications-for-managing-and-playing-digital-content-and-a-mobile-device-operating-system-supporting-application-programming-interface",
	"match_type": "name"
},
{
	"name": "System and method for application programming interface for extended intelligent platform management",
	"summary": "",
	"abstract": "A system for controlling a computer system uses a management controller having sensor data record objects in a sensor data record repository. Sensor data record objects contain data from a plurality of sensors, and at least one sensor data record object contains a property descriptor. The property descriptor references a property data object readable and writeable by a controlling computer through the management controller, and provides a way to control at least one feature of the computer system.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07966389",
	"publication_date": "2011-06-21",
	"application_number": "10420584",
	"application_date": "2003-04-22",
	"tags": null,
	"slug": "system-and-method-for-application-programming-interface-for-extended-intelligent-platform-management",
	"match_type": "name"
},
{
	"name": "System and method for intercepting, instrumenting and characterizing usage of an application programming interface",
	"summary": "",
	"abstract": "A system and method for generically intercepting any type of application programming interface (API) events. The API event interception system includes an intercept library and an API. The application program calls the API to process the client event generated. The API receives the request for service from the application program and determines if intercepting of events is enabled. If intercepting is enabled, the API sends the event to the intercept library. The intercept library determines that the intercept library is enabled to support the event. If the intercept library is enabled to support the event, the intercept library invokes the required event program. If the intercept library is not enabled to support the event, the intercept library returns a message instructing the API to process the event.",
	"url": null,
	"owner": "Hewlett-Packard Development Company, L.P.",
	"publication_number": "07921430",
	"publication_date": "2011-04-05",
	"application_number": "11623843",
	"application_date": "2007-01-17",
	"tags": null,
	"slug": "system-and-method-for-intercepting-instrumenting-and-characterizing-usage-of-an-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Asynchronous data structure pull application programming interface (API) for stream systems",
	"summary": "",
	"abstract": "Provided are techniques for processing data items. A limit on the number of dequeue operations allowed in a current step of processing for a queue-like data structure is set, wherein the number of allowed dequeue operations limit at least one of an amount of CPU resources and an amount of memory resources to be used by an operator. The operator to perform processing is selected and the operator is activated by passing control to the operator, which then dequeues data constrained by the limits set. In response to receiving control back from the operator, the data structure size is examined to determine whether the operator made forward progress in that the operator enqueued or dequeued at least one data item.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08141080",
	"publication_date": "2012-03-20",
	"application_number": "11848098",
	"application_date": "2007-08-30",
	"tags": null,
	"slug": "asynchronous-data-structure-pull-application-programming-interface-api-for-stream-systems",
	"match_type": "name"
},
{
	"name": "Data reporting application programming interfaces in an XML parser generator for XML validation and deserialization",
	"summary": "",
	"abstract": "A method for interfacing with an XML (Extensible Markup Language) parser generator to generate deserialization information interleaved with XML parsing and validation, including: providing an XML parser generator with information about the schema which the instance data conforms to; providing a data reporting application programming interface (API) and a generator module; providing one or more implementations of the data reporting API; providing the XML parser generator with a selected data reporting API implementation module; generating an XML parser to parse and validate instance documents conforming to the specified input schema and deserializing the instance documents into the desired deserialization format during the parse.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08171395",
	"publication_date": "2012-05-01",
	"application_number": "12130208",
	"application_date": "2008-05-30",
	"tags": null,
	"slug": "data-reporting-application-programming-interfaces-in-an-xml-parser-generator-for-xml-validation-and-deserialization",
	"match_type": "name"
},
{
	"name": "Forms integration of an external data model not implemented through a document object model (DOM) accessible application programming interface (API)",
	"summary": "",
	"abstract": "Embodiments of the present invention address deficiencies of the art in respect to deploying XForms in an enterprise environment and provide a method, system and computer program product for forms integration of an external data model not implemented through a DOM accessible API. In one embodiment of the invention, a method for forms integration of an external data model not implemented through a DOM accessible API can include generating a data graph for an external data model for a forms based application and transforming the data graph into a DOM representation of the data graph. Value changes for fields of a form in the forms based application can be applied to nodes of the DOM representation and mutations in the nodes of the DOM representation can be synchronized to corresponding nodes in the data graph.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08176081",
	"publication_date": "2012-05-08",
	"application_number": "11282354",
	"application_date": "2005-11-18",
	"tags": null,
	"slug": "forms-integration-of-an-external-data-model-not-implemented-through-a-document-object-model-dom-accessible-application-programming-interface-api",
	"match_type": "name"
},
{
	"name": "Method and system for providing version control of parameters in a command-based API using java serialization",
	"summary": "",
	"abstract": "A technique for determining whether a server host supports the functions in a command sent by a client host. The client host formulates a command including a command object that contains parameter objects. The parameter objects, which represent the functions, are serialized, e.g., using the Java serialization command, and communicated to the server host. The server host attempts to deserialize the parameter objects. If it is successful, it is concluded that the server host supports the functions represented by the parameter objects. Or, it is concluded that the server host is incompatible with the functions represented by one or more parameter objects that cannot be deserialized. The server host may be a storage server, and the functions may be storage-related, such as a copy type to be performed.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "07921433",
	"publication_date": "2011-04-05",
	"application_number": "12111676",
	"application_date": "2008-04-29",
	"tags": null,
	"slug": "method-and-system-for-providing-version-control-of-parameters-in-a-commandbased-api-using-java-serialization",
	"match_type": "name"
},
{
	"name": "Parameters passing of data structures where API and corresponding stored procedure are different versions/releases",
	"summary": "",
	"abstract": "A system and computer program product for passing parameters of data structures where an API and corresponding stored procedures are at different version/release levels is provided. A received data structure is parsed for a version identifier of a caller. The parsed version identifier is compared to a stored procedure version identifier and a determination is made with regards to a data structure compatibility or a data structure incompatibility. If a data structure compatibility is determined, all received data structure elements are parsed. If, however, a data structure incompatibility is determined, only data structure elements known to both the caller and the stored procedures are parsed.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08161495",
	"publication_date": "2012-04-17",
	"application_number": "12117709",
	"application_date": "2008-05-08",
	"tags": null,
	"slug": "parameters-passing-of-data-structures-where-api-and-corresponding-stored-procedure-are-different-versionsreleases",
	"match_type": "name"
},
{
	"name": "Using a state machine embedded within a session initiation protocol (SIP) servlet to implement an application programming interface (API)",
	"summary": "",
	"abstract": "The present invention discloses a system for implementing a software application programming interface (API) within a session initiation protocol (SIP) servlet. Such a system can utilize a state machine, a SIP servlet configured to execute the state machine, and an enterprise service bus (ESB). The state machine can be configured to send and receive a series of communications and can be defined in a definition document. The series of communications can represent the execution of a software function defined within an API. The SIP servlet can select a state machine based upon an indicator contained within a received SIP message. The ESB can be configured to execute a system function in response to communications with the state machine.",
	"url": null,
	"owner": "International Business Machines Corporation",
	"publication_number": "08260944",
	"publication_date": "2012-09-04",
	"application_number": "11851906",
	"application_date": "2007-09-07",
	"tags": null,
	"slug": "using-a-state-machine-embedded-within-a-session-initiation-protocol-sip-servlet-to-implement-an-application-programming-interface-api",
	"match_type": "name"
},
{
	"name": "Application programming interface for fusion message passing technology",
	"summary": "",
	"abstract": "A data-processing system and method are disclosed, which generally includes a plurality of components connected to a bus within a data-processing apparatus utilizing one or more input/output interfaces (e.g., IOCTL) in communication with the bus. A dynamic interface is implemented, which includes a plurality of interface modules that permits varying data-processing applications to scan, identify and interface with the plurality of components utilizing the input/output interface, thereby increasing data-processing application development efficiency relative to one or more components within the data-processing system.",
	"url": null,
	"owner": "LSI Corporation",
	"publication_number": "07761630",
	"publication_date": "2010-07-20",
	"application_number": "11148395",
	"application_date": "2005-06-07",
	"tags": null,
	"slug": "application-programming-interface-for-fusion-message-passing-technology",
	"match_type": "name"
},
{
	"name": "Application programming interface for administering the distribution of software updates in an update distribution system",
	"summary": "",
	"abstract": "An application programming interface (API) for administering the distribution of software updates on an update service node is presented. The API provides a plurality of interface calls through which an administrator can establish rules by which software updates available to the update service node are distributed.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08245218",
	"publication_date": "2012-08-14",
	"application_number": "10537720",
	"application_date": "2005-03-11",
	"tags": null,
	"slug": "application-programming-interface-for-administering-the-distribution-of-software-updates-in-an-update-distribution-system",
	"match_type": "name"
},
{
	"name": "Application programming interface for identifying, downloading and installing applicable software updates",
	"summary": "",
	"abstract": "An application programming interface (API) provides a set of functions for application developers to build software programs that automatically detect, download, and install desired software updates.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08448160",
	"publication_date": "2013-05-21",
	"application_number": "13178356",
	"application_date": "2011-07-07",
	"tags": null,
	"slug": "application-programming-interface-for-identifying-downloading-and-installing-applicable-software-updates",
	"match_type": "name"
},
{
	"name": "Application programming interface for identifying, downloading and installing applicable software updates",
	"summary": "",
	"abstract": "An application programming interface (API) provides a set of functions for application developers to build software programs that automatically detect, download, and install desired software updates.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07987459",
	"publication_date": "2011-07-26",
	"application_number": "11082326",
	"application_date": "2005-03-16",
	"tags": null,
	"slug": "application-programming-interface-for-identifying-downloading-and-installing-applicable-software-updates",
	"match_type": "name"
},
{
	"name": "Application programming interface for implementing directory service access using directory service markup language",
	"summary": "",
	"abstract": "A set of DSML application programming interface (DSML API) functions is provided to facilitate the implementation of DSML-based directory service access. The DSML API includes a DSML document API class for building or accessing a DSML payload, and a DSML connection API class that handles connection and transport to a DSML server. To access a directory service, the client calls functions of the DSML document API class to generate a DSML request payload, and calls functions of the DSML connection API to transport a packet with the DSML request payload according to a pre-selected connection protocol, such as SOAP, to the DSML server for forwarding to the directory service.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07668902",
	"publication_date": "2010-02-23",
	"application_number": "10449573",
	"application_date": "2003-05-30",
	"tags": null,
	"slug": "application-programming-interface-for-implementing-directory-service-access-using-directory-service-markup-language",
	"match_type": "name"
},
{
	"name": "Application programming interface for implementing directory service access using directory service markup language",
	"summary": "",
	"abstract": "A set of DSML application programming interface (DSML API) functions is provided to facilitate the implementation of DSML-based directory service access. The DSML API includes a DSML document API class for building or accessing a DSML payload, and a DSML connection API class that handles connection and transport to a DSML server. To access a directory service, the client calls functions of the DSML document API class to generate a DSML request payload, and calls functions of the DSML connection API to transport a packet with the DSML request payload according to a pre-selected connection protocol, such as SOAP, to the DSML server for forwarding to the directory service.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08099456",
	"publication_date": "2012-01-17",
	"application_number": "12250310",
	"application_date": "2008-10-13",
	"tags": null,
	"slug": "application-programming-interface-for-implementing-directory-service-access-using-directory-service-markup-language",
	"match_type": "name"
},
{
	"name": "Application programming interface for inviting participants in a serverless peer to peer network",
	"summary": "",
	"abstract": "Methods and computer readable mediums are described that facilitate inviting user entities on a network. The method may include initiating a first application for sending an invitation by a first user entity on a first endpoint, selecting a second user entity to receive the invitation, and selecting an activity. The method may also include sending from the first endpoint to the second user entity the invitation to participate in the activity if the first endpoint determines the activity is supported by a computing application on the first endpoint.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08036140",
	"publication_date": "2011-10-11",
	"application_number": "11112347",
	"application_date": "2005-04-22",
	"tags": null,
	"slug": "application-programming-interface-for-inviting-participants-in-a-serverless-peer-to-peer-network",
	"match_type": "name"
},
{
	"name": "Application programming interface techniques for accessing operating system resources",
	"summary": "",
	"abstract": "An operating system includes APIs developed in part to support recent innovations in computer hardware and in part to provide enhanced services to application programs. Among their other features, these APIs provide access to operating system functionality in a manner that is comprehensive, efficient, usable, extendible and, in some cases, reusable.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07730500",
	"publication_date": "2010-06-01",
	"application_number": "11001248",
	"application_date": "2004-11-30",
	"tags": null,
	"slug": "application-programming-interface-techniques-for-accessing-operating-system-resources",
	"match_type": "name"
},
{
	"name": "Application programming interface to the simple object access protocol",
	"summary": "",
	"abstract": "Systems and computer-readable media implementing methods for providing an application programming interface (API) to the Simple Object Access Protocol (SOAP) are described. The API provides mechanisms for creating all parts of SOAP request messages, for sending the created messages over HTTP to a remote server, and, if the request is successful, for retrieving the response from the remote server, or, in the case of failure, for accessing whatever error information is available. The information passed through the API can be in the form of parameters which allows both the SOAP protocol and the applications that use it to change without requiring changes to the API itself.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07644415",
	"publication_date": "2010-01-05",
	"application_number": "11099320",
	"application_date": "2005-04-04",
	"tags": null,
	"slug": "application-programming-interface-to-the-simple-object-access-protocol",
	"match_type": "name"
},
{
	"name": "Audio application programming interface",
	"summary": "",
	"abstract": "An audio application programming interface (API) enables an audio processing graph to be modified during processing. If they are received while the audio graph is playing or paused, graph modifying commands may be inserted into either an asynchronous command queue or a deferred command queue. The audio API may also include a clock manager for synchronizing clocks from a number of different connected audio rendering devices, applications, processors, functions, operations, modules, or other resources. The clock manager may provide an interface that enables a number of control groups to be defined. Each such control group may include a master clock, a slave clock, and a control.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07746803",
	"publication_date": "2010-06-29",
	"application_number": "11241004",
	"application_date": "2005-09-30",
	"tags": null,
	"slug": "audio-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Automated method and system for collecting and reporting API performance profiles",
	"summary": "",
	"abstract": "A method to measure the performance of an Application Programming Interface (API) includes selecting a target API and tracking memory allocation for the functional calls of the selected API to generate a list of functions called by the API. The individual functions are then called within the API in isolation and timing and memory allocation data for each are collected and recorded. The recorded results are then bucketized according to a log base 2 method and made accessible by API users to indicate the performance of specific APIs.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07895579",
	"publication_date": "2011-02-22",
	"application_number": "11454714",
	"application_date": "2006-06-16",
	"tags": null,
	"slug": "automated-method-and-system-for-collecting-and-reporting-api-performance-profiles",
	"match_type": "name"
},
{
	"name": "Demultiplexer application programming interface",
	"summary": "",
	"abstract": "A set of interfaces and data structures (i.e., a demultiplexer API) represents a demultiplexer of multimedia data. The data structure utilizes a number of fields, each containing an element of a command. In one embodiment, at least seven commands are formed for proper operation of the demultiplexer, including Initialize, SetPresentationDescriptor, GetPresentationDescriptor, GetPendingPresentationDescriptor, ProcessInput, ProcessOutput, and Flush commands. The demultiplexer API allows the consumer to use muxed stream data such as DV in a uniform manner to generate elementary stream data such as audio and video (compressed or uncompressed) and allows demultiplexers to be used as an independent component.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07882510",
	"publication_date": "2011-02-01",
	"application_number": "10635730",
	"application_date": "2003-08-06",
	"tags": null,
	"slug": "demultiplexer-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Extensibility application programming interface and framework for meta-model objects",
	"summary": "",
	"abstract": "The present invention relates to a system and methodology providing an Application Programming Interface (API) and framework that supports a meta-object model for application design and operating system interactions. The API includes an input component that receives data and/or instructions. The input component processes a meta-data model that interrelates data via a class hierarchy, wherein the class hierarchy includes relationship descriptions between class objects, attributes, rules, and/or behavioral descriptions. Another aspect includes a data management system that includes a component to receive an item having meta-data annotations. An analysis component determines at runtime a structure for the item via deployment of the meta-data annotations. The system can also include a framework component that defines meta-data class derivations, meta-data classes, meta-data integrity rules, and/or meta-data class behavior.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07979842",
	"publication_date": "2011-07-12",
	"application_number": "11935140",
	"application_date": "2007-11-05",
	"tags": null,
	"slug": "extensibility-application-programming-interface-and-framework-for-metamodel-objects",
	"match_type": "name"
},
{
	"name": "Interface protocol and API for a wireless transceiver",
	"summary": "",
	"abstract": "A wireless protocol may be implemented in a smart transceiver device that contains the physical (PHY) and media access control (MAC) layers of the wireless protocol stack. In various embodiments, a serial peripheral interface (SPI) based design may be used. Disclosed is an embodiment of a protocol which may be used to provide control and data transfer to and from the smart transceiver. In particular, an exemplary format of the protocol, the commands, and responses is disclosed. In a further embodiment, an application programming interface (API) is disclosed. The API may provide hardware independent services that can be used to establish, maintain, and transport data to and from the system and the smart transceiver device. In particular, an exemplary and non-limiting set of services, function calls, configuration methods, events, and parameters is disclosed.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08060681",
	"publication_date": "2011-11-15",
	"application_number": "12163026",
	"application_date": "2008-06-27",
	"tags": null,
	"slug": "interface-protocol-and-api-for-a-wireless-transceiver",
	"match_type": "name"
},
{
	"name": "Managed application execution application programming interface and schema",
	"summary": "",
	"abstract": "Managed application programming interfaces (APIs), schemas and procedures receives a managed API call from an application, and maps the managed API call to an unmanaged API call. Managed data types and managed data objects of the managed API call are mapped to corresponding unmanaged data types and data objects. A request resulting from the unmanaged API call is dispatched to and interpreted by an unmanaged programming language interpreter, which executes the request in an unmanaged programming language. An unmanaged response to the request is mapped to a corresponding managed response, which is provided to the managed application.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "07921432",
	"publication_date": "2011-04-05",
	"application_number": "11378881",
	"application_date": "2006-03-17",
	"tags": null,
	"slug": "managed-application-execution-application-programming-interface-and-schema",
	"match_type": "name"
},
{
	"name": "Metadata driven API development",
	"summary": "",
	"abstract": "The described method and system synchronizes source code with byproducts or artifacts of an application creation process. In one embodiment, a generation tool may be used to produce source code header files based on a design specification, where the source code header files are compiled with a current version of source code. Compilation errors may direct a developer to modify either the specification or the source code to eliminate the errors. The described method and system may be integrated into a development platform that is adapted to direct the user to perform particular revisions or updates to bring the source code in line with the artifacts.",
	"url": null,
	"owner": "Microsoft Corporation",
	"publication_number": "08117589",
	"publication_date": "2012-02-14",
	"application_number": "12146462",
	"application_date": "2008-06-26",
	"tags": null,
	"slug": "metadata-driven-api-development",
	"match_type": "name"
},
{
	"name": "Application programming interface for geographic data in computer games",
	"summary": "",
	"abstract": "A computer game depicts or represents actual or imaginary geographic locales as part of the play scenarios of the games. The computer game uses a map database that contains data that represent geographic features, such as roads, in a locale. A game engine program presents a game play scenario to a user via a user interface of the game. An application programming interface program accepts requests for data from the game engine program, accesses data from the map database, and provides the data in a suitable format to the game engine program for use in presenting the game scenario to the user.",
	"url": null,
	"owner": "Navteq North America, LLC",
	"publication_number": "07828655",
	"publication_date": "2010-11-09",
	"application_number": "10798531",
	"application_date": "2004-03-11",
	"tags": null,
	"slug": "application-programming-interface-for-geographic-data-in-computer-games",
	"match_type": "name"
},
{
	"name": "3D graphics API extension for a shared exponent image format",
	"summary": "",
	"abstract": "A three dimensional (3D) graphics application programming interface (API) extension provides support for specifying images in a shared exponent format. The shared exponent format is used to represent high dynamic range textures in a compact encoding to reduce the memory footprint needed to store the image data compared with other high dynamic range formats. Image data is encoded to and decoded from the shared exponent format using a pixel processing pipeline. Image data encoded into the shared exponent format can be decoded and used as texture data during rendering.",
	"url": null,
	"owner": "Nvidia Corporation",
	"publication_number": "08432410",
	"publication_date": "2013-04-30",
	"application_number": "11559545",
	"application_date": "2006-11-14",
	"tags": null,
	"slug": "3d-graphics-api-extension-for-a-shared-exponent-image-format",
	"match_type": "name"
},
{
	"name": "Hardware override of application programming interface programmed state",
	"summary": "",
	"abstract": "A method and system for overriding state information programmed into a processor using an application programming interface (API) avoids introducing error conditions in the processor. An override monitor unit within the processor stores the programmed state for any setting that is overridden so that the programmed state can be restored when the error condition no longer exists. The override monitor unit overrides the programmed state by forcing the setting to a legal value that does not cause an error condition. The processor is able to continue operating without notifying a device driver that an error condition has occurred since the error condition is avoided.",
	"url": null,
	"owner": "NVIDIA Corporation",
	"publication_number": "08228338",
	"publication_date": "2012-07-24",
	"application_number": "11625136",
	"application_date": "2007-01-19",
	"tags": null,
	"slug": "hardware-override-of-application-programming-interface-programmed-state",
	"match_type": "name"
},
{
	"name": "Compatibility testing of an application programming interface",
	"summary": "",
	"abstract": "A method for compatibility testing that includes executing a test suite to test an application programming interface (API) implementation, wherein the test suite comprises a plurality of compatibility tests that test the compatibility of the API implementation to an API specification. The method also includes requesting sample data for at least one test of the plurality of compatibility tests using a provider interface, wherein the sample data corresponds to the API implementation, and receiving the requested sample data from a provider, wherein the provider implements the provider interface. In addition, the method includes using the sample data by the at least one test to test the API implementation, receiving a result of the at least one test, and reporting a result of executing the test suite using the result of the at least one test.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "08065662",
	"publication_date": "2011-11-22",
	"application_number": "11731640",
	"application_date": "2007-03-30",
	"tags": null,
	"slug": "compatibility-testing-of-an-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Detection of non-standard application programming interface usage via analysis of executable code",
	"summary": "",
	"abstract": "A method for detection of non-portable application programming interface usage via executable code analysis includes identifying one or more conditions for inclusion of an object class within a set of acceptable object classes, wherein a reference to any object class of the set of acceptable object classes by an application is in compliance with a specified portability criterion. The method further includes analyzing an executable version of the application to identify object classes referenced by the application, and generating a portability verification report for the application, wherein the report indicates that the application violates the specified portability criterion if an object class referenced by the application does not meet at least one of the conditions for inclusion in the set of acceptable classes.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "07945902",
	"publication_date": "2011-05-17",
	"application_number": "11180819",
	"application_date": "2005-07-13",
	"tags": null,
	"slug": "detection-of-nonstandard-application-programming-interface-usage-via-analysis-of-executable-code",
	"match_type": "name"
},
{
	"name": "Method and apparatus for testing a binding application programming interface",
	"summary": "",
	"abstract": "One embodiment of the present invention provides a system for testing a binding Application Programming Interface (API) on a device, wherein the binding API is bound to a native API for the device and provides different commands than the native API. During operation, the system executes a native-API test on the device through the native API to produce a native-API test-result. The system subsequently receives the native-API test-result from the device at a test-harness. Next, the system sends a binding-API test to a test-agent on the device which enables the test-agent to execute the binding-API test through the binding API to produce a binding-API test-result. The system then receives the binding-API test-result from the test-agent. Finally, the system compares the native-API test-result to the binding-API test-result to determine if the binding API is functionally equivalent to the native API.",
	"url": null,
	"owner": "Oracle America, Inc.",
	"publication_number": "08010950",
	"publication_date": "2011-08-30",
	"application_number": "11775467",
	"application_date": "2007-07-10",
	"tags": null,
	"slug": "method-and-apparatus-for-testing-a-binding-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Integration functionality for a test tool for application programming interfaces",
	"summary": "",
	"abstract": "Methods and apparatus for enabling efficient testing of application programming interface (API) frameworks and application code are disclosed. According to one aspect of the present invention, a method for capturing a call to an API using a framework including an execution engine that communicate with an adapter to cause the API call to be executed involves making the API call and constructing an object using metadata associated with the API call. The constructed object is converted into a node that is of a declarative metadata format, and the node is stored.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07779036",
	"publication_date": "2010-08-17",
	"application_number": "10991608",
	"application_date": "2004-11-17",
	"tags": null,
	"slug": "integration-functionality-for-a-test-tool-for-application-programming-interfaces",
	"match_type": "name"
},
{
	"name": "Personal messaging application programming interface for integrating an application with groupware systems",
	"summary": "",
	"abstract": "A personal messaging application programming interface can be utilized by a developer in order to add groupware functionality to an application. The interface can include various schemas and providers that allow the schemas to connect to a collaboration server which provides the groupware functionality. The schemas can further include item and container classes and can extend other schemas so as to provide functionality that is more specific to the collaboration server. The items and containers can represent various entities on the collaboration server. The providers can use stubs in order to create connections to the collaboration server and can implement the schema hierarchy so as to map the functionality defined by the schema into various core calls on the collaboration server.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "07996855",
	"publication_date": "2011-08-09",
	"application_number": "11522240",
	"application_date": "2006-09-15",
	"tags": null,
	"slug": "personal-messaging-application-programming-interface-for-integrating-an-application-with-groupware-systems",
	"match_type": "name"
},
{
	"name": "Streaming parser API for processing XML document",
	"summary": "",
	"abstract": "A streaming parser API expands a base parser by building an iterative method on top of the base parser. The iterative method allows a user to pass a selected element type to the base parser, which can step through the XML document until it locates a matching element. The base parser can then extract the element, process the element as an event, and place the event on an event stream for use by an application.",
	"url": null,
	"owner": "Oracle International Corporation",
	"publication_number": "08074160",
	"publication_date": "2011-12-06",
	"application_number": "11228593",
	"application_date": "2005-09-16",
	"tags": null,
	"slug": "streaming-parser-api-for-processing-xml-document",
	"match_type": "name"
},
{
	"name": "Comprehensive application programming interfaces for handling logical volume manager",
	"summary": "",
	"abstract": "Some embodiments of a system and a method to provide comprehensive application programming interfaces to a logical volume manager have been presented. For instance, a processing device running on a server may provide a library having a set of application programming interfaces to interface an application and a logical volume manager (LVM). In response to an error occurring while running the application in operation with the LVM, the processing device may return an error string in a natural language, a piece of programming code associated with the error, and an error code associated with the error using one or more of the set of application programming interfaces.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08132060",
	"publication_date": "2012-03-06",
	"application_number": "12626344",
	"application_date": "2009-11-25",
	"tags": null,
	"slug": "comprehensive-application-programming-interfaces-for-handling-logical-volume-manager",
	"match_type": "name"
},
{
	"name": "Providing customized visualization of application binary interface/application programming interface-related information",
	"summary": "",
	"abstract": "A mechanism for providing customized visualization of Application Binary Interface-related information is described. A method of embodiments of the invention includes querying a database storing interface provisioning details and interface usage details relating to application binary interfaces (ABIs) associated with shared libraries provided by an operating system running on a computer system. The database further stores comparison results obtained from comparing the interface provisioning details with the interface usage details. The method further includes extracting a set of information from the database, and customizing visualization representation of the set of information. The set of information is composed of any part or all of the interface provisioning details, the interface usage details, and the comparison results.",
	"url": null,
	"owner": "Red Hat, Inc.",
	"publication_number": "08938706",
	"publication_date": "2015-01-20",
	"application_number": "12953023",
	"application_date": "2010-11-23",
	"tags": null,
	"slug": "providing-customized-visualization-of-application-binary-interfaceapplication-programming-interfacerelated-information",
	"match_type": "name"
},
{
	"name": "Method and system for obtaining and modifying portlets via an application programming interface",
	"summary": "",
	"abstract": "A method and a system for obtaining and modifying a plurality of Web components, such as portlets, via an application programming interface (API) are described. The method includes permitting a portal application to invoke a portlet, wherein the portlet runs inside a portlet container and the portal application runs independently from the portlet container; providing information to the portlet container about the invoked portlet related to a runtime environment of the portal application; and modifying the provided information from the portal application to customize the portlet. The system includes a portal application, a portlet container to permit the portal application to invoke a portlet, the portlet to run inside the portlet container and the portal application to run independently from the portlet container, an interface to provide and modify information about the invoked portlet that is related to a runtime environment of the portal application, and an interface to provide a portlet mode, a window state, and a set of Uniform Resource Locator (URL) parameters to the portal application to create a valid portlet URL.",
	"url": null,
	"owner": "SAP AG",
	"publication_number": "08082508",
	"publication_date": "2011-12-20",
	"application_number": "12112881",
	"application_date": "2008-04-30",
	"tags": null,
	"slug": "method-and-system-for-obtaining-and-modifying-portlets-via-an-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Method and system for comprehensive socket application programming interface loopback processing",
	"summary": "",
	"abstract": "Methods and systems for comprehensive socket API loopback processing on a computing device. In an exemplary method and system, a socket API processes loopback calls without resort to a TCP/IP protocol stock or lower level systems (e.g. network drivers), reducing overhead requirements and processing burdens imposed on the TCP/IP stack and lower level systems and improving overall computing device performance.",
	"url": null,
	"owner": "Sharp Laboratories of America, Inc.",
	"publication_number": "08286197",
	"publication_date": "2012-10-09",
	"application_number": "12218636",
	"application_date": "2008-07-17",
	"tags": null,
	"slug": "method-and-system-for-comprehensive-socket-application-programming-interface-loopback-processing",
	"match_type": "name"
},
{
	"name": "Adaptive communication application programming interface",
	"summary": "",
	"abstract": "An apparatus and method for maintaining data for multi-channel communication queuing associated with different media formats such as telephone, email, and fax. A list of agent data includes information related to types of communication media an agent can access. The data can further include information related to an agent's skills, a list of media routes, statistics for communication channels of specified media types, statistics for an agent, and journals for work items. Priority values for the media routes, the maximum number of queued items for the media routes, and times for escalating a work item can also be included.",
	"url": null,
	"owner": "Siebel Systems, Inc.",
	"publication_number": "08045698",
	"publication_date": "2011-10-25",
	"application_number": "11966545",
	"application_date": "2007-12-28",
	"tags": null,
	"slug": "adaptive-communication-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Quality of service application programming interface over socket",
	"summary": "",
	"abstract": "Disclosed is a Quality of Service (QoS) control mechanism for QoS-aware network applications running on computer devices. The mechanism provides IP socket-based QoS Application Program Interfaces (APIs) for QoS-aware applications for accessing MAC layer QoS function of network access devices. In various embodiments, the QoS mechanism utilizes QoS API over Socket (QAoS) handler and/or a MAC layer QAoS handler wrapper at the network access device to control and monitor the QoS data being transmitted by the application over the active network interface(s).",
	"url": null,
	"owner": "Sierra Wireless, Inc.",
	"publication_number": "07830804",
	"publication_date": "2010-11-09",
	"application_number": "12009231",
	"application_date": "2008-01-16",
	"tags": null,
	"slug": "quality-of-service-application-programming-interface-over-socket",
	"match_type": "name"
},
{
	"name": "Application programming interface for providing native and non-native display utility",
	"summary": "",
	"abstract": "Methods for controlling complementary dual displays for use with an electronic device are presented including: receiving an input for display on a non-native display, where the input includes a native user interface (UI) input and a non-native UI input, and where the non-native display is a bistable, low frame rate display; if the input is the native UI input, sending the first native UI input to a corresponding application, processing the native UI input by the corresponding application, calling a non-native API for forwarding the processed native UI input to a non-native display driver, and sending a non-native display signal to the non-native display; receiving another native UI input for display on a native display, where the native display is a refresh-based, high frame rate display; and sending the other native UI input to the corresponding application.",
	"url": null,
	"owner": "Spring Design Co. Ltd.",
	"publication_number": "07926072",
	"publication_date": "2011-04-12",
	"application_number": "12033608",
	"application_date": "2008-02-19",
	"tags": null,
	"slug": "application-programming-interface-for-providing-native-and-nonnative-display-utility",
	"match_type": "name"
},
{
	"name": "Device location application programming interface",
	"summary": "",
	"abstract": "Media, methods and interfaces are provided for interfacing a mobile device and an application virtual machine to provide location information of the mobile device from a secondary source. When location information supplied by a first source to the application virtual machine contains invalid values for device location, a secondary source is utilized to provide the location information. No new processing thread is spawned for collection of back-up source configurations. Thus, interfaces initiate the first and second location determination methods in a single request. The power consumed by the mobile device to retrieve the device location information from a secondary source is reduced by the absence of additional configuration collection threads. Interfaces include a primary location component, a verification component, a backup location component, and a location update component.",
	"url": null,
	"owner": "Sprint Communications Company L.P.",
	"publication_number": "08250584",
	"publication_date": "2012-08-21",
	"application_number": "12173077",
	"application_date": "2008-07-15",
	"tags": null,
	"slug": "device-location-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Techniques for time-dependent storage management with a portable application programming interface",
	"summary": "",
	"abstract": "Techniques for time-dependent storage management with a portable application programming interface are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for time-dependent storage management. The method may comprise interfacing with a host and a storage system having one or more storage devices. The method may also comprise intercepting all write commands that the host issues to the storage system. The method may additionally comprise performing a copy-on-write operation for each intercepted write command, wherein copy-on-write data and metadata associated with each intercepted write command are recorded, the metadata including at least a timestamp associated with each intercepted write command.",
	"url": null,
	"owner": "Symantec Corporation",
	"publication_number": "07849273",
	"publication_date": "2010-12-07",
	"application_number": "11549428",
	"application_date": "2006-10-13",
	"tags": null,
	"slug": "techniques-for-timedependent-storage-management-with-a-portable-application-programming-interface",
	"match_type": "name"
},
{
	"name": "Application programming interface combining asset listings",
	"summary": "",
	"abstract": "A system, method and API for processing and providing a unified list of the content offerings of multiple content sources.",
	"url": null,
	"owner": "TVWorks, LLC",
	"publication_number": "07849064",
	"publication_date": "2010-12-07",
	"application_number": "11103297",
	"application_date": "2005-04-11",
	"tags": null,
	"slug": "application-programming-interface-combining-asset-listings",
	"match_type": "name"
},
{
	"name": "Apparatuses, methods, and systems for an API call abstractor",
	"summary": "",
	"abstract": "A social networking application manager (u201cSNAMu201d) initializes a set of modules for an application with their most updated versions. SNAM then iterates through the following operations. SNAM obtains the specification attributes for an updated version of the application. SNAM then obtains specification attributes for each module. SNAM compares the specification attributes of the modules with the specification attributes of the application to identify incompatible specification attributes. SNAM identifies the least compatible module. And SNAM replaces the least compatible module with a version of the module that results from decrementing a version number for the module. This iteration continues until there are no more incompatible specification attributes.",
	"url": null,
	"owner": "Zynga Inc.",
	"publication_number": "08146075",
	"publication_date": "2012-03-27",
	"application_number": "13244687",
	"application_date": "2011-09-26",
	"tags": null,
	"slug": "apparatuses-methods-and-systems-for-an-api-call-abstractor",
	"match_type": "name"
}]